
PegasusMainBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006708  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006898  08006898  00016898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006934  08006934  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006934  08006934  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006934  08006934  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006934  08006934  00016934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800693c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000070  080069ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  080069ac  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167d6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ef8  00000000  00000000  00036876  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  00039770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001208  00000000  00000000  0003aae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021459  00000000  00000000  0003bce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013d46  00000000  00000000  0005d141  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8241  00000000  00000000  00070e87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001390c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005494  00000000  00000000  00139144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006880 	.word	0x08006880

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006880 	.word	0x08006880

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000286:	f107 031c 	add.w	r3, r7, #28
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
 80002a0:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002a2:	4b2e      	ldr	r3, [pc, #184]	; (800035c <MX_ADC1_Init+0xdc>)
 80002a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002aa:	4b2c      	ldr	r3, [pc, #176]	; (800035c <MX_ADC1_Init+0xdc>)
 80002ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80002b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002b2:	4b2a      	ldr	r3, [pc, #168]	; (800035c <MX_ADC1_Init+0xdc>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002b8:	4b28      	ldr	r3, [pc, #160]	; (800035c <MX_ADC1_Init+0xdc>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002be:	4b27      	ldr	r3, [pc, #156]	; (800035c <MX_ADC1_Init+0xdc>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002c4:	4b25      	ldr	r3, [pc, #148]	; (800035c <MX_ADC1_Init+0xdc>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002cc:	4b23      	ldr	r3, [pc, #140]	; (800035c <MX_ADC1_Init+0xdc>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002d2:	4b22      	ldr	r3, [pc, #136]	; (800035c <MX_ADC1_Init+0xdc>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d8:	4b20      	ldr	r3, [pc, #128]	; (800035c <MX_ADC1_Init+0xdc>)
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80002de:	4b1f      	ldr	r3, [pc, #124]	; (800035c <MX_ADC1_Init+0xdc>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002e4:	4b1d      	ldr	r3, [pc, #116]	; (800035c <MX_ADC1_Init+0xdc>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002ec:	4b1b      	ldr	r3, [pc, #108]	; (800035c <MX_ADC1_Init+0xdc>)
 80002ee:	2204      	movs	r2, #4
 80002f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002f2:	4b1a      	ldr	r3, [pc, #104]	; (800035c <MX_ADC1_Init+0xdc>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80002f8:	4b18      	ldr	r3, [pc, #96]	; (800035c <MX_ADC1_Init+0xdc>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002fe:	4817      	ldr	r0, [pc, #92]	; (800035c <MX_ADC1_Init+0xdc>)
 8000300:	f001 f80c 	bl	800131c <HAL_ADC_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800030a:	f000 fbfd 	bl	8000b08 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800030e:	2300      	movs	r3, #0
 8000310:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000312:	f107 031c 	add.w	r3, r7, #28
 8000316:	4619      	mov	r1, r3
 8000318:	4810      	ldr	r0, [pc, #64]	; (800035c <MX_ADC1_Init+0xdc>)
 800031a:	f001 fccb 	bl	8001cb4 <HAL_ADCEx_MultiModeConfigChannel>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000324:	f000 fbf0 	bl	8000b08 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000328:	2304      	movs	r3, #4
 800032a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800032c:	2301      	movs	r3, #1
 800032e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000330:	2300      	movs	r3, #0
 8000332:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000338:	2300      	movs	r3, #0
 800033a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800033c:	2300      	movs	r3, #0
 800033e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	4619      	mov	r1, r3
 8000344:	4805      	ldr	r0, [pc, #20]	; (800035c <MX_ADC1_Init+0xdc>)
 8000346:	f001 f9c9 	bl	80016dc <HAL_ADC_ConfigChannel>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000350:	f000 fbda 	bl	8000b08 <Error_Handler>
  }

}
 8000354:	bf00      	nop
 8000356:	3728      	adds	r7, #40	; 0x28
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	200000ec 	.word	0x200000ec

08000360 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000366:	463b      	mov	r3, r7
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
 8000374:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000376:	4b27      	ldr	r3, [pc, #156]	; (8000414 <MX_ADC2_Init+0xb4>)
 8000378:	4a27      	ldr	r2, [pc, #156]	; (8000418 <MX_ADC2_Init+0xb8>)
 800037a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800037c:	4b25      	ldr	r3, [pc, #148]	; (8000414 <MX_ADC2_Init+0xb4>)
 800037e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000382:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000384:	4b23      	ldr	r3, [pc, #140]	; (8000414 <MX_ADC2_Init+0xb4>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800038a:	4b22      	ldr	r3, [pc, #136]	; (8000414 <MX_ADC2_Init+0xb4>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000390:	4b20      	ldr	r3, [pc, #128]	; (8000414 <MX_ADC2_Init+0xb4>)
 8000392:	2200      	movs	r2, #0
 8000394:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000396:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <MX_ADC2_Init+0xb4>)
 8000398:	2200      	movs	r2, #0
 800039a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800039e:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003c0:	2204      	movs	r2, #4
 80003c2:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003d0:	4810      	ldr	r0, [pc, #64]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003d2:	f000 ffa3 	bl	800131c <HAL_ADC_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80003dc:	f000 fb94 	bl	8000b08 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003e0:	2305      	movs	r3, #5
 80003e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e4:	2301      	movs	r3, #1
 80003e6:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003f8:	463b      	mov	r3, r7
 80003fa:	4619      	mov	r1, r3
 80003fc:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003fe:	f001 f96d 	bl	80016dc <HAL_ADC_ConfigChannel>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000408:	f000 fb7e 	bl	8000b08 <Error_Handler>
  }

}
 800040c:	bf00      	nop
 800040e:	3718      	adds	r7, #24
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	2000009c 	.word	0x2000009c
 8000418:	50000100 	.word	0x50000100

0800041c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000422:	f107 031c 	add.w	r3, r7, #28
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
 800043c:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc3.Instance = ADC3;
 800043e:	4b2d      	ldr	r3, [pc, #180]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000440:	4a2d      	ldr	r2, [pc, #180]	; (80004f8 <MX_ADC3_Init+0xdc>)
 8000442:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000444:	4b2b      	ldr	r3, [pc, #172]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000446:	2200      	movs	r2, #0
 8000448:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800044a:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <MX_ADC3_Init+0xd8>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000450:	4b28      	ldr	r3, [pc, #160]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000456:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000458:	2200      	movs	r2, #0
 800045a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800045c:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <MX_ADC3_Init+0xd8>)
 800045e:	2200      	movs	r2, #0
 8000460:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000464:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000466:	2200      	movs	r2, #0
 8000468:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800046a:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <MX_ADC3_Init+0xd8>)
 800046c:	2201      	movs	r2, #1
 800046e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000470:	4b20      	ldr	r3, [pc, #128]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000476:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000478:	2201      	movs	r2, #1
 800047a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800047c:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <MX_ADC3_Init+0xd8>)
 800047e:	2200      	movs	r2, #0
 8000480:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000486:	2204      	movs	r2, #4
 8000488:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800048a:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <MX_ADC3_Init+0xd8>)
 800048c:	2200      	movs	r2, #0
 800048e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000490:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000492:	2200      	movs	r2, #0
 8000494:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000496:	4817      	ldr	r0, [pc, #92]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000498:	f000 ff40 	bl	800131c <HAL_ADC_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80004a2:	f000 fb31 	bl	8000b08 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80004aa:	f107 031c 	add.w	r3, r7, #28
 80004ae:	4619      	mov	r1, r3
 80004b0:	4810      	ldr	r0, [pc, #64]	; (80004f4 <MX_ADC3_Init+0xd8>)
 80004b2:	f001 fbff 	bl	8001cb4 <HAL_ADCEx_MultiModeConfigChannel>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80004bc:	f000 fb24 	bl	8000b08 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80004c0:	230c      	movs	r3, #12
 80004c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004c4:	2301      	movs	r3, #1
 80004c6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004c8:	2300      	movs	r3, #0
 80004ca:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4619      	mov	r1, r3
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_ADC3_Init+0xd8>)
 80004de:	f001 f8fd 	bl	80016dc <HAL_ADC_ConfigChannel>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80004e8:	f000 fb0e 	bl	8000b08 <Error_Handler>
  }

}
 80004ec:	bf00      	nop
 80004ee:	3728      	adds	r7, #40	; 0x28
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	2000013c 	.word	0x2000013c
 80004f8:	50000400 	.word	0x50000400

080004fc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b090      	sub	sp, #64	; 0x40
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800051c:	d146      	bne.n	80005ac <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800051e:	4b5f      	ldr	r3, [pc, #380]	; (800069c <HAL_ADC_MspInit+0x1a0>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	3301      	adds	r3, #1
 8000524:	4a5d      	ldr	r2, [pc, #372]	; (800069c <HAL_ADC_MspInit+0x1a0>)
 8000526:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000528:	4b5c      	ldr	r3, [pc, #368]	; (800069c <HAL_ADC_MspInit+0x1a0>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d10b      	bne.n	8000548 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000530:	4b5b      	ldr	r3, [pc, #364]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a5a      	ldr	r2, [pc, #360]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6153      	str	r3, [r2, #20]
 800053c:	4b58      	ldr	r3, [pc, #352]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	62bb      	str	r3, [r7, #40]	; 0x28
 8000546:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000548:	4b55      	ldr	r3, [pc, #340]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a54      	ldr	r2, [pc, #336]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 800054e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000552:	6153      	str	r3, [r2, #20]
 8000554:	4b52      	ldr	r3, [pc, #328]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
 800055e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000560:	4b4f      	ldr	r3, [pc, #316]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a4e      	ldr	r2, [pc, #312]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	6153      	str	r3, [r2, #20]
 800056c:	4b4c      	ldr	r3, [pc, #304]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000574:	623b      	str	r3, [r7, #32]
 8000576:	6a3b      	ldr	r3, [r7, #32]
    PC3     ------> ADC1_IN9
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = TEMP0_Pin;
 8000578:	2308      	movs	r3, #8
 800057a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057c:	2303      	movs	r3, #3
 800057e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TEMP0_GPIO_Port, &GPIO_InitStruct);
 8000584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000588:	4619      	mov	r1, r3
 800058a:	4846      	ldr	r0, [pc, #280]	; (80006a4 <HAL_ADC_MspInit+0x1a8>)
 800058c:	f001 fefc 	bl	8002388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURR_V_Pin|NTC_PWR_Pin|CURR_W_Pin;
 8000590:	230e      	movs	r3, #14
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000594:	2303      	movs	r3, #3
 8000596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005a0:	4619      	mov	r1, r3
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f001 feef 	bl	8002388 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80005aa:	e073      	b.n	8000694 <HAL_ADC_MspInit+0x198>
  else if(adcHandle->Instance==ADC2)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a3d      	ldr	r2, [pc, #244]	; (80006a8 <HAL_ADC_MspInit+0x1ac>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d145      	bne.n	8000642 <HAL_ADC_MspInit+0x146>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80005b6:	4b39      	ldr	r3, [pc, #228]	; (800069c <HAL_ADC_MspInit+0x1a0>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	3301      	adds	r3, #1
 80005bc:	4a37      	ldr	r2, [pc, #220]	; (800069c <HAL_ADC_MspInit+0x1a0>)
 80005be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80005c0:	4b36      	ldr	r3, [pc, #216]	; (800069c <HAL_ADC_MspInit+0x1a0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d10b      	bne.n	80005e0 <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80005c8:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a34      	ldr	r2, [pc, #208]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6153      	str	r3, [r2, #20]
 80005d4:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	61fb      	str	r3, [r7, #28]
 80005de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a2e      	ldr	r2, [pc, #184]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 80005e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005f4:	61bb      	str	r3, [r7, #24]
 80005f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 80005fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000602:	6153      	str	r3, [r2, #20]
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TEMP1_Pin|ERR_IN_Pin;
 8000610:	2330      	movs	r3, #48	; 0x30
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000614:	2303      	movs	r3, #3
 8000616:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000620:	4619      	mov	r1, r3
 8000622:	4820      	ldr	r0, [pc, #128]	; (80006a4 <HAL_ADC_MspInit+0x1a8>)
 8000624:	f001 feb0 	bl	8002388 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBUS_SCALED_Pin;
 8000628:	2304      	movs	r3, #4
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800062c:	2303      	movs	r3, #3
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VBUS_SCALED_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000638:	4619      	mov	r1, r3
 800063a:	481c      	ldr	r0, [pc, #112]	; (80006ac <HAL_ADC_MspInit+0x1b0>)
 800063c:	f001 fea4 	bl	8002388 <HAL_GPIO_Init>
}
 8000640:	e028      	b.n	8000694 <HAL_ADC_MspInit+0x198>
  else if(adcHandle->Instance==ADC3)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a1a      	ldr	r2, [pc, #104]	; (80006b0 <HAL_ADC_MspInit+0x1b4>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d123      	bne.n	8000694 <HAL_ADC_MspInit+0x198>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000652:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 800066a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800066e:	6153      	str	r3, [r2, #20]
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURR_U_Pin;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000680:	2303      	movs	r3, #3
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CURR_U_GPIO_Port, &GPIO_InitStruct);
 8000688:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800068c:	4619      	mov	r1, r3
 800068e:	4807      	ldr	r0, [pc, #28]	; (80006ac <HAL_ADC_MspInit+0x1b0>)
 8000690:	f001 fe7a 	bl	8002388 <HAL_GPIO_Init>
}
 8000694:	bf00      	nop
 8000696:	3740      	adds	r7, #64	; 0x40
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000008c 	.word	0x2000008c
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000800 	.word	0x48000800
 80006a8:	50000100 	.word	0x50000100
 80006ac:	48000400 	.word	0x48000400
 80006b0:	50000400 	.word	0x50000400

080006b4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_CAN_Init+0x60>)
 80006ba:	4a17      	ldr	r2, [pc, #92]	; (8000718 <MX_CAN_Init+0x64>)
 80006bc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_CAN_Init+0x60>)
 80006c0:	2210      	movs	r2, #16
 80006c2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_CAN_Init+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_CAN_Init+0x60>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_CAN_Init+0x60>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_CAN_Init+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_CAN_Init+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_CAN_Init+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_CAN_Init+0x60>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_CAN_Init+0x60>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_CAN_Init+0x60>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_CAN_Init+0x60>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_CAN_Init+0x60>)
 8000702:	f001 fc28 	bl	8001f56 <HAL_CAN_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800070c:	f000 f9fc 	bl	8000b08 <Error_Handler>
  }

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2000018c 	.word	0x2000018c
 8000718:	40006400 	.word	0x40006400

0800071c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a17      	ldr	r2, [pc, #92]	; (8000798 <HAL_CAN_MspInit+0x7c>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d128      	bne.n	8000790 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <HAL_CAN_MspInit+0x80>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <HAL_CAN_MspInit+0x80>)
 8000744:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <HAL_CAN_MspInit+0x80>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <HAL_CAN_MspInit+0x80>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a10      	ldr	r2, [pc, #64]	; (800079c <HAL_CAN_MspInit+0x80>)
 800075c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000760:	6153      	str	r3, [r2, #20]
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <HAL_CAN_MspInit+0x80>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800076e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000780:	2309      	movs	r3, #9
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <HAL_CAN_MspInit+0x84>)
 800078c:	f001 fdfc 	bl	8002388 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40006400 	.word	0x40006400
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000400 	.word	0x48000400

080007a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ba:	4b4b      	ldr	r3, [pc, #300]	; (80008e8 <MX_GPIO_Init+0x144>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a4a      	ldr	r2, [pc, #296]	; (80008e8 <MX_GPIO_Init+0x144>)
 80007c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c4:	6153      	str	r3, [r2, #20]
 80007c6:	4b48      	ldr	r3, [pc, #288]	; (80008e8 <MX_GPIO_Init+0x144>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4b45      	ldr	r3, [pc, #276]	; (80008e8 <MX_GPIO_Init+0x144>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a44      	ldr	r2, [pc, #272]	; (80008e8 <MX_GPIO_Init+0x144>)
 80007d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	4b42      	ldr	r3, [pc, #264]	; (80008e8 <MX_GPIO_Init+0x144>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b3f      	ldr	r3, [pc, #252]	; (80008e8 <MX_GPIO_Init+0x144>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a3e      	ldr	r2, [pc, #248]	; (80008e8 <MX_GPIO_Init+0x144>)
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	6153      	str	r3, [r2, #20]
 80007f6:	4b3c      	ldr	r3, [pc, #240]	; (80008e8 <MX_GPIO_Init+0x144>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b39      	ldr	r3, [pc, #228]	; (80008e8 <MX_GPIO_Init+0x144>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	4a38      	ldr	r2, [pc, #224]	; (80008e8 <MX_GPIO_Init+0x144>)
 8000808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800080c:	6153      	str	r3, [r2, #20]
 800080e:	4b36      	ldr	r3, [pc, #216]	; (80008e8 <MX_GPIO_Init+0x144>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2110      	movs	r1, #16
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f001 ff2b 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_ENABLE_GPIO_Port, PWR_ENABLE_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2102      	movs	r1, #2
 800082a:	4830      	ldr	r0, [pc, #192]	; (80008ec <MX_GPIO_Init+0x148>)
 800082c:	f001 ff26 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STATUS_Pin|ERR_OUT_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000836:	482e      	ldr	r0, [pc, #184]	; (80008f0 <MX_GPIO_Init+0x14c>)
 8000838:	f001 ff20 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HALL3_Pin|HALL2_Pin|HALL1_Pin;
 800083c:	2307      	movs	r3, #7
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4828      	ldr	r0, [pc, #160]	; (80008f0 <MX_GPIO_Init+0x14c>)
 8000850:	f001 fd9a 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086a:	f001 fd8d 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800086e:	2310      	movs	r3, #16
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000888:	f001 fd7e 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_ENABLE_Pin;
 800088c:	2302      	movs	r3, #2
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWR_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4812      	ldr	r0, [pc, #72]	; (80008ec <MX_GPIO_Init+0x148>)
 80008a4:	f001 fd70 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STATUS_Pin|ERR_OUT_Pin|DEBUG_LED_Pin;
 80008a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	480b      	ldr	r0, [pc, #44]	; (80008f0 <MX_GPIO_Init+0x14c>)
 80008c2:	f001 fd61 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MULTI0_Pin|MULTI1_Pin;
 80008c6:	2330      	movs	r3, #48	; 0x30
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_GPIO_Init+0x148>)
 80008da:	f001 fd55 	bl	8002388 <HAL_GPIO_Init>

}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000
 80008ec:	48000400 	.word	0x48000400
 80008f0:	48000800 	.word	0x48000800

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b0ba      	sub	sp, #232	; 0xe8
 80008f8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fa:	f000 fc87 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fe:	f000 f89f 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000902:	f7ff ff4f 	bl	80007a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000906:	f7ff fcbb 	bl	8000280 <MX_ADC1_Init>
  MX_ADC2_Init();
 800090a:	f7ff fd29 	bl	8000360 <MX_ADC2_Init>
  MX_ADC3_Init();
 800090e:	f7ff fd85 	bl	800041c <MX_ADC3_Init>
  MX_CAN_Init();
 8000912:	f7ff fecf 	bl	80006b4 <MX_CAN_Init>
  MX_SPI1_Init();
 8000916:	f000 f8ff 	bl	8000b18 <MX_SPI1_Init>
  MX_TIM1_Init();
 800091a:	f000 fa1d 	bl	8000d58 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800091e:	f000 fb71 	bl	8001004 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000922:	f000 fbe3 	bl	80010ec <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  // Testa o funcionamento da flash
  // Acaba também testando a UART (MULTI2/3)
  uint8_t tx_buf[] = { 0x9F, 0x00, 0x00, 0x00, 0x00 };
 8000926:	239f      	movs	r3, #159	; 0x9f
 8000928:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 800092c:	2300      	movs	r3, #0
 800092e:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 8000932:	2300      	movs	r3, #0
 8000934:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8000938:	2300      	movs	r3, #0
 800093a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800093e:	2300      	movs	r3, #0
 8000940:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
  uint8_t rx_buf[5] = {0};
 8000944:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	711a      	strb	r2, [r3, #4]
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2110      	movs	r1, #16
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f001 fe91 	bl	800267c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800095a:	200a      	movs	r0, #10
 800095c:	f000 fcbc 	bl	80012d8 <HAL_Delay>
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2110      	movs	r1, #16
 8000964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000968:	f001 fe88 	bl	800267c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, tx_buf, rx_buf, sizeof(rx_buf), 0xff);
 800096c:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8000970:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000974:	23ff      	movs	r3, #255	; 0xff
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	2305      	movs	r3, #5
 800097a:	482a      	ldr	r0, [pc, #168]	; (8000a24 <main+0x130>)
 800097c:	f003 fb29 	bl	8003fd2 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2110      	movs	r1, #16
 8000984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000988:	f001 fe78 	bl	800267c <HAL_GPIO_WritePin>
  uint32_t serial = rx_buf[1] << 16 | rx_buf[2] << 8 | rx_buf[3];
 800098c:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8000990:	041a      	lsls	r2, r3, #16
 8000992:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8000996:	021b      	lsls	r3, r3, #8
 8000998:	4313      	orrs	r3, r2
 800099a:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
 800099e:	4313      	orrs	r3, r2
 80009a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  char buf[200];
  sprintf(buf, "---\r\nFlash Serial: %lu | %s\n\r ", serial, serial == 15679512 ? "PASS" : "FAIL");
 80009a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80009a8:	4a1f      	ldr	r2, [pc, #124]	; (8000a28 <main+0x134>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d101      	bne.n	80009b2 <main+0xbe>
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <main+0x138>)
 80009b0:	e000      	b.n	80009b4 <main+0xc0>
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <main+0x13c>)
 80009b4:	1d38      	adds	r0, r7, #4
 80009b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80009ba:	491e      	ldr	r1, [pc, #120]	; (8000a34 <main+0x140>)
 80009bc:	f005 fb5a 	bl	8006074 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *) buf, strlen(buf), 0xff);
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fc04 	bl	80001d0 <strlen>
 80009c8:	4603      	mov	r3, r0
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	1d39      	adds	r1, r7, #4
 80009ce:	23ff      	movs	r3, #255	; 0xff
 80009d0:	4819      	ldr	r0, [pc, #100]	; (8000a38 <main+0x144>)
 80009d2:	f004 ff13 	bl	80057fc <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Testa os LEDs
	  HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 80009d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009da:	4818      	ldr	r0, [pc, #96]	; (8000a3c <main+0x148>)
 80009dc:	f001 fe66 	bl	80026ac <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(ERR_OUT_GPIO_Port, ERR_OUT_Pin);
 80009e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e4:	4815      	ldr	r0, [pc, #84]	; (8000a3c <main+0x148>)
 80009e6:	f001 fe61 	bl	80026ac <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80009ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ee:	4813      	ldr	r0, [pc, #76]	; (8000a3c <main+0x148>)
 80009f0:	f001 fe5c 	bl	80026ac <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80009f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009f8:	f000 fc6e 	bl	80012d8 <HAL_Delay>
	  HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 80009fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a00:	480e      	ldr	r0, [pc, #56]	; (8000a3c <main+0x148>)
 8000a02:	f001 fe53 	bl	80026ac <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(ERR_OUT_GPIO_Port, ERR_OUT_Pin);
 8000a06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a0a:	480c      	ldr	r0, [pc, #48]	; (8000a3c <main+0x148>)
 8000a0c:	f001 fe4e 	bl	80026ac <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000a10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a14:	4809      	ldr	r0, [pc, #36]	; (8000a3c <main+0x148>)
 8000a16:	f001 fe49 	bl	80026ac <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000a1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a1e:	f000 fc5b 	bl	80012d8 <HAL_Delay>
	  HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 8000a22:	e7d8      	b.n	80009d6 <main+0xe2>
 8000a24:	200001b4 	.word	0x200001b4
 8000a28:	00ef4018 	.word	0x00ef4018
 8000a2c:	08006898 	.word	0x08006898
 8000a30:	080068a0 	.word	0x080068a0
 8000a34:	080068a8 	.word	0x080068a8
 8000a38:	20000264 	.word	0x20000264
 8000a3c:	48000800 	.word	0x48000800

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b09e      	sub	sp, #120	; 0x78
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a4a:	2228      	movs	r2, #40	; 0x28
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f005 fb08 	bl	8006064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a64:	463b      	mov	r3, r7
 8000a66:	223c      	movs	r2, #60	; 0x3c
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f005 fafa 	bl	8006064 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a70:	2301      	movs	r3, #1
 8000a72:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a78:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a82:	2302      	movs	r3, #2
 8000a84:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a8a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000a8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a90:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 ff00 	bl	800289c <HAL_RCC_OscConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000aa2:	f000 f831 	bl	8000b08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000abc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 fdf2 	bl	80036ac <HAL_RCC_ClockConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ace:	f000 f81b 	bl	8000b08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <SystemClock_Config+0xc4>)
 8000ad4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 f816 	bl	8003b1c <HAL_RCCEx_PeriphCLKConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000af6:	f000 f807 	bl	8000b08 <Error_Handler>
  }
}
 8000afa:	bf00      	nop
 8000afc:	3778      	adds	r7, #120	; 0x78
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	00021101 	.word	0x00021101

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <MX_SPI1_Init+0x78>)
 8000b20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b4e:	2208      	movs	r2, #8
 8000b50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b66:	2207      	movs	r2, #7
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_SPI1_Init+0x74>)
 8000b78:	f003 f980 	bl	8003e7c <HAL_SPI_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b82:	f7ff ffc1 	bl	8000b08 <Error_Handler>
  }

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001b4 	.word	0x200001b4
 8000b90:	40013000 	.word	0x40013000

08000b94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <HAL_SPI_MspInit+0x7c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d128      	bne.n	8000c08 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <HAL_SPI_MspInit+0x80>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	4a16      	ldr	r2, [pc, #88]	; (8000c14 <HAL_SPI_MspInit+0x80>)
 8000bbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bc0:	6193      	str	r3, [r2, #24]
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_SPI_MspInit+0x80>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_SPI_MspInit+0x80>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <HAL_SPI_MspInit+0x80>)
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	6153      	str	r3, [r2, #20]
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_SPI_MspInit+0x80>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = FLASH_CLK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin;
 8000be6:	23e0      	movs	r3, #224	; 0xe0
 8000be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f001 fbc0 	bl	8002388 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	; 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40013000 	.word	0x40013000
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_MspInit+0x50>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	4a11      	ldr	r2, [pc, #68]	; (8000c68 <HAL_MspInit+0x50>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6193      	str	r3, [r2, #24]
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_MspInit+0x50>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_MspInit+0x50>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <HAL_MspInit+0x50>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_MspInit+0x50>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2005      	movs	r0, #5
 8000c54:	f001 fb55 	bl	8002302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000c58:	2005      	movs	r0, #5
 8000c5a:	f001 fb6e 	bl	800233a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc0:	f000 faea 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000cc4:	f001 fb53 	bl	800236e <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <_sbrk+0x50>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x16>
		heap_end = &end;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <_sbrk+0x50>)
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <_sbrk+0x54>)
 8000cf0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <_sbrk+0x50>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <_sbrk+0x50>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4413      	add	r3, r2
 8000d00:	466a      	mov	r2, sp
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d907      	bls.n	8000d16 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d06:	f005 f983 	bl	8006010 <__errno>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d14:	e006      	b.n	8000d24 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <_sbrk+0x50>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a03      	ldr	r2, [pc, #12]	; (8000d2c <_sbrk+0x50>)
 8000d20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000090 	.word	0x20000090
 8000d30:	200005e0 	.word	0x200005e0

08000d34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b09a      	sub	sp, #104	; 0x68
 8000d5c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	615a      	str	r2, [r3, #20]
 8000d8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	222c      	movs	r2, #44	; 0x2c
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f005 f966 	bl	8006064 <memset>

  htim1.Instance = TIM1;
 8000d98:	4b54      	ldr	r3, [pc, #336]	; (8000eec <MX_TIM1_Init+0x194>)
 8000d9a:	4a55      	ldr	r2, [pc, #340]	; (8000ef0 <MX_TIM1_Init+0x198>)
 8000d9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d9e:	4b53      	ldr	r3, [pc, #332]	; (8000eec <MX_TIM1_Init+0x194>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b51      	ldr	r3, [pc, #324]	; (8000eec <MX_TIM1_Init+0x194>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000daa:	4b50      	ldr	r3, [pc, #320]	; (8000eec <MX_TIM1_Init+0x194>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db0:	4b4e      	ldr	r3, [pc, #312]	; (8000eec <MX_TIM1_Init+0x194>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000db6:	4b4d      	ldr	r3, [pc, #308]	; (8000eec <MX_TIM1_Init+0x194>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbc:	4b4b      	ldr	r3, [pc, #300]	; (8000eec <MX_TIM1_Init+0x194>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dc2:	484a      	ldr	r0, [pc, #296]	; (8000eec <MX_TIM1_Init+0x194>)
 8000dc4:	f003 fc74 	bl	80046b0 <HAL_TIM_Base_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000dce:	f7ff fe9b 	bl	8000b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4843      	ldr	r0, [pc, #268]	; (8000eec <MX_TIM1_Init+0x194>)
 8000de0:	f003 ff06 	bl	8004bf0 <HAL_TIM_ConfigClockSource>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000dea:	f7ff fe8d 	bl	8000b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dee:	483f      	ldr	r0, [pc, #252]	; (8000eec <MX_TIM1_Init+0x194>)
 8000df0:	f003 fd16 	bl	8004820 <HAL_TIM_PWM_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000dfa:	f7ff fe85 	bl	8000b08 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000dfe:	483b      	ldr	r0, [pc, #236]	; (8000eec <MX_TIM1_Init+0x194>)
 8000e00:	f003 fcad 	bl	800475e <HAL_TIM_OC_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000e0a:	f7ff fe7d 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4832      	ldr	r0, [pc, #200]	; (8000eec <MX_TIM1_Init+0x194>)
 8000e22:	f004 fb9f 	bl	8005564 <HAL_TIMEx_MasterConfigSynchronization>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000e2c:	f7ff fe6c 	bl	8000b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e30:	2360      	movs	r3, #96	; 0x60
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e44:	2300      	movs	r3, #0
 8000e46:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e50:	2200      	movs	r2, #0
 8000e52:	4619      	mov	r1, r3
 8000e54:	4825      	ldr	r0, [pc, #148]	; (8000eec <MX_TIM1_Init+0x194>)
 8000e56:	f003 fdbb 	bl	80049d0 <HAL_TIM_PWM_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000e60:	f7ff fe52 	bl	8000b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e64:	2300      	movs	r3, #0
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	481e      	ldr	r0, [pc, #120]	; (8000eec <MX_TIM1_Init+0x194>)
 8000e72:	f003 fd37 	bl	80048e4 <HAL_TIM_OC_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000e7c:	f7ff fe44 	bl	8000b08 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e84:	2208      	movs	r2, #8
 8000e86:	4619      	mov	r1, r3
 8000e88:	4818      	ldr	r0, [pc, #96]	; (8000eec <MX_TIM1_Init+0x194>)
 8000e8a:	f003 fd2b 	bl	80048e4 <HAL_TIM_OC_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000e94:	f7ff fe38 	bl	8000b08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4807      	ldr	r0, [pc, #28]	; (8000eec <MX_TIM1_Init+0x194>)
 8000ece:	f004 fbc9 	bl	8005664 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8000ed8:	f7ff fe16 	bl	8000b08 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <MX_TIM1_Init+0x194>)
 8000ede:	f000 f829 	bl	8000f34 <HAL_TIM_MspPostInit>

}
 8000ee2:	bf00      	nop
 8000ee4:	3768      	adds	r7, #104	; 0x68
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000218 	.word	0x20000218
 8000ef0:	40012c00 	.word	0x40012c00

08000ef4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_TIM_Base_MspInit+0x38>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d10b      	bne.n	8000f1e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_TIM_Base_MspInit+0x3c>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <HAL_TIM_Base_MspInit+0x3c>)
 8000f0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f10:	6193      	str	r3, [r2, #24]
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <HAL_TIM_Base_MspInit+0x3c>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40012c00 	.word	0x40012c00
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a29      	ldr	r2, [pc, #164]	; (8000ff8 <HAL_TIM_MspPostInit+0xc4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d14b      	bne.n	8000fee <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <HAL_TIM_MspPostInit+0xc8>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	4a28      	ldr	r2, [pc, #160]	; (8000ffc <HAL_TIM_MspPostInit+0xc8>)
 8000f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f60:	6153      	str	r3, [r2, #20]
 8000f62:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <HAL_TIM_MspPostInit+0xc8>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <HAL_TIM_MspPostInit+0xc8>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	4a22      	ldr	r2, [pc, #136]	; (8000ffc <HAL_TIM_MspPostInit+0xc8>)
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	6153      	str	r3, [r2, #20]
 8000f7a:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <HAL_TIM_MspPostInit+0xc8>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = U_L_Pin|V_L_Pin;
 8000f86:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f98:	2306      	movs	r3, #6
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4817      	ldr	r0, [pc, #92]	; (8001000 <HAL_TIM_MspPostInit+0xcc>)
 8000fa4:	f001 f9f0 	bl	8002388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_L_Pin;
 8000fa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_L_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480e      	ldr	r0, [pc, #56]	; (8001000 <HAL_TIM_MspPostInit+0xcc>)
 8000fc6:	f001 f9df 	bl	8002388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_H_Pin|V_H_Pin|W_H_Pin;
 8000fca:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fdc:	2306      	movs	r3, #6
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fea:	f001 f9cd 	bl	8002388 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40012c00 	.word	0x40012c00
 8000ffc:	40021000 	.word	0x40021000
 8001000:	48000400 	.word	0x48000400

08001004 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_USART1_UART_Init+0x58>)
 800100a:	4a15      	ldr	r2, [pc, #84]	; (8001060 <MX_USART1_UART_Init+0x5c>)
 800100c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_USART1_UART_Init+0x58>)
 8001010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001014:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_USART1_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_USART1_UART_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_USART1_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_USART1_UART_Init+0x58>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_USART1_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_USART1_UART_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_USART1_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_USART1_UART_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_USART1_UART_Init+0x58>)
 8001048:	f004 fb8a 	bl	8005760 <HAL_UART_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001052:	f7ff fd59 	bl	8000b08 <Error_Handler>
  }

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000264 	.word	0x20000264
 8001060:	40013800 	.word	0x40013800

08001064 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <HAL_UART_MspInit+0x7c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d127      	bne.n	80010d6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_UART_MspInit+0x80>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <HAL_UART_MspInit+0x80>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6193      	str	r3, [r2, #24]
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_UART_MspInit+0x80>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_UART_MspInit+0x80>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <HAL_UART_MspInit+0x80>)
 80010a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a8:	6153      	str	r3, [r2, #20]
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_UART_MspInit+0x80>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = MULTI2_TX_Pin|MULTI3_RX_Pin;
 80010b6:	23c0      	movs	r3, #192	; 0xc0
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010c6:	2307      	movs	r3, #7
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <HAL_UART_MspInit+0x84>)
 80010d2:	f001 f959 	bl	8002388 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40013800 	.word	0x40013800
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48000400 	.word	0x48000400

080010ec <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

  hpcd_USB_FS.Instance = USB;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <MX_USB_PCD_Init+0x3c>)
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <MX_USB_PCD_Init+0x40>)
 80010f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_USB_PCD_Init+0x3c>)
 80010f8:	2208      	movs	r2, #8
 80010fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <MX_USB_PCD_Init+0x3c>)
 80010fe:	2202      	movs	r2, #2
 8001100:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_USB_PCD_Init+0x3c>)
 8001104:	2202      	movs	r2, #2
 8001106:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <MX_USB_PCD_Init+0x3c>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_USB_PCD_Init+0x3c>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_USB_PCD_Init+0x3c>)
 8001116:	f001 fae3 	bl	80026e0 <HAL_PCD_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001120:	f7ff fcf2 	bl	8000b08 <Error_Handler>
  }

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200002e8 	.word	0x200002e8
 800112c:	40005c00 	.word	0x40005c00

08001130 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a18      	ldr	r2, [pc, #96]	; (80011b0 <HAL_PCD_MspInit+0x80>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d129      	bne.n	80011a6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_PCD_MspInit+0x84>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <HAL_PCD_MspInit+0x84>)
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	6153      	str	r3, [r2, #20]
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_PCD_MspInit+0x84>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800116a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800117c:	230e      	movs	r3, #14
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118a:	f001 f8fd 	bl	8002388 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_PCD_MspInit+0x84>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <HAL_PCD_MspInit+0x84>)
 8001194:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001198:	61d3      	str	r3, [r2, #28]
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_PCD_MspInit+0x84>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	; 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40005c00 	.word	0x40005c00
 80011b4:	40021000 	.word	0x40021000

080011b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011be:	490e      	ldr	r1, [pc, #56]	; (80011f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c0:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <LoopForever+0xe>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d4:	4c0b      	ldr	r4, [pc, #44]	; (8001204 <LoopForever+0x16>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011e2:	f7ff fda7 	bl	8000d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e6:	f004 ff19 	bl	800601c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ea:	f7ff fb83 	bl	80008f4 <main>

080011ee <LoopForever>:

LoopForever:
    b LoopForever
 80011ee:	e7fe      	b.n	80011ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011f0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011fc:	0800693c 	.word	0x0800693c
  ldr r2, =_sbss
 8001200:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001204:	200005dc 	.word	0x200005dc

08001208 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC1_2_IRQHandler>
	...

0800120c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_Init+0x28>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_Init+0x28>)
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f001 f865 	bl	80022ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f808 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fcf6 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40022000 	.word	0x40022000

08001238 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x54>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x58>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f001 f87d 	bl	8002356 <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001274:	f001 f845 	bl	8002302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_InitTick+0x5c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000000 	.word	0x20000000
 8001290:	20000008 	.word	0x20000008
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008
 80012bc:	200005d4 	.word	0x200005d4

080012c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	200005d4 	.word	0x200005d4

080012d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_Delay+0x40>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000008 	.word	0x20000008

0800131c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b09a      	sub	sp, #104	; 0x68
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e1c9      	b.n	80016d0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	2b00      	cmp	r3, #0
 800134c:	d176      	bne.n	800143c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	2b00      	cmp	r3, #0
 8001354:	d152      	bne.n	80013fc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff f8c3 	bl	80004fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d13b      	bne.n	80013fc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 fd87 	bl	8001e98 <ADC_Disable>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	2b00      	cmp	r3, #0
 800139a:	d12f      	bne.n	80013fc <HAL_ADC_Init+0xe0>
 800139c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d12b      	bne.n	80013fc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013ac:	f023 0302 	bic.w	r3, r3, #2
 80013b0:	f043 0202 	orr.w	r2, r3, #2
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013c6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013d6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013d8:	4b86      	ldr	r3, [pc, #536]	; (80015f4 <HAL_ADC_Init+0x2d8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a86      	ldr	r2, [pc, #536]	; (80015f8 <HAL_ADC_Init+0x2dc>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	0c9a      	lsrs	r2, r3, #18
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013ee:	e002      	b.n	80013f6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f9      	bne.n	80013f0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001418:	d110      	bne.n	800143c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f023 0312 	bic.w	r3, r3, #18
 8001422:	f043 0210 	orr.w	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f043 0201 	orr.w	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	2b00      	cmp	r3, #0
 8001446:	f040 8136 	bne.w	80016b6 <HAL_ADC_Init+0x39a>
 800144a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 8131 	bne.w	80016b6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800145e:	2b00      	cmp	r3, #0
 8001460:	f040 8129 	bne.w	80016b6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800146c:	f043 0202 	orr.w	r2, r3, #2
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800147c:	d004      	beq.n	8001488 <HAL_ADC_Init+0x16c>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a5e      	ldr	r2, [pc, #376]	; (80015fc <HAL_ADC_Init+0x2e0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d101      	bne.n	800148c <HAL_ADC_Init+0x170>
 8001488:	4b5d      	ldr	r3, [pc, #372]	; (8001600 <HAL_ADC_Init+0x2e4>)
 800148a:	e000      	b.n	800148e <HAL_ADC_Init+0x172>
 800148c:	4b5d      	ldr	r3, [pc, #372]	; (8001604 <HAL_ADC_Init+0x2e8>)
 800148e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001498:	d102      	bne.n	80014a0 <HAL_ADC_Init+0x184>
 800149a:	4b58      	ldr	r3, [pc, #352]	; (80015fc <HAL_ADC_Init+0x2e0>)
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	e01a      	b.n	80014d6 <HAL_ADC_Init+0x1ba>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a55      	ldr	r2, [pc, #340]	; (80015fc <HAL_ADC_Init+0x2e0>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d103      	bne.n	80014b2 <HAL_ADC_Init+0x196>
 80014aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	e011      	b.n	80014d6 <HAL_ADC_Init+0x1ba>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a54      	ldr	r2, [pc, #336]	; (8001608 <HAL_ADC_Init+0x2ec>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d102      	bne.n	80014c2 <HAL_ADC_Init+0x1a6>
 80014bc:	4b53      	ldr	r3, [pc, #332]	; (800160c <HAL_ADC_Init+0x2f0>)
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	e009      	b.n	80014d6 <HAL_ADC_Init+0x1ba>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a51      	ldr	r2, [pc, #324]	; (800160c <HAL_ADC_Init+0x2f0>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d102      	bne.n	80014d2 <HAL_ADC_Init+0x1b6>
 80014cc:	4b4e      	ldr	r3, [pc, #312]	; (8001608 <HAL_ADC_Init+0x2ec>)
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	e001      	b.n	80014d6 <HAL_ADC_Init+0x1ba>
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d108      	bne.n	80014f6 <HAL_ADC_Init+0x1da>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_ADC_Init+0x1da>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_ADC_Init+0x1dc>
 80014f6:	2300      	movs	r3, #0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d11c      	bne.n	8001536 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014fc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d010      	beq.n	8001524 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b01      	cmp	r3, #1
 800150c:	d107      	bne.n	800151e <HAL_ADC_Init+0x202>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <HAL_ADC_Init+0x202>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_ADC_Init+0x204>
 800151e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001520:	2b00      	cmp	r3, #0
 8001522:	d108      	bne.n	8001536 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	431a      	orrs	r2, r3
 8001532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001534:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7e5b      	ldrb	r3, [r3, #25]
 800153a:	035b      	lsls	r3, r3, #13
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001540:	2a01      	cmp	r2, #1
 8001542:	d002      	beq.n	800154a <HAL_ADC_Init+0x22e>
 8001544:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001548:	e000      	b.n	800154c <HAL_ADC_Init+0x230>
 800154a:	2200      	movs	r2, #0
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4313      	orrs	r3, r2
 800155a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800155c:	4313      	orrs	r3, r2
 800155e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d11b      	bne.n	80015a2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7e5b      	ldrb	r3, [r3, #25]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d109      	bne.n	8001586 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	3b01      	subs	r3, #1
 8001578:	045a      	lsls	r2, r3, #17
 800157a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800157c:	4313      	orrs	r3, r2
 800157e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001582:	663b      	str	r3, [r7, #96]	; 0x60
 8001584:	e00d      	b.n	80015a2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800158e:	f043 0220 	orr.w	r2, r3, #32
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	f043 0201 	orr.w	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d03a      	beq.n	8001620 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a16      	ldr	r2, [pc, #88]	; (8001608 <HAL_ADC_Init+0x2ec>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d004      	beq.n	80015be <HAL_ADC_Init+0x2a2>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a14      	ldr	r2, [pc, #80]	; (800160c <HAL_ADC_Init+0x2f0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d128      	bne.n	8001610 <HAL_ADC_Init+0x2f4>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80015c6:	d012      	beq.n	80015ee <HAL_ADC_Init+0x2d2>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015d0:	d00a      	beq.n	80015e8 <HAL_ADC_Init+0x2cc>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80015da:	d002      	beq.n	80015e2 <HAL_ADC_Init+0x2c6>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	e018      	b.n	8001614 <HAL_ADC_Init+0x2f8>
 80015e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e6:	e015      	b.n	8001614 <HAL_ADC_Init+0x2f8>
 80015e8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80015ec:	e012      	b.n	8001614 <HAL_ADC_Init+0x2f8>
 80015ee:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80015f2:	e00f      	b.n	8001614 <HAL_ADC_Init+0x2f8>
 80015f4:	20000000 	.word	0x20000000
 80015f8:	431bde83 	.word	0x431bde83
 80015fc:	50000100 	.word	0x50000100
 8001600:	50000300 	.word	0x50000300
 8001604:	50000700 	.word	0x50000700
 8001608:	50000400 	.word	0x50000400
 800160c:	50000500 	.word	0x50000500
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001618:	4313      	orrs	r3, r2
 800161a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800161c:	4313      	orrs	r3, r2
 800161e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b00      	cmp	r3, #0
 800162c:	d114      	bne.n	8001658 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800163c:	f023 0302 	bic.w	r3, r3, #2
 8001640:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7e1b      	ldrb	r3, [r3, #24]
 8001646:	039a      	lsls	r2, r3, #14
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4313      	orrs	r3, r2
 8001652:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001654:	4313      	orrs	r3, r2
 8001656:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_ADC_Init+0x3bc>)
 8001660:	4013      	ands	r3, r2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6812      	ldr	r2, [r2, #0]
 8001666:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001668:	430b      	orrs	r3, r1
 800166a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d10c      	bne.n	800168e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f023 010f 	bic.w	r1, r3, #15
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	1e5a      	subs	r2, r3, #1
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	631a      	str	r2, [r3, #48]	; 0x30
 800168c:	e007      	b.n	800169e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 020f 	bic.w	r2, r2, #15
 800169c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f023 0303 	bic.w	r3, r3, #3
 80016ac:	f043 0201 	orr.w	r2, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40
 80016b4:	e00a      	b.n	80016cc <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f023 0312 	bic.w	r3, r3, #18
 80016be:	f043 0210 	orr.w	r2, r3, #16
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80016c6:	2301      	movs	r3, #1
 80016c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80016cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3768      	adds	r7, #104	; 0x68
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	fff0c007 	.word	0xfff0c007

080016dc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016dc:	b480      	push	{r7}
 80016de:	b09b      	sub	sp, #108	; 0x6c
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x22>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e2cb      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x5ba>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	f040 82af 	bne.w	8001c74 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b04      	cmp	r3, #4
 800171c:	d81c      	bhi.n	8001758 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	461a      	mov	r2, r3
 8001732:	231f      	movs	r3, #31
 8001734:	4093      	lsls	r3, r2
 8001736:	43db      	mvns	r3, r3
 8001738:	4019      	ands	r1, r3
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fa00 f203 	lsl.w	r2, r0, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
 8001756:	e063      	b.n	8001820 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b09      	cmp	r3, #9
 800175e:	d81e      	bhi.n	800179e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	3b1e      	subs	r3, #30
 8001774:	221f      	movs	r2, #31
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	4019      	ands	r1, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	3b1e      	subs	r3, #30
 8001790:	fa00 f203 	lsl.w	r2, r0, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	635a      	str	r2, [r3, #52]	; 0x34
 800179c:	e040      	b.n	8001820 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b0e      	cmp	r3, #14
 80017a4:	d81e      	bhi.n	80017e4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	3b3c      	subs	r3, #60	; 0x3c
 80017ba:	221f      	movs	r2, #31
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4019      	ands	r1, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	3b3c      	subs	r3, #60	; 0x3c
 80017d6:	fa00 f203 	lsl.w	r2, r0, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	639a      	str	r2, [r3, #56]	; 0x38
 80017e2:	e01d      	b.n	8001820 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	3b5a      	subs	r3, #90	; 0x5a
 80017f8:	221f      	movs	r2, #31
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	4019      	ands	r1, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6818      	ldr	r0, [r3, #0]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	3b5a      	subs	r3, #90	; 0x5a
 8001814:	fa00 f203 	lsl.w	r2, r0, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 80e5 	bne.w	80019fa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b09      	cmp	r3, #9
 8001836:	d91c      	bls.n	8001872 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6999      	ldr	r1, [r3, #24]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	3b1e      	subs	r3, #30
 800184a:	2207      	movs	r2, #7
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	4019      	ands	r1, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6898      	ldr	r0, [r3, #8]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	3b1e      	subs	r3, #30
 8001864:	fa00 f203 	lsl.w	r2, r0, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	619a      	str	r2, [r3, #24]
 8001870:	e019      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6959      	ldr	r1, [r3, #20]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4613      	mov	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	2207      	movs	r2, #7
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	4019      	ands	r1, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6898      	ldr	r0, [r3, #8]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	fa00 f203 	lsl.w	r2, r0, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	695a      	ldr	r2, [r3, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d84f      	bhi.n	8001968 <HAL_ADC_ConfigChannel+0x28c>
 80018c8:	a201      	add	r2, pc, #4	; (adr r2, 80018d0 <HAL_ADC_ConfigChannel+0x1f4>)
 80018ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ce:	bf00      	nop
 80018d0:	080018e1 	.word	0x080018e1
 80018d4:	08001903 	.word	0x08001903
 80018d8:	08001925 	.word	0x08001925
 80018dc:	08001947 	.word	0x08001947
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018e6:	4b9f      	ldr	r3, [pc, #636]	; (8001b64 <HAL_ADC_ConfigChannel+0x488>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	0691      	lsls	r1, r2, #26
 80018f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018f2:	430a      	orrs	r2, r1
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018fe:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001900:	e07e      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001908:	4b96      	ldr	r3, [pc, #600]	; (8001b64 <HAL_ADC_ConfigChannel+0x488>)
 800190a:	4013      	ands	r3, r2
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	0691      	lsls	r1, r2, #26
 8001912:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001914:	430a      	orrs	r2, r1
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001920:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001922:	e06d      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800192a:	4b8e      	ldr	r3, [pc, #568]	; (8001b64 <HAL_ADC_ConfigChannel+0x488>)
 800192c:	4013      	ands	r3, r2
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	6812      	ldr	r2, [r2, #0]
 8001932:	0691      	lsls	r1, r2, #26
 8001934:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001936:	430a      	orrs	r2, r1
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001942:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001944:	e05c      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800194c:	4b85      	ldr	r3, [pc, #532]	; (8001b64 <HAL_ADC_ConfigChannel+0x488>)
 800194e:	4013      	ands	r3, r2
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	0691      	lsls	r1, r2, #26
 8001956:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001958:	430a      	orrs	r2, r1
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001964:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001966:	e04b      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	069b      	lsls	r3, r3, #26
 8001978:	429a      	cmp	r2, r3
 800197a:	d107      	bne.n	800198c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800198a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001992:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	069b      	lsls	r3, r3, #26
 800199c:	429a      	cmp	r2, r3
 800199e:	d107      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019ae:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	069b      	lsls	r3, r3, #26
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d107      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019d2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	069b      	lsls	r3, r3, #26
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d10a      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019f6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80019f8:	e001      	b.n	80019fe <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80019fa:	bf00      	nop
 80019fc:	e000      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x324>
      break;
 80019fe:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d108      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x344>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x344>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x346>
 8001a20:	2300      	movs	r3, #0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 8131 	bne.w	8001c8a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d00f      	beq.n	8001a50 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	400a      	ands	r2, r1
 8001a4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a4e:	e049      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b09      	cmp	r3, #9
 8001a70:	d91c      	bls.n	8001aac <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6999      	ldr	r1, [r3, #24]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	3b1b      	subs	r3, #27
 8001a84:	2207      	movs	r2, #7
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	4019      	ands	r1, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6898      	ldr	r0, [r3, #8]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3b1b      	subs	r3, #27
 8001a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	619a      	str	r2, [r3, #24]
 8001aaa:	e01b      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6959      	ldr	r1, [r3, #20]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	2207      	movs	r2, #7
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	4019      	ands	r1, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6898      	ldr	r0, [r3, #8]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aec:	d004      	beq.n	8001af8 <HAL_ADC_ConfigChannel+0x41c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_ADC_ConfigChannel+0x48c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d101      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x420>
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <HAL_ADC_ConfigChannel+0x490>)
 8001afa:	e000      	b.n	8001afe <HAL_ADC_ConfigChannel+0x422>
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <HAL_ADC_ConfigChannel+0x494>)
 8001afe:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b10      	cmp	r3, #16
 8001b06:	d105      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d015      	beq.n	8001b40 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b18:	2b11      	cmp	r3, #17
 8001b1a:	d105      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00b      	beq.n	8001b40 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b2c:	2b12      	cmp	r3, #18
 8001b2e:	f040 80ac 	bne.w	8001c8a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 80a5 	bne.w	8001c8a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b48:	d102      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x474>
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_ADC_ConfigChannel+0x48c>)
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	e023      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x4bc>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_ADC_ConfigChannel+0x48c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10c      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x498>
 8001b5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	e01a      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x4bc>
 8001b62:	bf00      	nop
 8001b64:	83fff000 	.word	0x83fff000
 8001b68:	50000100 	.word	0x50000100
 8001b6c:	50000300 	.word	0x50000300
 8001b70:	50000700 	.word	0x50000700
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a4a      	ldr	r2, [pc, #296]	; (8001ca4 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d102      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x4a8>
 8001b7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ca8 <HAL_ADC_ConfigChannel+0x5cc>)
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	e009      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x4bc>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a47      	ldr	r2, [pc, #284]	; (8001ca8 <HAL_ADC_ConfigChannel+0x5cc>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d102      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x4b8>
 8001b8e:	4b45      	ldr	r3, [pc, #276]	; (8001ca4 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	e001      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x4bc>
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d108      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x4dc>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x4dc>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_ADC_ConfigChannel+0x4de>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d150      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bbe:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d010      	beq.n	8001be6 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d107      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x504>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x504>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x506>
 8001be0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d13c      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b10      	cmp	r3, #16
 8001bec:	d11d      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x54e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bf6:	d118      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c02:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c04:	4b29      	ldr	r3, [pc, #164]	; (8001cac <HAL_ADC_ConfigChannel+0x5d0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a29      	ldr	r2, [pc, #164]	; (8001cb0 <HAL_ADC_ConfigChannel+0x5d4>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	0c9a      	lsrs	r2, r3, #18
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c1a:	e002      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f9      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c28:	e02e      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b11      	cmp	r3, #17
 8001c30:	d10b      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x56e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c3a:	d106      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c46:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c48:	e01e      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b12      	cmp	r3, #18
 8001c50:	d11a      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c5c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c5e:	e013      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f043 0220 	orr.w	r2, r3, #32
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c72:	e00a      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f043 0220 	orr.w	r2, r3, #32
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c86:	e000      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c88:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	376c      	adds	r7, #108	; 0x6c
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	50000400 	.word	0x50000400
 8001ca8:	50000500 	.word	0x50000500
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	431bde83 	.word	0x431bde83

08001cb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b099      	sub	sp, #100	; 0x64
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ccc:	d102      	bne.n	8001cd4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001cce:	4b6d      	ldr	r3, [pc, #436]	; (8001e84 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	e01a      	b.n	8001d0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a6a      	ldr	r2, [pc, #424]	; (8001e84 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d103      	bne.n	8001ce6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001cde:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	e011      	b.n	8001d0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a67      	ldr	r2, [pc, #412]	; (8001e88 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d102      	bne.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001cf0:	4b66      	ldr	r3, [pc, #408]	; (8001e8c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	e009      	b.n	8001d0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a64      	ldr	r2, [pc, #400]	; (8001e8c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d102      	bne.n	8001d06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001d00:	4b61      	ldr	r3, [pc, #388]	; (8001e88 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	e001      	b.n	8001d0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0b0      	b.n	8001e76 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e0a9      	b.n	8001e76 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f040 808d 	bne.w	8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 8086 	bne.w	8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d50:	d004      	beq.n	8001d5c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a4b      	ldr	r2, [pc, #300]	; (8001e84 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001d5c:	4b4c      	ldr	r3, [pc, #304]	; (8001e90 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001d5e:	e000      	b.n	8001d62 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001d60:	4b4c      	ldr	r3, [pc, #304]	; (8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001d62:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d040      	beq.n	8001dee <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	6859      	ldr	r1, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d7e:	035b      	lsls	r3, r3, #13
 8001d80:	430b      	orrs	r3, r1
 8001d82:	431a      	orrs	r2, r3
 8001d84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d86:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d108      	bne.n	8001da8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001da8:	2300      	movs	r3, #0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d15c      	bne.n	8001e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d107      	bne.n	8001dca <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001dca:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d14b      	bne.n	8001e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001dd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001dd8:	f023 030f 	bic.w	r3, r3, #15
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	6811      	ldr	r1, [r2, #0]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	6892      	ldr	r2, [r2, #8]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	431a      	orrs	r2, r3
 8001de8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dea:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001dec:	e03c      	b.n	8001e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001df8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d108      	bne.n	8001e1a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d123      	bne.n	8001e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d107      	bne.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001e3c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d112      	bne.n	8001e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e4a:	f023 030f 	bic.w	r3, r3, #15
 8001e4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e50:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e52:	e009      	b.n	8001e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f043 0220 	orr.w	r2, r3, #32
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001e66:	e000      	b.n	8001e6a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e68:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001e76:	4618      	mov	r0, r3
 8001e78:	3764      	adds	r7, #100	; 0x64
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	50000100 	.word	0x50000100
 8001e88:	50000400 	.word	0x50000400
 8001e8c:	50000500 	.word	0x50000500
 8001e90:	50000300 	.word	0x50000300
 8001e94:	50000700 	.word	0x50000700

08001e98 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d108      	bne.n	8001ec4 <ADC_Disable+0x2c>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <ADC_Disable+0x2c>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <ADC_Disable+0x2e>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d040      	beq.n	8001f4c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 030d 	and.w	r3, r3, #13
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d10f      	bne.n	8001ef8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0202 	orr.w	r2, r2, #2
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2203      	movs	r2, #3
 8001eee:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ef0:	f7ff f9e6 	bl	80012c0 <HAL_GetTick>
 8001ef4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ef6:	e022      	b.n	8001f3e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f043 0210 	orr.w	r2, r3, #16
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e01c      	b.n	8001f4e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f14:	f7ff f9d4 	bl	80012c0 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d90d      	bls.n	8001f3e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f043 0210 	orr.w	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f043 0201 	orr.w	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e007      	b.n	8001f4e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d0e3      	beq.n	8001f14 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0ed      	b.n	8002144 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7fe fbd1 	bl	800071c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0202 	bic.w	r2, r2, #2
 8001f88:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f8a:	f7ff f999 	bl	80012c0 <HAL_GetTick>
 8001f8e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f90:	e012      	b.n	8001fb8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f92:	f7ff f995 	bl	80012c0 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b0a      	cmp	r3, #10
 8001f9e:	d90b      	bls.n	8001fb8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2205      	movs	r2, #5
 8001fb0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0c5      	b.n	8002144 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1e5      	bne.n	8001f92 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fd6:	f7ff f973 	bl	80012c0 <HAL_GetTick>
 8001fda:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fdc:	e012      	b.n	8002004 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fde:	f7ff f96f 	bl	80012c0 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b0a      	cmp	r3, #10
 8001fea:	d90b      	bls.n	8002004 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2205      	movs	r2, #5
 8001ffc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e09f      	b.n	8002144 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0e5      	beq.n	8001fde <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7e1b      	ldrb	r3, [r3, #24]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d108      	bne.n	800202c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e007      	b.n	800203c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800203a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7e5b      	ldrb	r3, [r3, #25]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d108      	bne.n	8002056 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	e007      	b.n	8002066 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002064:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	7e9b      	ldrb	r3, [r3, #26]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d108      	bne.n	8002080 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0220 	orr.w	r2, r2, #32
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e007      	b.n	8002090 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0220 	bic.w	r2, r2, #32
 800208e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7edb      	ldrb	r3, [r3, #27]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d108      	bne.n	80020aa <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0210 	bic.w	r2, r2, #16
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e007      	b.n	80020ba <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0210 	orr.w	r2, r2, #16
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7f1b      	ldrb	r3, [r3, #28]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d108      	bne.n	80020d4 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 0208 	orr.w	r2, r2, #8
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e007      	b.n	80020e4 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0208 	bic.w	r2, r2, #8
 80020e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7f5b      	ldrb	r3, [r3, #29]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d108      	bne.n	80020fe <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0204 	orr.w	r2, r2, #4
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e007      	b.n	800210e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0204 	bic.w	r2, r2, #4
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	ea42 0103 	orr.w	r1, r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	1e5a      	subs	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217e:	4a04      	ldr	r2, [pc, #16]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	60d3      	str	r3, [r2, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <__NVIC_GetPriorityGrouping+0x18>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	f003 0307 	and.w	r3, r3, #7
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	db0b      	blt.n	80021da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	4907      	ldr	r1, [pc, #28]	; (80021e8 <__NVIC_EnableIRQ+0x38>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2001      	movs	r0, #1
 80021d2:	fa00 f202 	lsl.w	r2, r0, r2
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000e100 	.word	0xe000e100

080021ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db0a      	blt.n	8002216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	490c      	ldr	r1, [pc, #48]	; (8002238 <__NVIC_SetPriority+0x4c>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	0112      	lsls	r2, r2, #4
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	440b      	add	r3, r1
 8002210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002214:	e00a      	b.n	800222c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4908      	ldr	r1, [pc, #32]	; (800223c <__NVIC_SetPriority+0x50>)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	3b04      	subs	r3, #4
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	440b      	add	r3, r1
 800222a:	761a      	strb	r2, [r3, #24]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000e100 	.word	0xe000e100
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	; 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f1c3 0307 	rsb	r3, r3, #7
 800225a:	2b04      	cmp	r3, #4
 800225c:	bf28      	it	cs
 800225e:	2304      	movcs	r3, #4
 8002260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3304      	adds	r3, #4
 8002266:	2b06      	cmp	r3, #6
 8002268:	d902      	bls.n	8002270 <NVIC_EncodePriority+0x30>
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3b03      	subs	r3, #3
 800226e:	e000      	b.n	8002272 <NVIC_EncodePriority+0x32>
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	401a      	ands	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	43d9      	mvns	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	4313      	orrs	r3, r2
         );
}
 800229a:	4618      	mov	r0, r3
 800229c:	3724      	adds	r7, #36	; 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b8:	d301      	bcc.n	80022be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00f      	b.n	80022de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <SysTick_Config+0x40>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c6:	210f      	movs	r1, #15
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022cc:	f7ff ff8e 	bl	80021ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <SysTick_Config+0x40>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <SysTick_Config+0x40>)
 80022d8:	2207      	movs	r2, #7
 80022da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	e000e010 	.word	0xe000e010

080022ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff29 	bl	800214c <__NVIC_SetPriorityGrouping>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002314:	f7ff ff3e 	bl	8002194 <__NVIC_GetPriorityGrouping>
 8002318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	6978      	ldr	r0, [r7, #20]
 8002320:	f7ff ff8e 	bl	8002240 <NVIC_EncodePriority>
 8002324:	4602      	mov	r2, r0
 8002326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff5d 	bl	80021ec <__NVIC_SetPriority>
}
 8002332:	bf00      	nop
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff31 	bl	80021b0 <__NVIC_EnableIRQ>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ffa2 	bl	80022a8 <SysTick_Config>
 8002364:	4603      	mov	r3, r0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002372:	f000 f802 	bl	800237a <HAL_SYSTICK_Callback>
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002396:	e154      	b.n	8002642 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2101      	movs	r1, #1
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	fa01 f303 	lsl.w	r3, r1, r3
 80023a4:	4013      	ands	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8146 	beq.w	800263c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d00b      	beq.n	80023d0 <HAL_GPIO_Init+0x48>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d007      	beq.n	80023d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023c4:	2b11      	cmp	r3, #17
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b12      	cmp	r3, #18
 80023ce:	d130      	bne.n	8002432 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002406:	2201      	movs	r2, #1
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	f003 0201 	and.w	r2, r3, #1
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0xea>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b12      	cmp	r3, #18
 8002470:	d123      	bne.n	80024ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	08da      	lsrs	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3208      	adds	r2, #8
 800247a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	220f      	movs	r2, #15
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	08da      	lsrs	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3208      	adds	r2, #8
 80024b4:	6939      	ldr	r1, [r7, #16]
 80024b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	2203      	movs	r2, #3
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0203 	and.w	r2, r3, #3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80a0 	beq.w	800263c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fc:	4b58      	ldr	r3, [pc, #352]	; (8002660 <HAL_GPIO_Init+0x2d8>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4a57      	ldr	r2, [pc, #348]	; (8002660 <HAL_GPIO_Init+0x2d8>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6193      	str	r3, [r2, #24]
 8002508:	4b55      	ldr	r3, [pc, #340]	; (8002660 <HAL_GPIO_Init+0x2d8>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002514:	4a53      	ldr	r2, [pc, #332]	; (8002664 <HAL_GPIO_Init+0x2dc>)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	089b      	lsrs	r3, r3, #2
 800251a:	3302      	adds	r3, #2
 800251c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002520:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	220f      	movs	r2, #15
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800253e:	d019      	beq.n	8002574 <HAL_GPIO_Init+0x1ec>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a49      	ldr	r2, [pc, #292]	; (8002668 <HAL_GPIO_Init+0x2e0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d013      	beq.n	8002570 <HAL_GPIO_Init+0x1e8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a48      	ldr	r2, [pc, #288]	; (800266c <HAL_GPIO_Init+0x2e4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d00d      	beq.n	800256c <HAL_GPIO_Init+0x1e4>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a47      	ldr	r2, [pc, #284]	; (8002670 <HAL_GPIO_Init+0x2e8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d007      	beq.n	8002568 <HAL_GPIO_Init+0x1e0>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a46      	ldr	r2, [pc, #280]	; (8002674 <HAL_GPIO_Init+0x2ec>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d101      	bne.n	8002564 <HAL_GPIO_Init+0x1dc>
 8002560:	2304      	movs	r3, #4
 8002562:	e008      	b.n	8002576 <HAL_GPIO_Init+0x1ee>
 8002564:	2305      	movs	r3, #5
 8002566:	e006      	b.n	8002576 <HAL_GPIO_Init+0x1ee>
 8002568:	2303      	movs	r3, #3
 800256a:	e004      	b.n	8002576 <HAL_GPIO_Init+0x1ee>
 800256c:	2302      	movs	r3, #2
 800256e:	e002      	b.n	8002576 <HAL_GPIO_Init+0x1ee>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <HAL_GPIO_Init+0x1ee>
 8002574:	2300      	movs	r3, #0
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	f002 0203 	and.w	r2, r2, #3
 800257c:	0092      	lsls	r2, r2, #2
 800257e:	4093      	lsls	r3, r2
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002586:	4937      	ldr	r1, [pc, #220]	; (8002664 <HAL_GPIO_Init+0x2dc>)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002594:	4b38      	ldr	r3, [pc, #224]	; (8002678 <HAL_GPIO_Init+0x2f0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025b8:	4a2f      	ldr	r2, [pc, #188]	; (8002678 <HAL_GPIO_Init+0x2f0>)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025be:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <HAL_GPIO_Init+0x2f0>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025e2:	4a25      	ldr	r2, [pc, #148]	; (8002678 <HAL_GPIO_Init+0x2f0>)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025e8:	4b23      	ldr	r3, [pc, #140]	; (8002678 <HAL_GPIO_Init+0x2f0>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800260c:	4a1a      	ldr	r2, [pc, #104]	; (8002678 <HAL_GPIO_Init+0x2f0>)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002612:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_GPIO_Init+0x2f0>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	43db      	mvns	r3, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002636:	4a10      	ldr	r2, [pc, #64]	; (8002678 <HAL_GPIO_Init+0x2f0>)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3301      	adds	r3, #1
 8002640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	f47f aea3 	bne.w	8002398 <HAL_GPIO_Init+0x10>
  }
}
 8002652:	bf00      	nop
 8002654:	371c      	adds	r7, #28
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	40010000 	.word	0x40010000
 8002668:	48000400 	.word	0x48000400
 800266c:	48000800 	.word	0x48000800
 8002670:	48000c00 	.word	0x48000c00
 8002674:	48001000 	.word	0x48001000
 8002678:	40010400 	.word	0x40010400

0800267c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
 8002688:	4613      	mov	r3, r2
 800268a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800268c:	787b      	ldrb	r3, [r7, #1]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002698:	e002      	b.n	80026a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	041a      	lsls	r2, r3, #16
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	43d9      	mvns	r1, r3
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	400b      	ands	r3, r1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	619a      	str	r2, [r3, #24]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e2:	b08b      	sub	sp, #44	; 0x2c
 80026e4:	af06      	add	r7, sp, #24
 80026e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e0d0      	b.n	8002894 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe fd12 	bl	8001130 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2203      	movs	r2, #3
 8002710:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fc3c 	bl	8005f96 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]
 8002722:	e04c      	b.n	80027be <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	3301      	adds	r3, #1
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	b298      	uxth	r0, r3
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	440b      	add	r3, r1
 8002760:	3336      	adds	r3, #54	; 0x36
 8002762:	4602      	mov	r2, r0
 8002764:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	440b      	add	r3, r1
 8002776:	3303      	adds	r3, #3
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	440b      	add	r3, r1
 800278a:	3338      	adds	r3, #56	; 0x38
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	440b      	add	r3, r1
 800279e:	333c      	adds	r3, #60	; 0x3c
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027a4:	7bfa      	ldrb	r2, [r7, #15]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	440b      	add	r3, r1
 80027b2:	3340      	adds	r3, #64	; 0x40
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	3301      	adds	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d3ad      	bcc.n	8002724 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]
 80027cc:	e044      	b.n	8002858 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	440b      	add	r3, r1
 8002808:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800283c:	7bfa      	ldrb	r2, [r7, #15]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	3301      	adds	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
 8002858:	7bfa      	ldrb	r2, [r7, #15]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	429a      	cmp	r2, r3
 8002860:	d3b5      	bcc.n	80027ce <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	687e      	ldr	r6, [r7, #4]
 800286a:	466d      	mov	r5, sp
 800286c:	f106 0410 	add.w	r4, r6, #16
 8002870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	602b      	str	r3, [r5, #0]
 8002878:	1d33      	adds	r3, r6, #4
 800287a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287c:	6838      	ldr	r0, [r7, #0]
 800287e:	f003 fba5 	bl	8005fcc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800289c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f000 bef4 	b.w	800369e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 816a 	beq.w	8002b9a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028c6:	4bb3      	ldr	r3, [pc, #716]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d00c      	beq.n	80028ec <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028d2:	4bb0      	ldr	r3, [pc, #704]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d159      	bne.n	8002992 <HAL_RCC_OscConfig+0xf6>
 80028de:	4bad      	ldr	r3, [pc, #692]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ea:	d152      	bne.n	8002992 <HAL_RCC_OscConfig+0xf6>
 80028ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002900:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d102      	bne.n	800291e <HAL_RCC_OscConfig+0x82>
 8002918:	4b9e      	ldr	r3, [pc, #632]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	e015      	b.n	800294a <HAL_RCC_OscConfig+0xae>
 800291e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002922:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002932:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002936:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800293a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002946:	4b93      	ldr	r3, [pc, #588]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800294e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002952:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002956:	fa92 f2a2 	rbit	r2, r2
 800295a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800295e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002962:	fab2 f282 	clz	r2, r2
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f042 0220 	orr.w	r2, r2, #32
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	f002 021f 	and.w	r2, r2, #31
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f202 	lsl.w	r2, r1, r2
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 810c 	beq.w	8002b98 <HAL_RCC_OscConfig+0x2fc>
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 8106 	bne.w	8002b98 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	f000 be86 	b.w	800369e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299c:	d106      	bne.n	80029ac <HAL_RCC_OscConfig+0x110>
 800299e:	4b7d      	ldr	r3, [pc, #500]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a7c      	ldr	r2, [pc, #496]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e030      	b.n	8002a0e <HAL_RCC_OscConfig+0x172>
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x134>
 80029b6:	4b77      	ldr	r3, [pc, #476]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a76      	ldr	r2, [pc, #472]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 80029bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b74      	ldr	r3, [pc, #464]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a73      	ldr	r2, [pc, #460]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 80029c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e01e      	b.n	8002a0e <HAL_RCC_OscConfig+0x172>
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029da:	d10c      	bne.n	80029f6 <HAL_RCC_OscConfig+0x15a>
 80029dc:	4b6d      	ldr	r3, [pc, #436]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a6c      	ldr	r2, [pc, #432]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 80029e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	4b6a      	ldr	r3, [pc, #424]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a69      	ldr	r2, [pc, #420]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 80029ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	e00b      	b.n	8002a0e <HAL_RCC_OscConfig+0x172>
 80029f6:	4b67      	ldr	r3, [pc, #412]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a66      	ldr	r2, [pc, #408]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 80029fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4b64      	ldr	r3, [pc, #400]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a63      	ldr	r2, [pc, #396]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 8002a08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a0e:	4b61      	ldr	r3, [pc, #388]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	f023 020f 	bic.w	r2, r3, #15
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	495d      	ldr	r1, [pc, #372]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d059      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fc48 	bl	80012c0 <HAL_GetTick>
 8002a30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a34:	e00a      	b.n	8002a4c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a36:	f7fe fc43 	bl	80012c0 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d902      	bls.n	8002a4c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	f000 be29 	b.w	800369e <HAL_RCC_OscConfig+0xe02>
 8002a4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a50:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002a60:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a64:	fab3 f383 	clz	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d102      	bne.n	8002a7e <HAL_RCC_OscConfig+0x1e2>
 8002a78:	4b46      	ldr	r3, [pc, #280]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	e015      	b.n	8002aaa <HAL_RCC_OscConfig+0x20e>
 8002a7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a82:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a96:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002a9a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002aa6:	4b3b      	ldr	r3, [pc, #236]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aae:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ab2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ab6:	fa92 f2a2 	rbit	r2, r2
 8002aba:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002abe:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ac2:	fab2 f282 	clz	r2, r2
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	f042 0220 	orr.w	r2, r2, #32
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	f002 021f 	and.w	r2, r2, #31
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0ab      	beq.n	8002a36 <HAL_RCC_OscConfig+0x19a>
 8002ade:	e05c      	b.n	8002b9a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fbee 	bl	80012c0 <HAL_GetTick>
 8002ae4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae8:	e00a      	b.n	8002b00 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aea:	f7fe fbe9 	bl	80012c0 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d902      	bls.n	8002b00 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	f000 bdcf 	b.w	800369e <HAL_RCC_OscConfig+0xe02>
 8002b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b04:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002b14:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b18:	fab3 f383 	clz	r3, r3
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d102      	bne.n	8002b32 <HAL_RCC_OscConfig+0x296>
 8002b2c:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	e015      	b.n	8002b5e <HAL_RCC_OscConfig+0x2c2>
 8002b32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b36:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b4e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <HAL_RCC_OscConfig+0x2f8>)
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b62:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002b66:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002b6a:	fa92 f2a2 	rbit	r2, r2
 8002b6e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002b72:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002b76:	fab2 f282 	clz	r2, r2
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	f042 0220 	orr.w	r2, r2, #32
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f002 021f 	and.w	r2, r2, #31
 8002b86:	2101      	movs	r1, #1
 8002b88:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1ab      	bne.n	8002aea <HAL_RCC_OscConfig+0x24e>
 8002b92:	e002      	b.n	8002b9a <HAL_RCC_OscConfig+0x2fe>
 8002b94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9a:	1d3b      	adds	r3, r7, #4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 816f 	beq.w	8002e88 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002baa:	4bd0      	ldr	r3, [pc, #832]	; (8002eec <HAL_RCC_OscConfig+0x650>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bb6:	4bcd      	ldr	r3, [pc, #820]	; (8002eec <HAL_RCC_OscConfig+0x650>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d16c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x400>
 8002bc2:	4bca      	ldr	r3, [pc, #808]	; (8002eec <HAL_RCC_OscConfig+0x650>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d166      	bne.n	8002c9c <HAL_RCC_OscConfig+0x400>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002be0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d102      	bne.n	8002bfe <HAL_RCC_OscConfig+0x362>
 8002bf8:	4bbc      	ldr	r3, [pc, #752]	; (8002eec <HAL_RCC_OscConfig+0x650>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	e013      	b.n	8002c26 <HAL_RCC_OscConfig+0x38a>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c10:	2302      	movs	r3, #2
 8002c12:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002c22:	4bb2      	ldr	r3, [pc, #712]	; (8002eec <HAL_RCC_OscConfig+0x650>)
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	2202      	movs	r2, #2
 8002c28:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c2c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c30:	fa92 f2a2 	rbit	r2, r2
 8002c34:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002c38:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002c3c:	fab2 f282 	clz	r2, r2
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	f042 0220 	orr.w	r2, r2, #32
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	f002 021f 	and.w	r2, r2, #31
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <HAL_RCC_OscConfig+0x3cc>
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d002      	beq.n	8002c68 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f000 bd1b 	b.w	800369e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c68:	4ba0      	ldr	r3, [pc, #640]	; (8002eec <HAL_RCC_OscConfig+0x650>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	21f8      	movs	r1, #248	; 0xf8
 8002c78:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002c80:	fa91 f1a1 	rbit	r1, r1
 8002c84:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002c88:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002c8c:	fab1 f181 	clz	r1, r1
 8002c90:	b2c9      	uxtb	r1, r1
 8002c92:	408b      	lsls	r3, r1
 8002c94:	4995      	ldr	r1, [pc, #596]	; (8002eec <HAL_RCC_OscConfig+0x650>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9a:	e0f5      	b.n	8002e88 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8085 	beq.w	8002db2 <HAL_RCC_OscConfig+0x516>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002cba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7fe faf4 	bl	80012c0 <HAL_GetTick>
 8002cd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cde:	f7fe faef 	bl	80012c0 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d902      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	f000 bcd5 	b.w	800369e <HAL_RCC_OscConfig+0xe02>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002d06:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d102      	bne.n	8002d24 <HAL_RCC_OscConfig+0x488>
 8002d1e:	4b73      	ldr	r3, [pc, #460]	; (8002eec <HAL_RCC_OscConfig+0x650>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	e013      	b.n	8002d4c <HAL_RCC_OscConfig+0x4b0>
 8002d24:	2302      	movs	r3, #2
 8002d26:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d36:	2302      	movs	r3, #2
 8002d38:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d3c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002d40:	fa93 f3a3 	rbit	r3, r3
 8002d44:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002d48:	4b68      	ldr	r3, [pc, #416]	; (8002eec <HAL_RCC_OscConfig+0x650>)
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002d52:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d56:	fa92 f2a2 	rbit	r2, r2
 8002d5a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002d5e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002d62:	fab2 f282 	clz	r2, r2
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	f042 0220 	orr.w	r2, r2, #32
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	f002 021f 	and.w	r2, r2, #31
 8002d72:	2101      	movs	r1, #1
 8002d74:	fa01 f202 	lsl.w	r2, r1, r2
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0af      	beq.n	8002cde <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7e:	4b5b      	ldr	r3, [pc, #364]	; (8002eec <HAL_RCC_OscConfig+0x650>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	21f8      	movs	r1, #248	; 0xf8
 8002d8e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002d96:	fa91 f1a1 	rbit	r1, r1
 8002d9a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002d9e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002da2:	fab1 f181 	clz	r1, r1
 8002da6:	b2c9      	uxtb	r1, r1
 8002da8:	408b      	lsls	r3, r1
 8002daa:	4950      	ldr	r1, [pc, #320]	; (8002eec <HAL_RCC_OscConfig+0x650>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]
 8002db0:	e06a      	b.n	8002e88 <HAL_RCC_OscConfig+0x5ec>
 8002db2:	2301      	movs	r3, #1
 8002db4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002dbc:	fa93 f3a3 	rbit	r3, r3
 8002dc0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002dc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2300      	movs	r3, #0
 8002ddc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7fe fa6f 	bl	80012c0 <HAL_GetTick>
 8002de2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de8:	f7fe fa6a 	bl	80012c0 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d902      	bls.n	8002dfe <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	f000 bc50 	b.w	800369e <HAL_RCC_OscConfig+0xe02>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d102      	bne.n	8002e2e <HAL_RCC_OscConfig+0x592>
 8002e28:	4b30      	ldr	r3, [pc, #192]	; (8002eec <HAL_RCC_OscConfig+0x650>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	e013      	b.n	8002e56 <HAL_RCC_OscConfig+0x5ba>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e40:	2302      	movs	r3, #2
 8002e42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e46:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002e52:	4b26      	ldr	r3, [pc, #152]	; (8002eec <HAL_RCC_OscConfig+0x650>)
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	2202      	movs	r2, #2
 8002e58:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002e5c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002e60:	fa92 f2a2 	rbit	r2, r2
 8002e64:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002e68:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002e6c:	fab2 f282 	clz	r2, r2
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	f042 0220 	orr.w	r2, r2, #32
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	f002 021f 	and.w	r2, r2, #31
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1af      	bne.n	8002de8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80da 	beq.w	800304c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e98:	1d3b      	adds	r3, r7, #4
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d069      	beq.n	8002f76 <HAL_RCC_OscConfig+0x6da>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb8:	fab3 f383 	clz	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_OscConfig+0x654>)
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2301      	movs	r3, #1
 8002eca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ecc:	f7fe f9f8 	bl	80012c0 <HAL_GetTick>
 8002ed0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed4:	e00e      	b.n	8002ef4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed6:	f7fe f9f3 	bl	80012c0 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d906      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e3d9      	b.n	800369e <HAL_RCC_OscConfig+0xe02>
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	10908120 	.word	0x10908120
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f06:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fa93 f2a3 	rbit	r2, r3
 8002f18:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f22:	2202      	movs	r2, #2
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	fa93 f2a3 	rbit	r2, r3
 8002f30:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002f34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	4ba5      	ldr	r3, [pc, #660]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 8002f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f3a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002f3e:	2102      	movs	r1, #2
 8002f40:	6019      	str	r1, [r3, #0]
 8002f42:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	fa93 f1a3 	rbit	r1, r3
 8002f4c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002f50:	6019      	str	r1, [r3, #0]
  return result;
 8002f52:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	2101      	movs	r1, #1
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0b0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x63a>
 8002f74:	e06a      	b.n	800304c <HAL_RCC_OscConfig+0x7b0>
 8002f76:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	fa93 f2a3 	rbit	r2, r3
 8002f88:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002f8c:	601a      	str	r2, [r3, #0]
  return result;
 8002f8e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002f92:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4b8c      	ldr	r3, [pc, #560]	; (80031d0 <HAL_RCC_OscConfig+0x934>)
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa8:	f7fe f98a 	bl	80012c0 <HAL_GetTick>
 8002fac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb0:	e009      	b.n	8002fc6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb2:	f7fe f985 	bl	80012c0 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e36b      	b.n	800369e <HAL_RCC_OscConfig+0xe02>
 8002fc6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002fca:	2202      	movs	r2, #2
 8002fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f2a3 	rbit	r2, r3
 8002fd8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	fa93 f2a3 	rbit	r2, r3
 8002ff0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	fa93 f2a3 	rbit	r2, r3
 8003008:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800300c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800300e:	4b6f      	ldr	r3, [pc, #444]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 8003010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003012:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003016:	2102      	movs	r1, #2
 8003018:	6019      	str	r1, [r3, #0]
 800301a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	fa93 f1a3 	rbit	r1, r3
 8003024:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003028:	6019      	str	r1, [r3, #0]
  return result;
 800302a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	2101      	movs	r1, #1
 8003042:	fa01 f303 	lsl.w	r3, r1, r3
 8003046:	4013      	ands	r3, r2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1b2      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8158 	beq.w	800330c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305c:	2300      	movs	r3, #0
 800305e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003062:	4b5a      	ldr	r3, [pc, #360]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d112      	bne.n	8003094 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	4b57      	ldr	r3, [pc, #348]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	4a56      	ldr	r2, [pc, #344]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 8003074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003078:	61d3      	str	r3, [r2, #28]
 800307a:	4b54      	ldr	r3, [pc, #336]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003082:	f107 0308 	add.w	r3, r7, #8
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	f107 0308 	add.w	r3, r7, #8
 800308c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003094:	4b4f      	ldr	r3, [pc, #316]	; (80031d4 <HAL_RCC_OscConfig+0x938>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d11a      	bne.n	80030d6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030a0:	4b4c      	ldr	r3, [pc, #304]	; (80031d4 <HAL_RCC_OscConfig+0x938>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a4b      	ldr	r2, [pc, #300]	; (80031d4 <HAL_RCC_OscConfig+0x938>)
 80030a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030aa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ac:	f7fe f908 	bl	80012c0 <HAL_GetTick>
 80030b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b4:	e009      	b.n	80030ca <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b6:	f7fe f903 	bl	80012c0 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	; 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e2e9      	b.n	800369e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	4b42      	ldr	r3, [pc, #264]	; (80031d4 <HAL_RCC_OscConfig+0x938>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0ef      	beq.n	80030b6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d106      	bne.n	80030ee <HAL_RCC_OscConfig+0x852>
 80030e0:	4b3a      	ldr	r3, [pc, #232]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	4a39      	ldr	r2, [pc, #228]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	6213      	str	r3, [r2, #32]
 80030ec:	e02f      	b.n	800314e <HAL_RCC_OscConfig+0x8b2>
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10c      	bne.n	8003112 <HAL_RCC_OscConfig+0x876>
 80030f8:	4b34      	ldr	r3, [pc, #208]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4a33      	ldr	r2, [pc, #204]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 80030fe:	f023 0301 	bic.w	r3, r3, #1
 8003102:	6213      	str	r3, [r2, #32]
 8003104:	4b31      	ldr	r3, [pc, #196]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4a30      	ldr	r2, [pc, #192]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 800310a:	f023 0304 	bic.w	r3, r3, #4
 800310e:	6213      	str	r3, [r2, #32]
 8003110:	e01d      	b.n	800314e <HAL_RCC_OscConfig+0x8b2>
 8003112:	1d3b      	adds	r3, r7, #4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b05      	cmp	r3, #5
 800311a:	d10c      	bne.n	8003136 <HAL_RCC_OscConfig+0x89a>
 800311c:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 8003122:	f043 0304 	orr.w	r3, r3, #4
 8003126:	6213      	str	r3, [r2, #32]
 8003128:	4b28      	ldr	r3, [pc, #160]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	4a27      	ldr	r2, [pc, #156]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6213      	str	r3, [r2, #32]
 8003134:	e00b      	b.n	800314e <HAL_RCC_OscConfig+0x8b2>
 8003136:	4b25      	ldr	r3, [pc, #148]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	4a24      	ldr	r2, [pc, #144]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 800313c:	f023 0301 	bic.w	r3, r3, #1
 8003140:	6213      	str	r3, [r2, #32]
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4a21      	ldr	r2, [pc, #132]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 8003148:	f023 0304 	bic.w	r3, r3, #4
 800314c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d06b      	beq.n	8003230 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003158:	f7fe f8b2 	bl	80012c0 <HAL_GetTick>
 800315c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003160:	e00b      	b.n	800317a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fe f8ad 	bl	80012c0 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e291      	b.n	800369e <HAL_RCC_OscConfig+0xe02>
 800317a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800317e:	2202      	movs	r2, #2
 8003180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	fa93 f2a3 	rbit	r2, r3
 800318c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003196:	2202      	movs	r2, #2
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	fa93 f2a3 	rbit	r2, r3
 80031a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80031a8:	601a      	str	r2, [r3, #0]
  return result;
 80031aa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80031ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	fab3 f383 	clz	r3, r3
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	f043 0302 	orr.w	r3, r3, #2
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d109      	bne.n	80031d8 <HAL_RCC_OscConfig+0x93c>
 80031c4:	4b01      	ldr	r3, [pc, #4]	; (80031cc <HAL_RCC_OscConfig+0x930>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	e014      	b.n	80031f4 <HAL_RCC_OscConfig+0x958>
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
 80031d0:	10908120 	.word	0x10908120
 80031d4:	40007000 	.word	0x40007000
 80031d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80031dc:	2202      	movs	r2, #2
 80031de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	fa93 f2a3 	rbit	r2, r3
 80031ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	4bbb      	ldr	r3, [pc, #748]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80031f8:	2102      	movs	r1, #2
 80031fa:	6011      	str	r1, [r2, #0]
 80031fc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	fa92 f1a2 	rbit	r1, r2
 8003206:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800320a:	6011      	str	r1, [r2, #0]
  return result;
 800320c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	fab2 f282 	clz	r2, r2
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	f002 021f 	and.w	r2, r2, #31
 8003222:	2101      	movs	r1, #1
 8003224:	fa01 f202 	lsl.w	r2, r1, r2
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d099      	beq.n	8003162 <HAL_RCC_OscConfig+0x8c6>
 800322e:	e063      	b.n	80032f8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003230:	f7fe f846 	bl	80012c0 <HAL_GetTick>
 8003234:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003238:	e00b      	b.n	8003252 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f7fe f841 	bl	80012c0 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e225      	b.n	800369e <HAL_RCC_OscConfig+0xe02>
 8003252:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003256:	2202      	movs	r2, #2
 8003258:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	fa93 f2a3 	rbit	r2, r3
 8003264:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800326e:	2202      	movs	r2, #2
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	fa93 f2a3 	rbit	r2, r3
 800327c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003280:	601a      	str	r2, [r3, #0]
  return result;
 8003282:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003286:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f043 0302 	orr.w	r3, r3, #2
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d102      	bne.n	80032a2 <HAL_RCC_OscConfig+0xa06>
 800329c:	4b90      	ldr	r3, [pc, #576]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	e00d      	b.n	80032be <HAL_RCC_OscConfig+0xa22>
 80032a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80032a6:	2202      	movs	r2, #2
 80032a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	fa93 f2a3 	rbit	r2, r3
 80032b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	4b89      	ldr	r3, [pc, #548]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80032c2:	2102      	movs	r1, #2
 80032c4:	6011      	str	r1, [r2, #0]
 80032c6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	fa92 f1a2 	rbit	r1, r2
 80032d0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80032d4:	6011      	str	r1, [r2, #0]
  return result;
 80032d6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	fab2 f282 	clz	r2, r2
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	f002 021f 	and.w	r2, r2, #31
 80032ec:	2101      	movs	r1, #1
 80032ee:	fa01 f202 	lsl.w	r2, r1, r2
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1a0      	bne.n	800323a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d105      	bne.n	800330c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003300:	4b77      	ldr	r3, [pc, #476]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	4a76      	ldr	r2, [pc, #472]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 8003306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 81c2 	beq.w	800369c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003318:	4b71      	ldr	r3, [pc, #452]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 030c 	and.w	r3, r3, #12
 8003320:	2b08      	cmp	r3, #8
 8003322:	f000 819c 	beq.w	800365e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003326:	1d3b      	adds	r3, r7, #4
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	2b02      	cmp	r3, #2
 800332e:	f040 8114 	bne.w	800355a <HAL_RCC_OscConfig+0xcbe>
 8003332:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003336:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800333a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	fa93 f2a3 	rbit	r2, r3
 8003346:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800334a:	601a      	str	r2, [r3, #0]
  return result;
 800334c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003350:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800335c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	461a      	mov	r2, r3
 8003364:	2300      	movs	r3, #0
 8003366:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fd ffaa 	bl	80012c0 <HAL_GetTick>
 800336c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003370:	e009      	b.n	8003386 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003372:	f7fd ffa5 	bl	80012c0 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e18b      	b.n	800369e <HAL_RCC_OscConfig+0xe02>
 8003386:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800338a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800338e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	fa93 f2a3 	rbit	r2, r3
 800339a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800339e:	601a      	str	r2, [r3, #0]
  return result;
 80033a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80033a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d102      	bne.n	80033c0 <HAL_RCC_OscConfig+0xb24>
 80033ba:	4b49      	ldr	r3, [pc, #292]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	e01b      	b.n	80033f8 <HAL_RCC_OscConfig+0xb5c>
 80033c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80033c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	fa93 f2a3 	rbit	r2, r3
 80033d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80033de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	fa93 f2a3 	rbit	r2, r3
 80033ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	4b3a      	ldr	r3, [pc, #232]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80033fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003400:	6011      	str	r1, [r2, #0]
 8003402:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	fa92 f1a2 	rbit	r1, r2
 800340c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003410:	6011      	str	r1, [r2, #0]
  return result;
 8003412:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	fab2 f282 	clz	r2, r2
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	f042 0220 	orr.w	r2, r2, #32
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	f002 021f 	and.w	r2, r2, #31
 8003428:	2101      	movs	r1, #1
 800342a:	fa01 f202 	lsl.w	r2, r1, r2
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d19e      	bne.n	8003372 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003434:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003442:	1d3b      	adds	r3, r7, #4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	430b      	orrs	r3, r1
 800344a:	4925      	ldr	r1, [pc, #148]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
 8003450:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003454:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	fa93 f2a3 	rbit	r2, r3
 8003464:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003468:	601a      	str	r2, [r3, #0]
  return result;
 800346a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800346e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003470:	fab3 f383 	clz	r3, r3
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800347a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	461a      	mov	r2, r3
 8003482:	2301      	movs	r3, #1
 8003484:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7fd ff1b 	bl	80012c0 <HAL_GetTick>
 800348a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800348e:	e009      	b.n	80034a4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003490:	f7fd ff16 	bl	80012c0 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0fc      	b.n	800369e <HAL_RCC_OscConfig+0xe02>
 80034a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	fa93 f2a3 	rbit	r2, r3
 80034b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034bc:	601a      	str	r2, [r3, #0]
  return result;
 80034be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c4:	fab3 f383 	clz	r3, r3
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d105      	bne.n	80034e4 <HAL_RCC_OscConfig+0xc48>
 80034d8:	4b01      	ldr	r3, [pc, #4]	; (80034e0 <HAL_RCC_OscConfig+0xc44>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	e01e      	b.n	800351c <HAL_RCC_OscConfig+0xc80>
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000
 80034e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	fa93 f2a3 	rbit	r2, r3
 80034f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003502:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	fa93 f2a3 	rbit	r2, r3
 8003512:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	4b63      	ldr	r3, [pc, #396]	; (80036a8 <HAL_RCC_OscConfig+0xe0c>)
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003520:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003524:	6011      	str	r1, [r2, #0]
 8003526:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	fa92 f1a2 	rbit	r1, r2
 8003530:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003534:	6011      	str	r1, [r2, #0]
  return result;
 8003536:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	fab2 f282 	clz	r2, r2
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	f042 0220 	orr.w	r2, r2, #32
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	f002 021f 	and.w	r2, r2, #31
 800354c:	2101      	movs	r1, #1
 800354e:	fa01 f202 	lsl.w	r2, r1, r2
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d09b      	beq.n	8003490 <HAL_RCC_OscConfig+0xbf4>
 8003558:	e0a0      	b.n	800369c <HAL_RCC_OscConfig+0xe00>
 800355a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800355e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	fa93 f2a3 	rbit	r2, r3
 800356e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003572:	601a      	str	r2, [r3, #0]
  return result;
 8003574:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003578:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003584:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	461a      	mov	r2, r3
 800358c:	2300      	movs	r3, #0
 800358e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fd fe96 	bl	80012c0 <HAL_GetTick>
 8003594:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003598:	e009      	b.n	80035ae <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359a:	f7fd fe91 	bl	80012c0 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e077      	b.n	800369e <HAL_RCC_OscConfig+0xe02>
 80035ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	fa93 f2a3 	rbit	r2, r3
 80035c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c6:	601a      	str	r2, [r3, #0]
  return result;
 80035c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d102      	bne.n	80035e8 <HAL_RCC_OscConfig+0xd4c>
 80035e2:	4b31      	ldr	r3, [pc, #196]	; (80036a8 <HAL_RCC_OscConfig+0xe0c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	e01b      	b.n	8003620 <HAL_RCC_OscConfig+0xd84>
 80035e8:	f107 0320 	add.w	r3, r7, #32
 80035ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	f107 0320 	add.w	r3, r7, #32
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	fa93 f2a3 	rbit	r2, r3
 80035fc:	f107 031c 	add.w	r3, r7, #28
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	f107 0318 	add.w	r3, r7, #24
 8003606:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	f107 0318 	add.w	r3, r7, #24
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	fa93 f2a3 	rbit	r2, r3
 8003616:	f107 0314 	add.w	r3, r7, #20
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <HAL_RCC_OscConfig+0xe0c>)
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	f107 0210 	add.w	r2, r7, #16
 8003624:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003628:	6011      	str	r1, [r2, #0]
 800362a:	f107 0210 	add.w	r2, r7, #16
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	fa92 f1a2 	rbit	r1, r2
 8003634:	f107 020c 	add.w	r2, r7, #12
 8003638:	6011      	str	r1, [r2, #0]
  return result;
 800363a:	f107 020c 	add.w	r2, r7, #12
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	fab2 f282 	clz	r2, r2
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	f042 0220 	orr.w	r2, r2, #32
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	f002 021f 	and.w	r2, r2, #31
 8003650:	2101      	movs	r1, #1
 8003652:	fa01 f202 	lsl.w	r2, r1, r2
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d19e      	bne.n	800359a <HAL_RCC_OscConfig+0xcfe>
 800365c:	e01e      	b.n	800369c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e018      	b.n	800369e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800366c:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <HAL_RCC_OscConfig+0xe0c>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003674:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003678:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	429a      	cmp	r2, r3
 8003684:	d108      	bne.n	8003698 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003686:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800368a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000

080036ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b09e      	sub	sp, #120	; 0x78
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e162      	b.n	800398a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036c4:	4b90      	ldr	r3, [pc, #576]	; (8003908 <HAL_RCC_ClockConfig+0x25c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d910      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b8d      	ldr	r3, [pc, #564]	; (8003908 <HAL_RCC_ClockConfig+0x25c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 0207 	bic.w	r2, r3, #7
 80036da:	498b      	ldr	r1, [pc, #556]	; (8003908 <HAL_RCC_ClockConfig+0x25c>)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b89      	ldr	r3, [pc, #548]	; (8003908 <HAL_RCC_ClockConfig+0x25c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e14a      	b.n	800398a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003700:	4b82      	ldr	r3, [pc, #520]	; (800390c <HAL_RCC_ClockConfig+0x260>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	497f      	ldr	r1, [pc, #508]	; (800390c <HAL_RCC_ClockConfig+0x260>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80dc 	beq.w	80038d8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d13c      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xf6>
 8003728:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800372c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003738:	fab3 f383 	clz	r3, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	d102      	bne.n	8003752 <HAL_RCC_ClockConfig+0xa6>
 800374c:	4b6f      	ldr	r3, [pc, #444]	; (800390c <HAL_RCC_ClockConfig+0x260>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	e00f      	b.n	8003772 <HAL_RCC_ClockConfig+0xc6>
 8003752:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003756:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	667b      	str	r3, [r7, #100]	; 0x64
 8003760:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003764:	663b      	str	r3, [r7, #96]	; 0x60
 8003766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003768:	fa93 f3a3 	rbit	r3, r3
 800376c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800376e:	4b67      	ldr	r3, [pc, #412]	; (800390c <HAL_RCC_ClockConfig+0x260>)
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003776:	65ba      	str	r2, [r7, #88]	; 0x58
 8003778:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800377a:	fa92 f2a2 	rbit	r2, r2
 800377e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003780:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003782:	fab2 f282 	clz	r2, r2
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	f042 0220 	orr.w	r2, r2, #32
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	f002 021f 	and.w	r2, r2, #31
 8003792:	2101      	movs	r1, #1
 8003794:	fa01 f202 	lsl.w	r2, r1, r2
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d17b      	bne.n	8003896 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e0f3      	b.n	800398a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d13c      	bne.n	8003824 <HAL_RCC_ClockConfig+0x178>
 80037aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	095b      	lsrs	r3, r3, #5
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d102      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x128>
 80037ce:	4b4f      	ldr	r3, [pc, #316]	; (800390c <HAL_RCC_ClockConfig+0x260>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	e00f      	b.n	80037f4 <HAL_RCC_ClockConfig+0x148>
 80037d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037dc:	fa93 f3a3 	rbit	r3, r3
 80037e0:	647b      	str	r3, [r7, #68]	; 0x44
 80037e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037e6:	643b      	str	r3, [r7, #64]	; 0x40
 80037e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ea:	fa93 f3a3 	rbit	r3, r3
 80037ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f0:	4b46      	ldr	r3, [pc, #280]	; (800390c <HAL_RCC_ClockConfig+0x260>)
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80037fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037fc:	fa92 f2a2 	rbit	r2, r2
 8003800:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003804:	fab2 f282 	clz	r2, r2
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	f042 0220 	orr.w	r2, r2, #32
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	f002 021f 	and.w	r2, r2, #31
 8003814:	2101      	movs	r1, #1
 8003816:	fa01 f202 	lsl.w	r2, r1, r2
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d13a      	bne.n	8003896 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0b2      	b.n	800398a <HAL_RCC_ClockConfig+0x2de>
 8003824:	2302      	movs	r3, #2
 8003826:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	d102      	bne.n	800384c <HAL_RCC_ClockConfig+0x1a0>
 8003846:	4b31      	ldr	r3, [pc, #196]	; (800390c <HAL_RCC_ClockConfig+0x260>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	e00d      	b.n	8003868 <HAL_RCC_ClockConfig+0x1bc>
 800384c:	2302      	movs	r3, #2
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
 8003858:	2302      	movs	r3, #2
 800385a:	623b      	str	r3, [r7, #32]
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	61fb      	str	r3, [r7, #28]
 8003864:	4b29      	ldr	r3, [pc, #164]	; (800390c <HAL_RCC_ClockConfig+0x260>)
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	2202      	movs	r2, #2
 800386a:	61ba      	str	r2, [r7, #24]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	fa92 f2a2 	rbit	r2, r2
 8003872:	617a      	str	r2, [r7, #20]
  return result;
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	fab2 f282 	clz	r2, r2
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	f042 0220 	orr.w	r2, r2, #32
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	f002 021f 	and.w	r2, r2, #31
 8003886:	2101      	movs	r1, #1
 8003888:	fa01 f202 	lsl.w	r2, r1, r2
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e079      	b.n	800398a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003896:	4b1d      	ldr	r3, [pc, #116]	; (800390c <HAL_RCC_ClockConfig+0x260>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f023 0203 	bic.w	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	491a      	ldr	r1, [pc, #104]	; (800390c <HAL_RCC_ClockConfig+0x260>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038a8:	f7fd fd0a 	bl	80012c0 <HAL_GetTick>
 80038ac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b0:	f7fd fd06 	bl	80012c0 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e061      	b.n	800398a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c6:	4b11      	ldr	r3, [pc, #68]	; (800390c <HAL_RCC_ClockConfig+0x260>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 020c 	and.w	r2, r3, #12
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d1eb      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_RCC_ClockConfig+0x25c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d214      	bcs.n	8003910 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e6:	4b08      	ldr	r3, [pc, #32]	; (8003908 <HAL_RCC_ClockConfig+0x25c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 0207 	bic.w	r2, r3, #7
 80038ee:	4906      	ldr	r1, [pc, #24]	; (8003908 <HAL_RCC_ClockConfig+0x25c>)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f6:	4b04      	ldr	r3, [pc, #16]	; (8003908 <HAL_RCC_ClockConfig+0x25c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d005      	beq.n	8003910 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e040      	b.n	800398a <HAL_RCC_ClockConfig+0x2de>
 8003908:	40022000 	.word	0x40022000
 800390c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <HAL_RCC_ClockConfig+0x2e8>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	491a      	ldr	r1, [pc, #104]	; (8003994 <HAL_RCC_ClockConfig+0x2e8>)
 800392a:	4313      	orrs	r3, r2
 800392c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800393a:	4b16      	ldr	r3, [pc, #88]	; (8003994 <HAL_RCC_ClockConfig+0x2e8>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4912      	ldr	r1, [pc, #72]	; (8003994 <HAL_RCC_ClockConfig+0x2e8>)
 800394a:	4313      	orrs	r3, r2
 800394c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800394e:	f000 f829 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8003952:	4601      	mov	r1, r0
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <HAL_RCC_ClockConfig+0x2e8>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800395c:	22f0      	movs	r2, #240	; 0xf0
 800395e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	fa92 f2a2 	rbit	r2, r2
 8003966:	60fa      	str	r2, [r7, #12]
  return result;
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	fab2 f282 	clz	r2, r2
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	40d3      	lsrs	r3, r2
 8003972:	4a09      	ldr	r2, [pc, #36]	; (8003998 <HAL_RCC_ClockConfig+0x2ec>)
 8003974:	5cd3      	ldrb	r3, [r2, r3]
 8003976:	fa21 f303 	lsr.w	r3, r1, r3
 800397a:	4a08      	ldr	r2, [pc, #32]	; (800399c <HAL_RCC_ClockConfig+0x2f0>)
 800397c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800397e:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <HAL_RCC_ClockConfig+0x2f4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fd fc58 	bl	8001238 <HAL_InitTick>
  
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3778      	adds	r7, #120	; 0x78
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40021000 	.word	0x40021000
 8003998:	080068c8 	.word	0x080068c8
 800399c:	20000000 	.word	0x20000000
 80039a0:	20000004 	.word	0x20000004

080039a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b08b      	sub	sp, #44	; 0x2c
 80039a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	2300      	movs	r3, #0
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80039be:	4b29      	ldr	r3, [pc, #164]	; (8003a64 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d002      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x30>
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d003      	beq.n	80039da <HAL_RCC_GetSysClockFreq+0x36>
 80039d2:	e03c      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039d4:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039d6:	623b      	str	r3, [r7, #32]
      break;
 80039d8:	e03c      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80039e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80039e4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	fa92 f2a2 	rbit	r2, r2
 80039ec:	607a      	str	r2, [r7, #4]
  return result;
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	fab2 f282 	clz	r2, r2
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	40d3      	lsrs	r3, r2
 80039f8:	4a1c      	ldr	r2, [pc, #112]	; (8003a6c <HAL_RCC_GetSysClockFreq+0xc8>)
 80039fa:	5cd3      	ldrb	r3, [r2, r3]
 80039fc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80039fe:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	220f      	movs	r2, #15
 8003a08:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	fa92 f2a2 	rbit	r2, r2
 8003a10:	60fa      	str	r2, [r7, #12]
  return result;
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	fab2 f282 	clz	r2, r2
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	40d3      	lsrs	r3, r2
 8003a1c:	4a14      	ldr	r2, [pc, #80]	; (8003a70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a1e:	5cd3      	ldrb	r3, [r2, r3]
 8003a20:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a2c:	4a0e      	ldr	r2, [pc, #56]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3c:	e004      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	4a0c      	ldr	r2, [pc, #48]	; (8003a74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	623b      	str	r3, [r7, #32]
      break;
 8003a4c:	e002      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a50:	623b      	str	r3, [r7, #32]
      break;
 8003a52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a54:	6a3b      	ldr	r3, [r7, #32]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	372c      	adds	r7, #44	; 0x2c
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000
 8003a68:	00b71b00 	.word	0x00b71b00
 8003a6c:	080068e0 	.word	0x080068e0
 8003a70:	080068f0 	.word	0x080068f0
 8003a74:	003d0900 	.word	0x003d0900
 8003a78:	007a1200 	.word	0x007a1200

08003a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a82:	681b      	ldr	r3, [r3, #0]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000000 	.word	0x20000000

08003a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a9a:	f7ff ffef 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003a9e:	4601      	mov	r1, r0
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003aa8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003aac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	fa92 f2a2 	rbit	r2, r2
 8003ab4:	603a      	str	r2, [r7, #0]
  return result;
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	fab2 f282 	clz	r2, r2
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	40d3      	lsrs	r3, r2
 8003ac0:	4a04      	ldr	r2, [pc, #16]	; (8003ad4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003ac2:	5cd3      	ldrb	r3, [r2, r3]
 8003ac4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	080068d8 	.word	0x080068d8

08003ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003ade:	f7ff ffcd 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003ae2:	4601      	mov	r1, r0
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003aec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003af0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	fa92 f2a2 	rbit	r2, r2
 8003af8:	603a      	str	r2, [r7, #0]
  return result;
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	fab2 f282 	clz	r2, r2
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	40d3      	lsrs	r3, r2
 8003b04:	4a04      	ldr	r2, [pc, #16]	; (8003b18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b06:	5cd3      	ldrb	r3, [r2, r3]
 8003b08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000
 8003b18:	080068d8 	.word	0x080068d8

08003b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b092      	sub	sp, #72	; 0x48
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 80d4 	beq.w	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b40:	4b4e      	ldr	r3, [pc, #312]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10e      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4c:	4b4b      	ldr	r3, [pc, #300]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	4a4a      	ldr	r2, [pc, #296]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b56:	61d3      	str	r3, [r2, #28]
 8003b58:	4b48      	ldr	r3, [pc, #288]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6a:	4b45      	ldr	r3, [pc, #276]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d118      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b76:	4b42      	ldr	r3, [pc, #264]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a41      	ldr	r2, [pc, #260]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b82:	f7fd fb9d 	bl	80012c0 <HAL_GetTick>
 8003b86:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b88:	e008      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8a:	f7fd fb99 	bl	80012c0 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b64      	cmp	r3, #100	; 0x64
 8003b96:	d901      	bls.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e169      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9c:	4b38      	ldr	r3, [pc, #224]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ba8:	4b34      	ldr	r3, [pc, #208]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8084 	beq.w	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d07c      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bc8:	4b2c      	ldr	r3, [pc, #176]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	fa93 f3a3 	rbit	r3, r3
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b26      	ldr	r3, [pc, #152]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bfa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c06:	fab3 f383 	clz	r3, r3
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	461a      	mov	r2, r3
 8003c16:	2300      	movs	r3, #0
 8003c18:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c1a:	4a18      	ldr	r2, [pc, #96]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d04b      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2a:	f7fd fb49 	bl	80012c0 <HAL_GetTick>
 8003c2e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fd fb45 	bl	80012c0 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e113      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	fa93 f3a3 	rbit	r3, r3
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
 8003c54:	2302      	movs	r3, #2
 8003c56:	623b      	str	r3, [r7, #32]
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	61fb      	str	r3, [r7, #28]
  return result;
 8003c60:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c62:	fab3 f383 	clz	r3, r3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f043 0302 	orr.w	r3, r3, #2
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d108      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c76:	4b01      	ldr	r3, [pc, #4]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	e00d      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40007000 	.word	0x40007000
 8003c84:	10908100 	.word	0x10908100
 8003c88:	2302      	movs	r3, #2
 8003c8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	fa93 f3a3 	rbit	r3, r3
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	4b78      	ldr	r3, [pc, #480]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	2202      	movs	r2, #2
 8003c9a:	613a      	str	r2, [r7, #16]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	fa92 f2a2 	rbit	r2, r2
 8003ca2:	60fa      	str	r2, [r7, #12]
  return result;
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	fab2 f282 	clz	r2, r2
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	f002 021f 	and.w	r2, r2, #31
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0b7      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003cc2:	4b6d      	ldr	r3, [pc, #436]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	496a      	ldr	r1, [pc, #424]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cdc:	4b66      	ldr	r3, [pc, #408]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	4a65      	ldr	r2, [pc, #404]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cf4:	4b60      	ldr	r3, [pc, #384]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	f023 0203 	bic.w	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	495d      	ldr	r1, [pc, #372]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d12:	4b59      	ldr	r3, [pc, #356]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	4956      	ldr	r1, [pc, #344]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d30:	4b51      	ldr	r3, [pc, #324]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	494e      	ldr	r1, [pc, #312]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d008      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d4e:	4b4a      	ldr	r3, [pc, #296]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	f023 0210 	bic.w	r2, r3, #16
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	4947      	ldr	r1, [pc, #284]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d6c:	4b42      	ldr	r3, [pc, #264]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	493f      	ldr	r1, [pc, #252]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d8a:	4b3b      	ldr	r3, [pc, #236]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f023 0220 	bic.w	r2, r3, #32
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	4938      	ldr	r1, [pc, #224]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003da8:	4b33      	ldr	r3, [pc, #204]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	4930      	ldr	r1, [pc, #192]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dc6:	4b2c      	ldr	r3, [pc, #176]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	4929      	ldr	r1, [pc, #164]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003de4:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	4921      	ldr	r1, [pc, #132]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e02:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	491a      	ldr	r1, [pc, #104]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003e20:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	4912      	ldr	r1, [pc, #72]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d008      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e3e:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	490b      	ldr	r1, [pc, #44]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e68:	4903      	ldr	r1, [pc, #12]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3748      	adds	r7, #72	; 0x48
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40021000 	.word	0x40021000

08003e7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e09d      	b.n	8003fca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d108      	bne.n	8003ea8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e9e:	d009      	beq.n	8003eb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	61da      	str	r2, [r3, #28]
 8003ea6:	e005      	b.n	8003eb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fc fe60 	bl	8000b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ef4:	d902      	bls.n	8003efc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	e002      	b.n	8003f02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f0a:	d007      	beq.n	8003f1c <HAL_SPI_Init+0xa0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f14:	d002      	beq.n	8003f1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5e:	ea42 0103 	orr.w	r1, r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	0c1b      	lsrs	r3, r3, #16
 8003f78:	f003 0204 	and.w	r2, r3, #4
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f98:	ea42 0103 	orr.w	r1, r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69da      	ldr	r2, [r3, #28]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b08a      	sub	sp, #40	; 0x28
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
 8003fde:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_SPI_TransmitReceive+0x26>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e1fb      	b.n	80043f0 <HAL_SPI_TransmitReceive+0x41e>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004000:	f7fd f95e 	bl	80012c0 <HAL_GetTick>
 8004004:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800400c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004014:	887b      	ldrh	r3, [r7, #2]
 8004016:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004018:	887b      	ldrh	r3, [r7, #2]
 800401a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800401c:	7efb      	ldrb	r3, [r7, #27]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d00e      	beq.n	8004040 <HAL_SPI_TransmitReceive+0x6e>
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004028:	d106      	bne.n	8004038 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d102      	bne.n	8004038 <HAL_SPI_TransmitReceive+0x66>
 8004032:	7efb      	ldrb	r3, [r7, #27]
 8004034:	2b04      	cmp	r3, #4
 8004036:	d003      	beq.n	8004040 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004038:	2302      	movs	r3, #2
 800403a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800403e:	e1cd      	b.n	80043dc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_SPI_TransmitReceive+0x80>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_SPI_TransmitReceive+0x80>
 800404c:	887b      	ldrh	r3, [r7, #2]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d103      	bne.n	800405a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004058:	e1c0      	b.n	80043dc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b04      	cmp	r3, #4
 8004064:	d003      	beq.n	800406e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2205      	movs	r2, #5
 800406a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	887a      	ldrh	r2, [r7, #2]
 800407e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	887a      	ldrh	r2, [r7, #2]
 8004086:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	887a      	ldrh	r2, [r7, #2]
 8004094:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	887a      	ldrh	r2, [r7, #2]
 800409a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040b0:	d802      	bhi.n	80040b8 <HAL_SPI_TransmitReceive+0xe6>
 80040b2:	8a3b      	ldrh	r3, [r7, #16]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d908      	bls.n	80040ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040c6:	605a      	str	r2, [r3, #4]
 80040c8:	e007      	b.n	80040da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	d007      	beq.n	80040f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004100:	d97c      	bls.n	80041fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_SPI_TransmitReceive+0x13e>
 800410a:	8a7b      	ldrh	r3, [r7, #18]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d169      	bne.n	80041e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	881a      	ldrh	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	1c9a      	adds	r2, r3, #2
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004134:	e056      	b.n	80041e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b02      	cmp	r3, #2
 8004142:	d11b      	bne.n	800417c <HAL_SPI_TransmitReceive+0x1aa>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d016      	beq.n	800417c <HAL_SPI_TransmitReceive+0x1aa>
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	2b01      	cmp	r3, #1
 8004152:	d113      	bne.n	800417c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	881a      	ldrh	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	1c9a      	adds	r2, r3, #2
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b01      	cmp	r3, #1
 8004188:	d11c      	bne.n	80041c4 <HAL_SPI_TransmitReceive+0x1f2>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d016      	beq.n	80041c4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	b292      	uxth	r2, r2
 80041a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	1c9a      	adds	r2, r3, #2
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041c0:	2301      	movs	r3, #1
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041c4:	f7fd f87c 	bl	80012c0 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d807      	bhi.n	80041e4 <HAL_SPI_TransmitReceive+0x212>
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041da:	d003      	beq.n	80041e4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80041e2:	e0fb      	b.n	80043dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1a3      	bne.n	8004136 <HAL_SPI_TransmitReceive+0x164>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d19d      	bne.n	8004136 <HAL_SPI_TransmitReceive+0x164>
 80041fa:	e0df      	b.n	80043bc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_SPI_TransmitReceive+0x23a>
 8004204:	8a7b      	ldrh	r3, [r7, #18]
 8004206:	2b01      	cmp	r3, #1
 8004208:	f040 80cb 	bne.w	80043a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d912      	bls.n	800423c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	881a      	ldrh	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	1c9a      	adds	r2, r3, #2
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b02      	subs	r3, #2
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	87da      	strh	r2, [r3, #62]	; 0x3e
 800423a:	e0b2      	b.n	80043a2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	330c      	adds	r3, #12
 8004246:	7812      	ldrb	r2, [r2, #0]
 8004248:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004258:	b29b      	uxth	r3, r3
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004262:	e09e      	b.n	80043a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b02      	cmp	r3, #2
 8004270:	d134      	bne.n	80042dc <HAL_SPI_TransmitReceive+0x30a>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d02f      	beq.n	80042dc <HAL_SPI_TransmitReceive+0x30a>
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	2b01      	cmp	r3, #1
 8004280:	d12c      	bne.n	80042dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	d912      	bls.n	80042b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	881a      	ldrh	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	1c9a      	adds	r2, r3, #2
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b02      	subs	r3, #2
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042b0:	e012      	b.n	80042d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	330c      	adds	r3, #12
 80042bc:	7812      	ldrb	r2, [r2, #0]
 80042be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d148      	bne.n	800437c <HAL_SPI_TransmitReceive+0x3aa>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d042      	beq.n	800437c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d923      	bls.n	800434a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	b292      	uxth	r2, r2
 800430e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	1c9a      	adds	r2, r3, #2
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b02      	subs	r3, #2
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	d81f      	bhi.n	8004378 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004346:	605a      	str	r2, [r3, #4]
 8004348:	e016      	b.n	8004378 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f103 020c 	add.w	r2, r3, #12
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	7812      	ldrb	r2, [r2, #0]
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004378:	2301      	movs	r3, #1
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800437c:	f7fc ffa0 	bl	80012c0 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004388:	429a      	cmp	r2, r3
 800438a:	d803      	bhi.n	8004394 <HAL_SPI_TransmitReceive+0x3c2>
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004392:	d102      	bne.n	800439a <HAL_SPI_TransmitReceive+0x3c8>
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	2b00      	cmp	r3, #0
 8004398:	d103      	bne.n	80043a2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043a0:	e01c      	b.n	80043dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f47f af5b 	bne.w	8004264 <HAL_SPI_TransmitReceive+0x292>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f47f af54 	bne.w	8004264 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f92f 	bl	8004624 <SPI_EndRxTxTransaction>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d006      	beq.n	80043da <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	661a      	str	r2, [r3, #96]	; 0x60
 80043d8:	e000      	b.n	80043dc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80043da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3728      	adds	r7, #40	; 0x28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	4613      	mov	r3, r2
 8004406:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004408:	f7fc ff5a 	bl	80012c0 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	4413      	add	r3, r2
 8004416:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004418:	f7fc ff52 	bl	80012c0 <HAL_GetTick>
 800441c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800441e:	4b39      	ldr	r3, [pc, #228]	; (8004504 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	015b      	lsls	r3, r3, #5
 8004424:	0d1b      	lsrs	r3, r3, #20
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	fb02 f303 	mul.w	r3, r2, r3
 800442c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800442e:	e054      	b.n	80044da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004436:	d050      	beq.n	80044da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004438:	f7fc ff42 	bl	80012c0 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	429a      	cmp	r2, r3
 8004446:	d902      	bls.n	800444e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d13d      	bne.n	80044ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800445c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004466:	d111      	bne.n	800448c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004470:	d004      	beq.n	800447c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447a:	d107      	bne.n	800448c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800448a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004494:	d10f      	bne.n	80044b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e017      	b.n	80044fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4013      	ands	r3, r2
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	461a      	mov	r2, r3
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d19b      	bne.n	8004430 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000000 	.word	0x20000000

08004508 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004516:	f7fc fed3 	bl	80012c0 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	4413      	add	r3, r2
 8004524:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004526:	f7fc fecb 	bl	80012c0 <HAL_GetTick>
 800452a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800452c:	4b3c      	ldr	r3, [pc, #240]	; (8004620 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	00da      	lsls	r2, r3, #3
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	0d1b      	lsrs	r3, r3, #20
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004544:	e05f      	b.n	8004606 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800454c:	d106      	bne.n	800455c <SPI_WaitFifoStateUntilTimeout+0x54>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d103      	bne.n	800455c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	330c      	adds	r3, #12
 800455a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004562:	d050      	beq.n	8004606 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004564:	f7fc feac 	bl	80012c0 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	429a      	cmp	r2, r3
 8004572:	d902      	bls.n	800457a <SPI_WaitFifoStateUntilTimeout+0x72>
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d13d      	bne.n	80045f6 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004588:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004592:	d111      	bne.n	80045b8 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800459c:	d004      	beq.n	80045a8 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a6:	d107      	bne.n	80045b8 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c0:	d10f      	bne.n	80045e2 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e010      	b.n	8004618 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	3b01      	subs	r3, #1
 8004604:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4013      	ands	r3, r2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	429a      	cmp	r2, r3
 8004614:	d197      	bne.n	8004546 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3720      	adds	r7, #32
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20000000 	.word	0x20000000

08004624 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2200      	movs	r2, #0
 8004638:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7ff ff63 	bl	8004508 <SPI_WaitFifoStateUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464c:	f043 0220 	orr.w	r2, r3, #32
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e027      	b.n	80046a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2200      	movs	r2, #0
 8004660:	2180      	movs	r1, #128	; 0x80
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f7ff fec8 	bl	80043f8 <SPI_WaitFlagStateUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d007      	beq.n	800467e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004672:	f043 0220 	orr.w	r2, r3, #32
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e014      	b.n	80046a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2200      	movs	r2, #0
 8004686:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f7ff ff3c 	bl	8004508 <SPI_WaitFifoStateUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469a:	f043 0220 	orr.w	r2, r3, #32
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e000      	b.n	80046a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e049      	b.n	8004756 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fc fc0c 	bl	8000ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4619      	mov	r1, r3
 80046ee:	4610      	mov	r0, r2
 80046f0:	f000 fb38 	bl	8004d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e049      	b.n	8004804 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d106      	bne.n	800478a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f841 	bl	800480c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2202      	movs	r2, #2
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3304      	adds	r3, #4
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f000 fae1 	bl	8004d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e049      	b.n	80048c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f841 	bl	80048ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	4619      	mov	r1, r3
 800485e:	4610      	mov	r0, r2
 8004860:	f000 fa80 	bl	8004d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
	...

080048e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_TIM_OC_ConfigChannel+0x1a>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e064      	b.n	80049c8 <HAL_TIM_OC_ConfigChannel+0xe4>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b14      	cmp	r3, #20
 800490a:	d857      	bhi.n	80049bc <HAL_TIM_OC_ConfigChannel+0xd8>
 800490c:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <HAL_TIM_OC_ConfigChannel+0x30>)
 800490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004912:	bf00      	nop
 8004914:	08004969 	.word	0x08004969
 8004918:	080049bd 	.word	0x080049bd
 800491c:	080049bd 	.word	0x080049bd
 8004920:	080049bd 	.word	0x080049bd
 8004924:	08004977 	.word	0x08004977
 8004928:	080049bd 	.word	0x080049bd
 800492c:	080049bd 	.word	0x080049bd
 8004930:	080049bd 	.word	0x080049bd
 8004934:	08004985 	.word	0x08004985
 8004938:	080049bd 	.word	0x080049bd
 800493c:	080049bd 	.word	0x080049bd
 8004940:	080049bd 	.word	0x080049bd
 8004944:	08004993 	.word	0x08004993
 8004948:	080049bd 	.word	0x080049bd
 800494c:	080049bd 	.word	0x080049bd
 8004950:	080049bd 	.word	0x080049bd
 8004954:	080049a1 	.word	0x080049a1
 8004958:	080049bd 	.word	0x080049bd
 800495c:	080049bd 	.word	0x080049bd
 8004960:	080049bd 	.word	0x080049bd
 8004964:	080049af 	.word	0x080049af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fa88 	bl	8004e84 <TIM_OC1_SetConfig>
      break;
 8004974:	e023      	b.n	80049be <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fb11 	bl	8004fa4 <TIM_OC2_SetConfig>
      break;
 8004982:	e01c      	b.n	80049be <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fb94 	bl	80050b8 <TIM_OC3_SetConfig>
      break;
 8004990:	e015      	b.n	80049be <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fc15 	bl	80051c8 <TIM_OC4_SetConfig>
      break;
 800499e:	e00e      	b.n	80049be <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fc78 	bl	800529c <TIM_OC5_SetConfig>
      break;
 80049ac:	e007      	b.n	80049be <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68b9      	ldr	r1, [r7, #8]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 fcd5 	bl	8005364 <TIM_OC6_SetConfig>
      break;
 80049ba:	e000      	b.n	80049be <HAL_TIM_OC_ConfigChannel+0xda>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80049bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e0fd      	b.n	8004be6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b14      	cmp	r3, #20
 80049f6:	f200 80f0 	bhi.w	8004bda <HAL_TIM_PWM_ConfigChannel+0x20a>
 80049fa:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80049fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a00:	08004a55 	.word	0x08004a55
 8004a04:	08004bdb 	.word	0x08004bdb
 8004a08:	08004bdb 	.word	0x08004bdb
 8004a0c:	08004bdb 	.word	0x08004bdb
 8004a10:	08004a95 	.word	0x08004a95
 8004a14:	08004bdb 	.word	0x08004bdb
 8004a18:	08004bdb 	.word	0x08004bdb
 8004a1c:	08004bdb 	.word	0x08004bdb
 8004a20:	08004ad7 	.word	0x08004ad7
 8004a24:	08004bdb 	.word	0x08004bdb
 8004a28:	08004bdb 	.word	0x08004bdb
 8004a2c:	08004bdb 	.word	0x08004bdb
 8004a30:	08004b17 	.word	0x08004b17
 8004a34:	08004bdb 	.word	0x08004bdb
 8004a38:	08004bdb 	.word	0x08004bdb
 8004a3c:	08004bdb 	.word	0x08004bdb
 8004a40:	08004b59 	.word	0x08004b59
 8004a44:	08004bdb 	.word	0x08004bdb
 8004a48:	08004bdb 	.word	0x08004bdb
 8004a4c:	08004bdb 	.word	0x08004bdb
 8004a50:	08004b99 	.word	0x08004b99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fa12 	bl	8004e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0208 	orr.w	r2, r2, #8
 8004a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0204 	bic.w	r2, r2, #4
 8004a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6999      	ldr	r1, [r3, #24]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	619a      	str	r2, [r3, #24]
      break;
 8004a92:	e0a3      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fa82 	bl	8004fa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6999      	ldr	r1, [r3, #24]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	021a      	lsls	r2, r3, #8
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	619a      	str	r2, [r3, #24]
      break;
 8004ad4:	e082      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 faeb 	bl	80050b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0208 	orr.w	r2, r2, #8
 8004af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0204 	bic.w	r2, r2, #4
 8004b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69d9      	ldr	r1, [r3, #28]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	61da      	str	r2, [r3, #28]
      break;
 8004b14:	e062      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fb53 	bl	80051c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69da      	ldr	r2, [r3, #28]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69d9      	ldr	r1, [r3, #28]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	021a      	lsls	r2, r3, #8
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	61da      	str	r2, [r3, #28]
      break;
 8004b56:	e041      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fb9c 	bl	800529c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0208 	orr.w	r2, r2, #8
 8004b72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0204 	bic.w	r2, r2, #4
 8004b82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b96:	e021      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fbe0 	bl	8005364 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	021a      	lsls	r2, r3, #8
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bd8:	e000      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004bda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop

08004bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_TIM_ConfigClockSource+0x18>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e0a8      	b.n	8004d5a <HAL_TIM_ConfigClockSource+0x16a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	d067      	beq.n	8004d14 <HAL_TIM_ConfigClockSource+0x124>
 8004c44:	2b40      	cmp	r3, #64	; 0x40
 8004c46:	d80b      	bhi.n	8004c60 <HAL_TIM_ConfigClockSource+0x70>
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d073      	beq.n	8004d34 <HAL_TIM_ConfigClockSource+0x144>
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d802      	bhi.n	8004c56 <HAL_TIM_ConfigClockSource+0x66>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d06f      	beq.n	8004d34 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c54:	e078      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d06c      	beq.n	8004d34 <HAL_TIM_ConfigClockSource+0x144>
 8004c5a:	2b30      	cmp	r3, #48	; 0x30
 8004c5c:	d06a      	beq.n	8004d34 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004c5e:	e073      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004c60:	2b70      	cmp	r3, #112	; 0x70
 8004c62:	d00d      	beq.n	8004c80 <HAL_TIM_ConfigClockSource+0x90>
 8004c64:	2b70      	cmp	r3, #112	; 0x70
 8004c66:	d804      	bhi.n	8004c72 <HAL_TIM_ConfigClockSource+0x82>
 8004c68:	2b50      	cmp	r3, #80	; 0x50
 8004c6a:	d033      	beq.n	8004cd4 <HAL_TIM_ConfigClockSource+0xe4>
 8004c6c:	2b60      	cmp	r3, #96	; 0x60
 8004c6e:	d041      	beq.n	8004cf4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004c70:	e06a      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c76:	d066      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x156>
 8004c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7c:	d017      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004c7e:	e063      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	6899      	ldr	r1, [r3, #8]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f000 fc48 	bl	8005524 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ca2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	609a      	str	r2, [r3, #8]
      break;
 8004cac:	e04c      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	6899      	ldr	r1, [r3, #8]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f000 fc31 	bl	8005524 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cd0:	609a      	str	r2, [r3, #8]
      break;
 8004cd2:	e039      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	6859      	ldr	r1, [r3, #4]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f000 fba5 	bl	8005430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2150      	movs	r1, #80	; 0x50
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fbfe 	bl	80054ee <TIM_ITRx_SetConfig>
      break;
 8004cf2:	e029      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	6859      	ldr	r1, [r3, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	461a      	mov	r2, r3
 8004d02:	f000 fbc4 	bl	800548e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2160      	movs	r1, #96	; 0x60
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fbee 	bl	80054ee <TIM_ITRx_SetConfig>
      break;
 8004d12:	e019      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	6859      	ldr	r1, [r3, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	461a      	mov	r2, r3
 8004d22:	f000 fb85 	bl	8005430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2140      	movs	r1, #64	; 0x40
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fbde 	bl	80054ee <TIM_ITRx_SetConfig>
      break;
 8004d32:	e009      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f000 fbd5 	bl	80054ee <TIM_ITRx_SetConfig>
        break;
 8004d44:	e000      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a3c      	ldr	r2, [pc, #240]	; (8004e68 <TIM_Base_SetConfig+0x104>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00f      	beq.n	8004d9c <TIM_Base_SetConfig+0x38>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d82:	d00b      	beq.n	8004d9c <TIM_Base_SetConfig+0x38>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a39      	ldr	r2, [pc, #228]	; (8004e6c <TIM_Base_SetConfig+0x108>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d007      	beq.n	8004d9c <TIM_Base_SetConfig+0x38>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a38      	ldr	r2, [pc, #224]	; (8004e70 <TIM_Base_SetConfig+0x10c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_Base_SetConfig+0x38>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a37      	ldr	r2, [pc, #220]	; (8004e74 <TIM_Base_SetConfig+0x110>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d108      	bne.n	8004dae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a2d      	ldr	r2, [pc, #180]	; (8004e68 <TIM_Base_SetConfig+0x104>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d01b      	beq.n	8004dee <TIM_Base_SetConfig+0x8a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbc:	d017      	beq.n	8004dee <TIM_Base_SetConfig+0x8a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a2a      	ldr	r2, [pc, #168]	; (8004e6c <TIM_Base_SetConfig+0x108>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d013      	beq.n	8004dee <TIM_Base_SetConfig+0x8a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a29      	ldr	r2, [pc, #164]	; (8004e70 <TIM_Base_SetConfig+0x10c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00f      	beq.n	8004dee <TIM_Base_SetConfig+0x8a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a28      	ldr	r2, [pc, #160]	; (8004e74 <TIM_Base_SetConfig+0x110>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <TIM_Base_SetConfig+0x8a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a27      	ldr	r2, [pc, #156]	; (8004e78 <TIM_Base_SetConfig+0x114>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d007      	beq.n	8004dee <TIM_Base_SetConfig+0x8a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a26      	ldr	r2, [pc, #152]	; (8004e7c <TIM_Base_SetConfig+0x118>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d003      	beq.n	8004dee <TIM_Base_SetConfig+0x8a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a25      	ldr	r2, [pc, #148]	; (8004e80 <TIM_Base_SetConfig+0x11c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d108      	bne.n	8004e00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a10      	ldr	r2, [pc, #64]	; (8004e68 <TIM_Base_SetConfig+0x104>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00f      	beq.n	8004e4c <TIM_Base_SetConfig+0xe8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a11      	ldr	r2, [pc, #68]	; (8004e74 <TIM_Base_SetConfig+0x110>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00b      	beq.n	8004e4c <TIM_Base_SetConfig+0xe8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a10      	ldr	r2, [pc, #64]	; (8004e78 <TIM_Base_SetConfig+0x114>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d007      	beq.n	8004e4c <TIM_Base_SetConfig+0xe8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a0f      	ldr	r2, [pc, #60]	; (8004e7c <TIM_Base_SetConfig+0x118>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d003      	beq.n	8004e4c <TIM_Base_SetConfig+0xe8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a0e      	ldr	r2, [pc, #56]	; (8004e80 <TIM_Base_SetConfig+0x11c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d103      	bne.n	8004e54 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	615a      	str	r2, [r3, #20]
}
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40012c00 	.word	0x40012c00
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40013400 	.word	0x40013400
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800

08004e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f023 0201 	bic.w	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0303 	bic.w	r3, r3, #3
 8004ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f023 0302 	bic.w	r3, r3, #2
 8004ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a2c      	ldr	r2, [pc, #176]	; (8004f90 <TIM_OC1_SetConfig+0x10c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00f      	beq.n	8004f04 <TIM_OC1_SetConfig+0x80>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a2b      	ldr	r2, [pc, #172]	; (8004f94 <TIM_OC1_SetConfig+0x110>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00b      	beq.n	8004f04 <TIM_OC1_SetConfig+0x80>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a2a      	ldr	r2, [pc, #168]	; (8004f98 <TIM_OC1_SetConfig+0x114>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d007      	beq.n	8004f04 <TIM_OC1_SetConfig+0x80>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a29      	ldr	r2, [pc, #164]	; (8004f9c <TIM_OC1_SetConfig+0x118>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d003      	beq.n	8004f04 <TIM_OC1_SetConfig+0x80>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a28      	ldr	r2, [pc, #160]	; (8004fa0 <TIM_OC1_SetConfig+0x11c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d10c      	bne.n	8004f1e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f023 0308 	bic.w	r3, r3, #8
 8004f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f023 0304 	bic.w	r3, r3, #4
 8004f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a1b      	ldr	r2, [pc, #108]	; (8004f90 <TIM_OC1_SetConfig+0x10c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00f      	beq.n	8004f46 <TIM_OC1_SetConfig+0xc2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a1a      	ldr	r2, [pc, #104]	; (8004f94 <TIM_OC1_SetConfig+0x110>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00b      	beq.n	8004f46 <TIM_OC1_SetConfig+0xc2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a19      	ldr	r2, [pc, #100]	; (8004f98 <TIM_OC1_SetConfig+0x114>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d007      	beq.n	8004f46 <TIM_OC1_SetConfig+0xc2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a18      	ldr	r2, [pc, #96]	; (8004f9c <TIM_OC1_SetConfig+0x118>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d003      	beq.n	8004f46 <TIM_OC1_SetConfig+0xc2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a17      	ldr	r2, [pc, #92]	; (8004fa0 <TIM_OC1_SetConfig+0x11c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d111      	bne.n	8004f6a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	621a      	str	r2, [r3, #32]
}
 8004f84:	bf00      	nop
 8004f86:	371c      	adds	r7, #28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40013400 	.word	0x40013400
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	40014400 	.word	0x40014400
 8004fa0:	40014800 	.word	0x40014800

08004fa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f023 0210 	bic.w	r2, r3, #16
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 0320 	bic.w	r3, r3, #32
 8004ff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a28      	ldr	r2, [pc, #160]	; (80050a4 <TIM_OC2_SetConfig+0x100>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_OC2_SetConfig+0x6c>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a27      	ldr	r2, [pc, #156]	; (80050a8 <TIM_OC2_SetConfig+0x104>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10d      	bne.n	800502c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800502a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <TIM_OC2_SetConfig+0x100>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00f      	beq.n	8005054 <TIM_OC2_SetConfig+0xb0>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <TIM_OC2_SetConfig+0x104>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00b      	beq.n	8005054 <TIM_OC2_SetConfig+0xb0>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a1b      	ldr	r2, [pc, #108]	; (80050ac <TIM_OC2_SetConfig+0x108>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d007      	beq.n	8005054 <TIM_OC2_SetConfig+0xb0>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a1a      	ldr	r2, [pc, #104]	; (80050b0 <TIM_OC2_SetConfig+0x10c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d003      	beq.n	8005054 <TIM_OC2_SetConfig+0xb0>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a19      	ldr	r2, [pc, #100]	; (80050b4 <TIM_OC2_SetConfig+0x110>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d113      	bne.n	800507c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800505a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005062:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	621a      	str	r2, [r3, #32]
}
 8005096:	bf00      	nop
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40013400 	.word	0x40013400
 80050ac:	40014000 	.word	0x40014000
 80050b0:	40014400 	.word	0x40014400
 80050b4:	40014800 	.word	0x40014800

080050b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a27      	ldr	r2, [pc, #156]	; (80051b4 <TIM_OC3_SetConfig+0xfc>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d003      	beq.n	8005122 <TIM_OC3_SetConfig+0x6a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a26      	ldr	r2, [pc, #152]	; (80051b8 <TIM_OC3_SetConfig+0x100>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d10d      	bne.n	800513e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800513c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a1c      	ldr	r2, [pc, #112]	; (80051b4 <TIM_OC3_SetConfig+0xfc>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00f      	beq.n	8005166 <TIM_OC3_SetConfig+0xae>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1b      	ldr	r2, [pc, #108]	; (80051b8 <TIM_OC3_SetConfig+0x100>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00b      	beq.n	8005166 <TIM_OC3_SetConfig+0xae>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a1a      	ldr	r2, [pc, #104]	; (80051bc <TIM_OC3_SetConfig+0x104>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d007      	beq.n	8005166 <TIM_OC3_SetConfig+0xae>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <TIM_OC3_SetConfig+0x108>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <TIM_OC3_SetConfig+0xae>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a18      	ldr	r2, [pc, #96]	; (80051c4 <TIM_OC3_SetConfig+0x10c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d113      	bne.n	800518e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800516c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	621a      	str	r2, [r3, #32]
}
 80051a8:	bf00      	nop
 80051aa:	371c      	adds	r7, #28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	40012c00 	.word	0x40012c00
 80051b8:	40013400 	.word	0x40013400
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40014400 	.word	0x40014400
 80051c4:	40014800 	.word	0x40014800

080051c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	031b      	lsls	r3, r3, #12
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a18      	ldr	r2, [pc, #96]	; (8005288 <TIM_OC4_SetConfig+0xc0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00f      	beq.n	800524c <TIM_OC4_SetConfig+0x84>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a17      	ldr	r2, [pc, #92]	; (800528c <TIM_OC4_SetConfig+0xc4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00b      	beq.n	800524c <TIM_OC4_SetConfig+0x84>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a16      	ldr	r2, [pc, #88]	; (8005290 <TIM_OC4_SetConfig+0xc8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d007      	beq.n	800524c <TIM_OC4_SetConfig+0x84>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a15      	ldr	r2, [pc, #84]	; (8005294 <TIM_OC4_SetConfig+0xcc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d003      	beq.n	800524c <TIM_OC4_SetConfig+0x84>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a14      	ldr	r2, [pc, #80]	; (8005298 <TIM_OC4_SetConfig+0xd0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d109      	bne.n	8005260 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005252:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	019b      	lsls	r3, r3, #6
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40012c00 	.word	0x40012c00
 800528c:	40013400 	.word	0x40013400
 8005290:	40014000 	.word	0x40014000
 8005294:	40014400 	.word	0x40014400
 8005298:	40014800 	.word	0x40014800

0800529c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	041b      	lsls	r3, r3, #16
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a17      	ldr	r2, [pc, #92]	; (8005350 <TIM_OC5_SetConfig+0xb4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00f      	beq.n	8005316 <TIM_OC5_SetConfig+0x7a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a16      	ldr	r2, [pc, #88]	; (8005354 <TIM_OC5_SetConfig+0xb8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00b      	beq.n	8005316 <TIM_OC5_SetConfig+0x7a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a15      	ldr	r2, [pc, #84]	; (8005358 <TIM_OC5_SetConfig+0xbc>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d007      	beq.n	8005316 <TIM_OC5_SetConfig+0x7a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a14      	ldr	r2, [pc, #80]	; (800535c <TIM_OC5_SetConfig+0xc0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d003      	beq.n	8005316 <TIM_OC5_SetConfig+0x7a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a13      	ldr	r2, [pc, #76]	; (8005360 <TIM_OC5_SetConfig+0xc4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d109      	bne.n	800532a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	621a      	str	r2, [r3, #32]
}
 8005344:	bf00      	nop
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	40012c00 	.word	0x40012c00
 8005354:	40013400 	.word	0x40013400
 8005358:	40014000 	.word	0x40014000
 800535c:	40014400 	.word	0x40014400
 8005360:	40014800 	.word	0x40014800

08005364 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	021b      	lsls	r3, r3, #8
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	051b      	lsls	r3, r3, #20
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a18      	ldr	r2, [pc, #96]	; (800541c <TIM_OC6_SetConfig+0xb8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00f      	beq.n	80053e0 <TIM_OC6_SetConfig+0x7c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a17      	ldr	r2, [pc, #92]	; (8005420 <TIM_OC6_SetConfig+0xbc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00b      	beq.n	80053e0 <TIM_OC6_SetConfig+0x7c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a16      	ldr	r2, [pc, #88]	; (8005424 <TIM_OC6_SetConfig+0xc0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d007      	beq.n	80053e0 <TIM_OC6_SetConfig+0x7c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a15      	ldr	r2, [pc, #84]	; (8005428 <TIM_OC6_SetConfig+0xc4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d003      	beq.n	80053e0 <TIM_OC6_SetConfig+0x7c>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a14      	ldr	r2, [pc, #80]	; (800542c <TIM_OC6_SetConfig+0xc8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d109      	bne.n	80053f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	029b      	lsls	r3, r3, #10
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	621a      	str	r2, [r3, #32]
}
 800540e:	bf00      	nop
 8005410:	371c      	adds	r7, #28
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	40012c00 	.word	0x40012c00
 8005420:	40013400 	.word	0x40013400
 8005424:	40014000 	.word	0x40014000
 8005428:	40014400 	.word	0x40014400
 800542c:	40014800 	.word	0x40014800

08005430 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f023 0201 	bic.w	r2, r3, #1
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800545a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f023 030a 	bic.w	r3, r3, #10
 800546c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	621a      	str	r2, [r3, #32]
}
 8005482:	bf00      	nop
 8005484:	371c      	adds	r7, #28
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800548e:	b480      	push	{r7}
 8005490:	b087      	sub	sp, #28
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f023 0210 	bic.w	r2, r3, #16
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	031b      	lsls	r3, r3, #12
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	621a      	str	r2, [r3, #32]
}
 80054e2:	bf00      	nop
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b085      	sub	sp, #20
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4313      	orrs	r3, r2
 800550c:	f043 0307 	orr.w	r3, r3, #7
 8005510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	609a      	str	r2, [r3, #8]
}
 8005518:	bf00      	nop
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800553e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	021a      	lsls	r2, r3, #8
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	431a      	orrs	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4313      	orrs	r3, r2
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	609a      	str	r2, [r3, #8]
}
 8005558:	bf00      	nop
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005578:	2302      	movs	r3, #2
 800557a:	e063      	b.n	8005644 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a2b      	ldr	r2, [pc, #172]	; (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d004      	beq.n	80055b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a2a      	ldr	r2, [pc, #168]	; (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d108      	bne.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1b      	ldr	r2, [pc, #108]	; (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d018      	beq.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ee:	d013      	beq.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a18      	ldr	r2, [pc, #96]	; (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00e      	beq.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a17      	ldr	r2, [pc, #92]	; (800565c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d009      	beq.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a12      	ldr	r2, [pc, #72]	; (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d004      	beq.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a13      	ldr	r2, [pc, #76]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d10c      	bne.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800561e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	4313      	orrs	r3, r2
 8005628:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	40012c00 	.word	0x40012c00
 8005654:	40013400 	.word	0x40013400
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800
 8005660:	40014000 	.word	0x40014000

08005664 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800567c:	2302      	movs	r3, #2
 800567e:	e065      	b.n	800574c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	041b      	lsls	r3, r3, #16
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a16      	ldr	r2, [pc, #88]	; (8005758 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d004      	beq.n	800570e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a14      	ldr	r2, [pc, #80]	; (800575c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d115      	bne.n	800573a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	051b      	lsls	r3, r3, #20
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40013400 	.word	0x40013400

08005760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e040      	b.n	80057f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7fb fc6e 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2224      	movs	r2, #36	; 0x24
 800578c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0201 	bic.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f8c0 	bl	8005924 <UART_SetConfig>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e022      	b.n	80057f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fa86 	bl	8005cc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fb0d 	bl	8005e0c <UART_CheckIdleState>
 80057f2:	4603      	mov	r3, r0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08a      	sub	sp, #40	; 0x28
 8005800:	af02      	add	r7, sp, #8
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	603b      	str	r3, [r7, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005810:	2b20      	cmp	r3, #32
 8005812:	f040 8082 	bne.w	800591a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <HAL_UART_Transmit+0x26>
 800581c:	88fb      	ldrh	r3, [r7, #6]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e07a      	b.n	800591c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_UART_Transmit+0x38>
 8005830:	2302      	movs	r3, #2
 8005832:	e073      	b.n	800591c <HAL_UART_Transmit+0x120>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2221      	movs	r2, #33	; 0x21
 8005848:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800584a:	f7fb fd39 	bl	80012c0 <HAL_GetTick>
 800584e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	88fa      	ldrh	r2, [r7, #6]
 8005854:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	88fa      	ldrh	r2, [r7, #6]
 800585c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005868:	d108      	bne.n	800587c <HAL_UART_Transmit+0x80>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d104      	bne.n	800587c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005872:	2300      	movs	r3, #0
 8005874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	e003      	b.n	8005884 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005880:	2300      	movs	r3, #0
 8005882:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800588c:	e02d      	b.n	80058ea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2200      	movs	r2, #0
 8005896:	2180      	movs	r1, #128	; 0x80
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 fb00 	bl	8005e9e <UART_WaitOnFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e039      	b.n	800591c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10b      	bne.n	80058c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	881a      	ldrh	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058ba:	b292      	uxth	r2, r2
 80058bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	3302      	adds	r3, #2
 80058c2:	61bb      	str	r3, [r7, #24]
 80058c4:	e008      	b.n	80058d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	781a      	ldrb	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	b292      	uxth	r2, r2
 80058d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	3301      	adds	r3, #1
 80058d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1cb      	bne.n	800588e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2200      	movs	r2, #0
 80058fe:	2140      	movs	r1, #64	; 0x40
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 facc 	bl	8005e9e <UART_WaitOnFlagUntilTimeout>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e005      	b.n	800591c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	e000      	b.n	800591c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800591a:	2302      	movs	r3, #2
  }
}
 800591c:	4618      	mov	r0, r3
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005952:	f023 030c 	bic.w	r3, r3, #12
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	6979      	ldr	r1, [r7, #20]
 800595c:	430b      	orrs	r3, r1
 800595e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	430a      	orrs	r2, r1
 8005998:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4aad      	ldr	r2, [pc, #692]	; (8005c54 <UART_SetConfig+0x330>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d121      	bne.n	80059e8 <UART_SetConfig+0xc4>
 80059a4:	4bac      	ldr	r3, [pc, #688]	; (8005c58 <UART_SetConfig+0x334>)
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	f003 0303 	and.w	r3, r3, #3
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d817      	bhi.n	80059e0 <UART_SetConfig+0xbc>
 80059b0:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <UART_SetConfig+0x94>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	080059c9 	.word	0x080059c9
 80059bc:	080059d5 	.word	0x080059d5
 80059c0:	080059db 	.word	0x080059db
 80059c4:	080059cf 	.word	0x080059cf
 80059c8:	2301      	movs	r3, #1
 80059ca:	77fb      	strb	r3, [r7, #31]
 80059cc:	e0b2      	b.n	8005b34 <UART_SetConfig+0x210>
 80059ce:	2302      	movs	r3, #2
 80059d0:	77fb      	strb	r3, [r7, #31]
 80059d2:	e0af      	b.n	8005b34 <UART_SetConfig+0x210>
 80059d4:	2304      	movs	r3, #4
 80059d6:	77fb      	strb	r3, [r7, #31]
 80059d8:	e0ac      	b.n	8005b34 <UART_SetConfig+0x210>
 80059da:	2308      	movs	r3, #8
 80059dc:	77fb      	strb	r3, [r7, #31]
 80059de:	e0a9      	b.n	8005b34 <UART_SetConfig+0x210>
 80059e0:	2310      	movs	r3, #16
 80059e2:	77fb      	strb	r3, [r7, #31]
 80059e4:	bf00      	nop
 80059e6:	e0a5      	b.n	8005b34 <UART_SetConfig+0x210>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a9b      	ldr	r2, [pc, #620]	; (8005c5c <UART_SetConfig+0x338>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d123      	bne.n	8005a3a <UART_SetConfig+0x116>
 80059f2:	4b99      	ldr	r3, [pc, #612]	; (8005c58 <UART_SetConfig+0x334>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059fe:	d012      	beq.n	8005a26 <UART_SetConfig+0x102>
 8005a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a04:	d802      	bhi.n	8005a0c <UART_SetConfig+0xe8>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <UART_SetConfig+0xf6>
 8005a0a:	e012      	b.n	8005a32 <UART_SetConfig+0x10e>
 8005a0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a10:	d00c      	beq.n	8005a2c <UART_SetConfig+0x108>
 8005a12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a16:	d003      	beq.n	8005a20 <UART_SetConfig+0xfc>
 8005a18:	e00b      	b.n	8005a32 <UART_SetConfig+0x10e>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e089      	b.n	8005b34 <UART_SetConfig+0x210>
 8005a20:	2302      	movs	r3, #2
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e086      	b.n	8005b34 <UART_SetConfig+0x210>
 8005a26:	2304      	movs	r3, #4
 8005a28:	77fb      	strb	r3, [r7, #31]
 8005a2a:	e083      	b.n	8005b34 <UART_SetConfig+0x210>
 8005a2c:	2308      	movs	r3, #8
 8005a2e:	77fb      	strb	r3, [r7, #31]
 8005a30:	e080      	b.n	8005b34 <UART_SetConfig+0x210>
 8005a32:	2310      	movs	r3, #16
 8005a34:	77fb      	strb	r3, [r7, #31]
 8005a36:	bf00      	nop
 8005a38:	e07c      	b.n	8005b34 <UART_SetConfig+0x210>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a88      	ldr	r2, [pc, #544]	; (8005c60 <UART_SetConfig+0x33c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d123      	bne.n	8005a8c <UART_SetConfig+0x168>
 8005a44:	4b84      	ldr	r3, [pc, #528]	; (8005c58 <UART_SetConfig+0x334>)
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005a4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a50:	d012      	beq.n	8005a78 <UART_SetConfig+0x154>
 8005a52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a56:	d802      	bhi.n	8005a5e <UART_SetConfig+0x13a>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d007      	beq.n	8005a6c <UART_SetConfig+0x148>
 8005a5c:	e012      	b.n	8005a84 <UART_SetConfig+0x160>
 8005a5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a62:	d00c      	beq.n	8005a7e <UART_SetConfig+0x15a>
 8005a64:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005a68:	d003      	beq.n	8005a72 <UART_SetConfig+0x14e>
 8005a6a:	e00b      	b.n	8005a84 <UART_SetConfig+0x160>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	77fb      	strb	r3, [r7, #31]
 8005a70:	e060      	b.n	8005b34 <UART_SetConfig+0x210>
 8005a72:	2302      	movs	r3, #2
 8005a74:	77fb      	strb	r3, [r7, #31]
 8005a76:	e05d      	b.n	8005b34 <UART_SetConfig+0x210>
 8005a78:	2304      	movs	r3, #4
 8005a7a:	77fb      	strb	r3, [r7, #31]
 8005a7c:	e05a      	b.n	8005b34 <UART_SetConfig+0x210>
 8005a7e:	2308      	movs	r3, #8
 8005a80:	77fb      	strb	r3, [r7, #31]
 8005a82:	e057      	b.n	8005b34 <UART_SetConfig+0x210>
 8005a84:	2310      	movs	r3, #16
 8005a86:	77fb      	strb	r3, [r7, #31]
 8005a88:	bf00      	nop
 8005a8a:	e053      	b.n	8005b34 <UART_SetConfig+0x210>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a74      	ldr	r2, [pc, #464]	; (8005c64 <UART_SetConfig+0x340>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d123      	bne.n	8005ade <UART_SetConfig+0x1ba>
 8005a96:	4b70      	ldr	r3, [pc, #448]	; (8005c58 <UART_SetConfig+0x334>)
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aa2:	d012      	beq.n	8005aca <UART_SetConfig+0x1a6>
 8005aa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aa8:	d802      	bhi.n	8005ab0 <UART_SetConfig+0x18c>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d007      	beq.n	8005abe <UART_SetConfig+0x19a>
 8005aae:	e012      	b.n	8005ad6 <UART_SetConfig+0x1b2>
 8005ab0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ab4:	d00c      	beq.n	8005ad0 <UART_SetConfig+0x1ac>
 8005ab6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005aba:	d003      	beq.n	8005ac4 <UART_SetConfig+0x1a0>
 8005abc:	e00b      	b.n	8005ad6 <UART_SetConfig+0x1b2>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	77fb      	strb	r3, [r7, #31]
 8005ac2:	e037      	b.n	8005b34 <UART_SetConfig+0x210>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	77fb      	strb	r3, [r7, #31]
 8005ac8:	e034      	b.n	8005b34 <UART_SetConfig+0x210>
 8005aca:	2304      	movs	r3, #4
 8005acc:	77fb      	strb	r3, [r7, #31]
 8005ace:	e031      	b.n	8005b34 <UART_SetConfig+0x210>
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	77fb      	strb	r3, [r7, #31]
 8005ad4:	e02e      	b.n	8005b34 <UART_SetConfig+0x210>
 8005ad6:	2310      	movs	r3, #16
 8005ad8:	77fb      	strb	r3, [r7, #31]
 8005ada:	bf00      	nop
 8005adc:	e02a      	b.n	8005b34 <UART_SetConfig+0x210>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a61      	ldr	r2, [pc, #388]	; (8005c68 <UART_SetConfig+0x344>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d123      	bne.n	8005b30 <UART_SetConfig+0x20c>
 8005ae8:	4b5b      	ldr	r3, [pc, #364]	; (8005c58 <UART_SetConfig+0x334>)
 8005aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005af4:	d012      	beq.n	8005b1c <UART_SetConfig+0x1f8>
 8005af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005afa:	d802      	bhi.n	8005b02 <UART_SetConfig+0x1de>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d007      	beq.n	8005b10 <UART_SetConfig+0x1ec>
 8005b00:	e012      	b.n	8005b28 <UART_SetConfig+0x204>
 8005b02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b06:	d00c      	beq.n	8005b22 <UART_SetConfig+0x1fe>
 8005b08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b0c:	d003      	beq.n	8005b16 <UART_SetConfig+0x1f2>
 8005b0e:	e00b      	b.n	8005b28 <UART_SetConfig+0x204>
 8005b10:	2300      	movs	r3, #0
 8005b12:	77fb      	strb	r3, [r7, #31]
 8005b14:	e00e      	b.n	8005b34 <UART_SetConfig+0x210>
 8005b16:	2302      	movs	r3, #2
 8005b18:	77fb      	strb	r3, [r7, #31]
 8005b1a:	e00b      	b.n	8005b34 <UART_SetConfig+0x210>
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	77fb      	strb	r3, [r7, #31]
 8005b20:	e008      	b.n	8005b34 <UART_SetConfig+0x210>
 8005b22:	2308      	movs	r3, #8
 8005b24:	77fb      	strb	r3, [r7, #31]
 8005b26:	e005      	b.n	8005b34 <UART_SetConfig+0x210>
 8005b28:	2310      	movs	r3, #16
 8005b2a:	77fb      	strb	r3, [r7, #31]
 8005b2c:	bf00      	nop
 8005b2e:	e001      	b.n	8005b34 <UART_SetConfig+0x210>
 8005b30:	2310      	movs	r3, #16
 8005b32:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b3c:	d15d      	bne.n	8005bfa <UART_SetConfig+0x2d6>
  {
    switch (clocksource)
 8005b3e:	7ffb      	ldrb	r3, [r7, #31]
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d828      	bhi.n	8005b96 <UART_SetConfig+0x272>
 8005b44:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <UART_SetConfig+0x228>)
 8005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4a:	bf00      	nop
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005b79 	.word	0x08005b79
 8005b54:	08005b81 	.word	0x08005b81
 8005b58:	08005b97 	.word	0x08005b97
 8005b5c:	08005b87 	.word	0x08005b87
 8005b60:	08005b97 	.word	0x08005b97
 8005b64:	08005b97 	.word	0x08005b97
 8005b68:	08005b97 	.word	0x08005b97
 8005b6c:	08005b8f 	.word	0x08005b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b70:	f7fd ff90 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 8005b74:	61b8      	str	r0, [r7, #24]
        break;
 8005b76:	e013      	b.n	8005ba0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b78:	f7fd ffae 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
 8005b7c:	61b8      	str	r0, [r7, #24]
        break;
 8005b7e:	e00f      	b.n	8005ba0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b80:	4b3a      	ldr	r3, [pc, #232]	; (8005c6c <UART_SetConfig+0x348>)
 8005b82:	61bb      	str	r3, [r7, #24]
        break;
 8005b84:	e00c      	b.n	8005ba0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b86:	f7fd ff0d 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8005b8a:	61b8      	str	r0, [r7, #24]
        break;
 8005b8c:	e008      	b.n	8005ba0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b92:	61bb      	str	r3, [r7, #24]
        break;
 8005b94:	e004      	b.n	8005ba0 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	77bb      	strb	r3, [r7, #30]
        break;
 8005b9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 8085 	beq.w	8005cb2 <UART_SetConfig+0x38e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	005a      	lsls	r2, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	441a      	add	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2b0f      	cmp	r3, #15
 8005bc4:	d916      	bls.n	8005bf4 <UART_SetConfig+0x2d0>
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bcc:	d212      	bcs.n	8005bf4 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	f023 030f 	bic.w	r3, r3, #15
 8005bd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	085b      	lsrs	r3, r3, #1
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	89fb      	ldrh	r3, [r7, #14]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	89fa      	ldrh	r2, [r7, #14]
 8005bf0:	60da      	str	r2, [r3, #12]
 8005bf2:	e05e      	b.n	8005cb2 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	77bb      	strb	r3, [r7, #30]
 8005bf8:	e05b      	b.n	8005cb2 <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bfa:	7ffb      	ldrb	r3, [r7, #31]
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d837      	bhi.n	8005c70 <UART_SetConfig+0x34c>
 8005c00:	a201      	add	r2, pc, #4	; (adr r2, 8005c08 <UART_SetConfig+0x2e4>)
 8005c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c06:	bf00      	nop
 8005c08:	08005c2d 	.word	0x08005c2d
 8005c0c:	08005c35 	.word	0x08005c35
 8005c10:	08005c3d 	.word	0x08005c3d
 8005c14:	08005c71 	.word	0x08005c71
 8005c18:	08005c43 	.word	0x08005c43
 8005c1c:	08005c71 	.word	0x08005c71
 8005c20:	08005c71 	.word	0x08005c71
 8005c24:	08005c71 	.word	0x08005c71
 8005c28:	08005c4b 	.word	0x08005c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c2c:	f7fd ff32 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 8005c30:	61b8      	str	r0, [r7, #24]
        break;
 8005c32:	e022      	b.n	8005c7a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c34:	f7fd ff50 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
 8005c38:	61b8      	str	r0, [r7, #24]
        break;
 8005c3a:	e01e      	b.n	8005c7a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c3c:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <UART_SetConfig+0x348>)
 8005c3e:	61bb      	str	r3, [r7, #24]
        break;
 8005c40:	e01b      	b.n	8005c7a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c42:	f7fd feaf 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8005c46:	61b8      	str	r0, [r7, #24]
        break;
 8005c48:	e017      	b.n	8005c7a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c4e:	61bb      	str	r3, [r7, #24]
        break;
 8005c50:	e013      	b.n	8005c7a <UART_SetConfig+0x356>
 8005c52:	bf00      	nop
 8005c54:	40013800 	.word	0x40013800
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	40004400 	.word	0x40004400
 8005c60:	40004800 	.word	0x40004800
 8005c64:	40004c00 	.word	0x40004c00
 8005c68:	40005000 	.word	0x40005000
 8005c6c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	77bb      	strb	r3, [r7, #30]
        break;
 8005c78:	bf00      	nop
    }

    if (pclk != 0U)
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d018      	beq.n	8005cb2 <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	085a      	lsrs	r2, r3, #1
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	441a      	add	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b0f      	cmp	r3, #15
 8005c9a:	d908      	bls.n	8005cae <UART_SetConfig+0x38a>
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca2:	d204      	bcs.n	8005cae <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = usartdiv;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	60da      	str	r2, [r3, #12]
 8005cac:	e001      	b.n	8005cb2 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005cbe:	7fbb      	ldrb	r3, [r7, #30]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3720      	adds	r7, #32
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00a      	beq.n	8005d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	f003 0310 	and.w	r3, r3, #16
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	f003 0320 	and.w	r3, r3, #32
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00a      	beq.n	8005d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01a      	beq.n	8005dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dc6:	d10a      	bne.n	8005dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	605a      	str	r2, [r3, #4]
  }
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af02      	add	r7, sp, #8
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e1c:	f7fb fa50 	bl	80012c0 <HAL_GetTick>
 8005e20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0308 	and.w	r3, r3, #8
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d10e      	bne.n	8005e4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f82d 	bl	8005e9e <UART_WaitOnFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e023      	b.n	8005e96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d10e      	bne.n	8005e7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f817 	bl	8005e9e <UART_WaitOnFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e00d      	b.n	8005e96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	603b      	str	r3, [r7, #0]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eae:	e05e      	b.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb6:	d05a      	beq.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb8:	f7fb fa02 	bl	80012c0 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d302      	bcc.n	8005ece <UART_WaitOnFlagUntilTimeout+0x30>
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d11b      	bne.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005edc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0201 	bic.w	r2, r2, #1
 8005eec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e043      	b.n	8005f8e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d02c      	beq.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f22:	d124      	bne.n	8005f6e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f3c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0201 	bic.w	r2, r2, #1
 8005f4c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2220      	movs	r2, #32
 8005f52:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2220      	movs	r2, #32
 8005f58:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e00f      	b.n	8005f8e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4013      	ands	r3, r2
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	bf0c      	ite	eq
 8005f7e:	2301      	moveq	r3, #1
 8005f80:	2300      	movne	r3, #0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d091      	beq.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b085      	sub	sp, #20
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f9e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005fa2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005fcc:	b084      	sub	sp, #16
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	f107 0014 	add.w	r0, r7, #20
 8005fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	b004      	add	sp, #16
 800600c:	4770      	bx	lr
	...

08006010 <__errno>:
 8006010:	4b01      	ldr	r3, [pc, #4]	; (8006018 <__errno+0x8>)
 8006012:	6818      	ldr	r0, [r3, #0]
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	2000000c 	.word	0x2000000c

0800601c <__libc_init_array>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	4e0d      	ldr	r6, [pc, #52]	; (8006054 <__libc_init_array+0x38>)
 8006020:	4c0d      	ldr	r4, [pc, #52]	; (8006058 <__libc_init_array+0x3c>)
 8006022:	1ba4      	subs	r4, r4, r6
 8006024:	10a4      	asrs	r4, r4, #2
 8006026:	2500      	movs	r5, #0
 8006028:	42a5      	cmp	r5, r4
 800602a:	d109      	bne.n	8006040 <__libc_init_array+0x24>
 800602c:	4e0b      	ldr	r6, [pc, #44]	; (800605c <__libc_init_array+0x40>)
 800602e:	4c0c      	ldr	r4, [pc, #48]	; (8006060 <__libc_init_array+0x44>)
 8006030:	f000 fc26 	bl	8006880 <_init>
 8006034:	1ba4      	subs	r4, r4, r6
 8006036:	10a4      	asrs	r4, r4, #2
 8006038:	2500      	movs	r5, #0
 800603a:	42a5      	cmp	r5, r4
 800603c:	d105      	bne.n	800604a <__libc_init_array+0x2e>
 800603e:	bd70      	pop	{r4, r5, r6, pc}
 8006040:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006044:	4798      	blx	r3
 8006046:	3501      	adds	r5, #1
 8006048:	e7ee      	b.n	8006028 <__libc_init_array+0xc>
 800604a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800604e:	4798      	blx	r3
 8006050:	3501      	adds	r5, #1
 8006052:	e7f2      	b.n	800603a <__libc_init_array+0x1e>
 8006054:	08006934 	.word	0x08006934
 8006058:	08006934 	.word	0x08006934
 800605c:	08006934 	.word	0x08006934
 8006060:	08006938 	.word	0x08006938

08006064 <memset>:
 8006064:	4402      	add	r2, r0
 8006066:	4603      	mov	r3, r0
 8006068:	4293      	cmp	r3, r2
 800606a:	d100      	bne.n	800606e <memset+0xa>
 800606c:	4770      	bx	lr
 800606e:	f803 1b01 	strb.w	r1, [r3], #1
 8006072:	e7f9      	b.n	8006068 <memset+0x4>

08006074 <siprintf>:
 8006074:	b40e      	push	{r1, r2, r3}
 8006076:	b500      	push	{lr}
 8006078:	b09c      	sub	sp, #112	; 0x70
 800607a:	ab1d      	add	r3, sp, #116	; 0x74
 800607c:	9002      	str	r0, [sp, #8]
 800607e:	9006      	str	r0, [sp, #24]
 8006080:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006084:	4809      	ldr	r0, [pc, #36]	; (80060ac <siprintf+0x38>)
 8006086:	9107      	str	r1, [sp, #28]
 8006088:	9104      	str	r1, [sp, #16]
 800608a:	4909      	ldr	r1, [pc, #36]	; (80060b0 <siprintf+0x3c>)
 800608c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006090:	9105      	str	r1, [sp, #20]
 8006092:	6800      	ldr	r0, [r0, #0]
 8006094:	9301      	str	r3, [sp, #4]
 8006096:	a902      	add	r1, sp, #8
 8006098:	f000 f866 	bl	8006168 <_svfiprintf_r>
 800609c:	9b02      	ldr	r3, [sp, #8]
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	b01c      	add	sp, #112	; 0x70
 80060a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060a8:	b003      	add	sp, #12
 80060aa:	4770      	bx	lr
 80060ac:	2000000c 	.word	0x2000000c
 80060b0:	ffff0208 	.word	0xffff0208

080060b4 <__ssputs_r>:
 80060b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b8:	688e      	ldr	r6, [r1, #8]
 80060ba:	429e      	cmp	r6, r3
 80060bc:	4682      	mov	sl, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	4690      	mov	r8, r2
 80060c2:	4699      	mov	r9, r3
 80060c4:	d837      	bhi.n	8006136 <__ssputs_r+0x82>
 80060c6:	898a      	ldrh	r2, [r1, #12]
 80060c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060cc:	d031      	beq.n	8006132 <__ssputs_r+0x7e>
 80060ce:	6825      	ldr	r5, [r4, #0]
 80060d0:	6909      	ldr	r1, [r1, #16]
 80060d2:	1a6f      	subs	r7, r5, r1
 80060d4:	6965      	ldr	r5, [r4, #20]
 80060d6:	2302      	movs	r3, #2
 80060d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80060e0:	f109 0301 	add.w	r3, r9, #1
 80060e4:	443b      	add	r3, r7
 80060e6:	429d      	cmp	r5, r3
 80060e8:	bf38      	it	cc
 80060ea:	461d      	movcc	r5, r3
 80060ec:	0553      	lsls	r3, r2, #21
 80060ee:	d530      	bpl.n	8006152 <__ssputs_r+0x9e>
 80060f0:	4629      	mov	r1, r5
 80060f2:	f000 fb2b 	bl	800674c <_malloc_r>
 80060f6:	4606      	mov	r6, r0
 80060f8:	b950      	cbnz	r0, 8006110 <__ssputs_r+0x5c>
 80060fa:	230c      	movs	r3, #12
 80060fc:	f8ca 3000 	str.w	r3, [sl]
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006106:	81a3      	strh	r3, [r4, #12]
 8006108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800610c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006110:	463a      	mov	r2, r7
 8006112:	6921      	ldr	r1, [r4, #16]
 8006114:	f000 faa8 	bl	8006668 <memcpy>
 8006118:	89a3      	ldrh	r3, [r4, #12]
 800611a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800611e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006122:	81a3      	strh	r3, [r4, #12]
 8006124:	6126      	str	r6, [r4, #16]
 8006126:	6165      	str	r5, [r4, #20]
 8006128:	443e      	add	r6, r7
 800612a:	1bed      	subs	r5, r5, r7
 800612c:	6026      	str	r6, [r4, #0]
 800612e:	60a5      	str	r5, [r4, #8]
 8006130:	464e      	mov	r6, r9
 8006132:	454e      	cmp	r6, r9
 8006134:	d900      	bls.n	8006138 <__ssputs_r+0x84>
 8006136:	464e      	mov	r6, r9
 8006138:	4632      	mov	r2, r6
 800613a:	4641      	mov	r1, r8
 800613c:	6820      	ldr	r0, [r4, #0]
 800613e:	f000 fa9e 	bl	800667e <memmove>
 8006142:	68a3      	ldr	r3, [r4, #8]
 8006144:	1b9b      	subs	r3, r3, r6
 8006146:	60a3      	str	r3, [r4, #8]
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	441e      	add	r6, r3
 800614c:	6026      	str	r6, [r4, #0]
 800614e:	2000      	movs	r0, #0
 8006150:	e7dc      	b.n	800610c <__ssputs_r+0x58>
 8006152:	462a      	mov	r2, r5
 8006154:	f000 fb54 	bl	8006800 <_realloc_r>
 8006158:	4606      	mov	r6, r0
 800615a:	2800      	cmp	r0, #0
 800615c:	d1e2      	bne.n	8006124 <__ssputs_r+0x70>
 800615e:	6921      	ldr	r1, [r4, #16]
 8006160:	4650      	mov	r0, sl
 8006162:	f000 faa5 	bl	80066b0 <_free_r>
 8006166:	e7c8      	b.n	80060fa <__ssputs_r+0x46>

08006168 <_svfiprintf_r>:
 8006168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	461d      	mov	r5, r3
 800616e:	898b      	ldrh	r3, [r1, #12]
 8006170:	061f      	lsls	r7, r3, #24
 8006172:	b09d      	sub	sp, #116	; 0x74
 8006174:	4680      	mov	r8, r0
 8006176:	460c      	mov	r4, r1
 8006178:	4616      	mov	r6, r2
 800617a:	d50f      	bpl.n	800619c <_svfiprintf_r+0x34>
 800617c:	690b      	ldr	r3, [r1, #16]
 800617e:	b96b      	cbnz	r3, 800619c <_svfiprintf_r+0x34>
 8006180:	2140      	movs	r1, #64	; 0x40
 8006182:	f000 fae3 	bl	800674c <_malloc_r>
 8006186:	6020      	str	r0, [r4, #0]
 8006188:	6120      	str	r0, [r4, #16]
 800618a:	b928      	cbnz	r0, 8006198 <_svfiprintf_r+0x30>
 800618c:	230c      	movs	r3, #12
 800618e:	f8c8 3000 	str.w	r3, [r8]
 8006192:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006196:	e0c8      	b.n	800632a <_svfiprintf_r+0x1c2>
 8006198:	2340      	movs	r3, #64	; 0x40
 800619a:	6163      	str	r3, [r4, #20]
 800619c:	2300      	movs	r3, #0
 800619e:	9309      	str	r3, [sp, #36]	; 0x24
 80061a0:	2320      	movs	r3, #32
 80061a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061a6:	2330      	movs	r3, #48	; 0x30
 80061a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061ac:	9503      	str	r5, [sp, #12]
 80061ae:	f04f 0b01 	mov.w	fp, #1
 80061b2:	4637      	mov	r7, r6
 80061b4:	463d      	mov	r5, r7
 80061b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061ba:	b10b      	cbz	r3, 80061c0 <_svfiprintf_r+0x58>
 80061bc:	2b25      	cmp	r3, #37	; 0x25
 80061be:	d13e      	bne.n	800623e <_svfiprintf_r+0xd6>
 80061c0:	ebb7 0a06 	subs.w	sl, r7, r6
 80061c4:	d00b      	beq.n	80061de <_svfiprintf_r+0x76>
 80061c6:	4653      	mov	r3, sl
 80061c8:	4632      	mov	r2, r6
 80061ca:	4621      	mov	r1, r4
 80061cc:	4640      	mov	r0, r8
 80061ce:	f7ff ff71 	bl	80060b4 <__ssputs_r>
 80061d2:	3001      	adds	r0, #1
 80061d4:	f000 80a4 	beq.w	8006320 <_svfiprintf_r+0x1b8>
 80061d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061da:	4453      	add	r3, sl
 80061dc:	9309      	str	r3, [sp, #36]	; 0x24
 80061de:	783b      	ldrb	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 809d 	beq.w	8006320 <_svfiprintf_r+0x1b8>
 80061e6:	2300      	movs	r3, #0
 80061e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061f0:	9304      	str	r3, [sp, #16]
 80061f2:	9307      	str	r3, [sp, #28]
 80061f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061f8:	931a      	str	r3, [sp, #104]	; 0x68
 80061fa:	462f      	mov	r7, r5
 80061fc:	2205      	movs	r2, #5
 80061fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006202:	4850      	ldr	r0, [pc, #320]	; (8006344 <_svfiprintf_r+0x1dc>)
 8006204:	f7f9 ffec 	bl	80001e0 <memchr>
 8006208:	9b04      	ldr	r3, [sp, #16]
 800620a:	b9d0      	cbnz	r0, 8006242 <_svfiprintf_r+0xda>
 800620c:	06d9      	lsls	r1, r3, #27
 800620e:	bf44      	itt	mi
 8006210:	2220      	movmi	r2, #32
 8006212:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006216:	071a      	lsls	r2, r3, #28
 8006218:	bf44      	itt	mi
 800621a:	222b      	movmi	r2, #43	; 0x2b
 800621c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006220:	782a      	ldrb	r2, [r5, #0]
 8006222:	2a2a      	cmp	r2, #42	; 0x2a
 8006224:	d015      	beq.n	8006252 <_svfiprintf_r+0xea>
 8006226:	9a07      	ldr	r2, [sp, #28]
 8006228:	462f      	mov	r7, r5
 800622a:	2000      	movs	r0, #0
 800622c:	250a      	movs	r5, #10
 800622e:	4639      	mov	r1, r7
 8006230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006234:	3b30      	subs	r3, #48	; 0x30
 8006236:	2b09      	cmp	r3, #9
 8006238:	d94d      	bls.n	80062d6 <_svfiprintf_r+0x16e>
 800623a:	b1b8      	cbz	r0, 800626c <_svfiprintf_r+0x104>
 800623c:	e00f      	b.n	800625e <_svfiprintf_r+0xf6>
 800623e:	462f      	mov	r7, r5
 8006240:	e7b8      	b.n	80061b4 <_svfiprintf_r+0x4c>
 8006242:	4a40      	ldr	r2, [pc, #256]	; (8006344 <_svfiprintf_r+0x1dc>)
 8006244:	1a80      	subs	r0, r0, r2
 8006246:	fa0b f000 	lsl.w	r0, fp, r0
 800624a:	4318      	orrs	r0, r3
 800624c:	9004      	str	r0, [sp, #16]
 800624e:	463d      	mov	r5, r7
 8006250:	e7d3      	b.n	80061fa <_svfiprintf_r+0x92>
 8006252:	9a03      	ldr	r2, [sp, #12]
 8006254:	1d11      	adds	r1, r2, #4
 8006256:	6812      	ldr	r2, [r2, #0]
 8006258:	9103      	str	r1, [sp, #12]
 800625a:	2a00      	cmp	r2, #0
 800625c:	db01      	blt.n	8006262 <_svfiprintf_r+0xfa>
 800625e:	9207      	str	r2, [sp, #28]
 8006260:	e004      	b.n	800626c <_svfiprintf_r+0x104>
 8006262:	4252      	negs	r2, r2
 8006264:	f043 0302 	orr.w	r3, r3, #2
 8006268:	9207      	str	r2, [sp, #28]
 800626a:	9304      	str	r3, [sp, #16]
 800626c:	783b      	ldrb	r3, [r7, #0]
 800626e:	2b2e      	cmp	r3, #46	; 0x2e
 8006270:	d10c      	bne.n	800628c <_svfiprintf_r+0x124>
 8006272:	787b      	ldrb	r3, [r7, #1]
 8006274:	2b2a      	cmp	r3, #42	; 0x2a
 8006276:	d133      	bne.n	80062e0 <_svfiprintf_r+0x178>
 8006278:	9b03      	ldr	r3, [sp, #12]
 800627a:	1d1a      	adds	r2, r3, #4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	9203      	str	r2, [sp, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	bfb8      	it	lt
 8006284:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006288:	3702      	adds	r7, #2
 800628a:	9305      	str	r3, [sp, #20]
 800628c:	4d2e      	ldr	r5, [pc, #184]	; (8006348 <_svfiprintf_r+0x1e0>)
 800628e:	7839      	ldrb	r1, [r7, #0]
 8006290:	2203      	movs	r2, #3
 8006292:	4628      	mov	r0, r5
 8006294:	f7f9 ffa4 	bl	80001e0 <memchr>
 8006298:	b138      	cbz	r0, 80062aa <_svfiprintf_r+0x142>
 800629a:	2340      	movs	r3, #64	; 0x40
 800629c:	1b40      	subs	r0, r0, r5
 800629e:	fa03 f000 	lsl.w	r0, r3, r0
 80062a2:	9b04      	ldr	r3, [sp, #16]
 80062a4:	4303      	orrs	r3, r0
 80062a6:	3701      	adds	r7, #1
 80062a8:	9304      	str	r3, [sp, #16]
 80062aa:	7839      	ldrb	r1, [r7, #0]
 80062ac:	4827      	ldr	r0, [pc, #156]	; (800634c <_svfiprintf_r+0x1e4>)
 80062ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062b2:	2206      	movs	r2, #6
 80062b4:	1c7e      	adds	r6, r7, #1
 80062b6:	f7f9 ff93 	bl	80001e0 <memchr>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d038      	beq.n	8006330 <_svfiprintf_r+0x1c8>
 80062be:	4b24      	ldr	r3, [pc, #144]	; (8006350 <_svfiprintf_r+0x1e8>)
 80062c0:	bb13      	cbnz	r3, 8006308 <_svfiprintf_r+0x1a0>
 80062c2:	9b03      	ldr	r3, [sp, #12]
 80062c4:	3307      	adds	r3, #7
 80062c6:	f023 0307 	bic.w	r3, r3, #7
 80062ca:	3308      	adds	r3, #8
 80062cc:	9303      	str	r3, [sp, #12]
 80062ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d0:	444b      	add	r3, r9
 80062d2:	9309      	str	r3, [sp, #36]	; 0x24
 80062d4:	e76d      	b.n	80061b2 <_svfiprintf_r+0x4a>
 80062d6:	fb05 3202 	mla	r2, r5, r2, r3
 80062da:	2001      	movs	r0, #1
 80062dc:	460f      	mov	r7, r1
 80062de:	e7a6      	b.n	800622e <_svfiprintf_r+0xc6>
 80062e0:	2300      	movs	r3, #0
 80062e2:	3701      	adds	r7, #1
 80062e4:	9305      	str	r3, [sp, #20]
 80062e6:	4619      	mov	r1, r3
 80062e8:	250a      	movs	r5, #10
 80062ea:	4638      	mov	r0, r7
 80062ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062f0:	3a30      	subs	r2, #48	; 0x30
 80062f2:	2a09      	cmp	r2, #9
 80062f4:	d903      	bls.n	80062fe <_svfiprintf_r+0x196>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0c8      	beq.n	800628c <_svfiprintf_r+0x124>
 80062fa:	9105      	str	r1, [sp, #20]
 80062fc:	e7c6      	b.n	800628c <_svfiprintf_r+0x124>
 80062fe:	fb05 2101 	mla	r1, r5, r1, r2
 8006302:	2301      	movs	r3, #1
 8006304:	4607      	mov	r7, r0
 8006306:	e7f0      	b.n	80062ea <_svfiprintf_r+0x182>
 8006308:	ab03      	add	r3, sp, #12
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	4622      	mov	r2, r4
 800630e:	4b11      	ldr	r3, [pc, #68]	; (8006354 <_svfiprintf_r+0x1ec>)
 8006310:	a904      	add	r1, sp, #16
 8006312:	4640      	mov	r0, r8
 8006314:	f3af 8000 	nop.w
 8006318:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800631c:	4681      	mov	r9, r0
 800631e:	d1d6      	bne.n	80062ce <_svfiprintf_r+0x166>
 8006320:	89a3      	ldrh	r3, [r4, #12]
 8006322:	065b      	lsls	r3, r3, #25
 8006324:	f53f af35 	bmi.w	8006192 <_svfiprintf_r+0x2a>
 8006328:	9809      	ldr	r0, [sp, #36]	; 0x24
 800632a:	b01d      	add	sp, #116	; 0x74
 800632c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006330:	ab03      	add	r3, sp, #12
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	4622      	mov	r2, r4
 8006336:	4b07      	ldr	r3, [pc, #28]	; (8006354 <_svfiprintf_r+0x1ec>)
 8006338:	a904      	add	r1, sp, #16
 800633a:	4640      	mov	r0, r8
 800633c:	f000 f882 	bl	8006444 <_printf_i>
 8006340:	e7ea      	b.n	8006318 <_svfiprintf_r+0x1b0>
 8006342:	bf00      	nop
 8006344:	08006900 	.word	0x08006900
 8006348:	08006906 	.word	0x08006906
 800634c:	0800690a 	.word	0x0800690a
 8006350:	00000000 	.word	0x00000000
 8006354:	080060b5 	.word	0x080060b5

08006358 <_printf_common>:
 8006358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800635c:	4691      	mov	r9, r2
 800635e:	461f      	mov	r7, r3
 8006360:	688a      	ldr	r2, [r1, #8]
 8006362:	690b      	ldr	r3, [r1, #16]
 8006364:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006368:	4293      	cmp	r3, r2
 800636a:	bfb8      	it	lt
 800636c:	4613      	movlt	r3, r2
 800636e:	f8c9 3000 	str.w	r3, [r9]
 8006372:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006376:	4606      	mov	r6, r0
 8006378:	460c      	mov	r4, r1
 800637a:	b112      	cbz	r2, 8006382 <_printf_common+0x2a>
 800637c:	3301      	adds	r3, #1
 800637e:	f8c9 3000 	str.w	r3, [r9]
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	0699      	lsls	r1, r3, #26
 8006386:	bf42      	ittt	mi
 8006388:	f8d9 3000 	ldrmi.w	r3, [r9]
 800638c:	3302      	addmi	r3, #2
 800638e:	f8c9 3000 	strmi.w	r3, [r9]
 8006392:	6825      	ldr	r5, [r4, #0]
 8006394:	f015 0506 	ands.w	r5, r5, #6
 8006398:	d107      	bne.n	80063aa <_printf_common+0x52>
 800639a:	f104 0a19 	add.w	sl, r4, #25
 800639e:	68e3      	ldr	r3, [r4, #12]
 80063a0:	f8d9 2000 	ldr.w	r2, [r9]
 80063a4:	1a9b      	subs	r3, r3, r2
 80063a6:	42ab      	cmp	r3, r5
 80063a8:	dc28      	bgt.n	80063fc <_printf_common+0xa4>
 80063aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80063ae:	6822      	ldr	r2, [r4, #0]
 80063b0:	3300      	adds	r3, #0
 80063b2:	bf18      	it	ne
 80063b4:	2301      	movne	r3, #1
 80063b6:	0692      	lsls	r2, r2, #26
 80063b8:	d42d      	bmi.n	8006416 <_printf_common+0xbe>
 80063ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063be:	4639      	mov	r1, r7
 80063c0:	4630      	mov	r0, r6
 80063c2:	47c0      	blx	r8
 80063c4:	3001      	adds	r0, #1
 80063c6:	d020      	beq.n	800640a <_printf_common+0xb2>
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	68e5      	ldr	r5, [r4, #12]
 80063cc:	f8d9 2000 	ldr.w	r2, [r9]
 80063d0:	f003 0306 	and.w	r3, r3, #6
 80063d4:	2b04      	cmp	r3, #4
 80063d6:	bf08      	it	eq
 80063d8:	1aad      	subeq	r5, r5, r2
 80063da:	68a3      	ldr	r3, [r4, #8]
 80063dc:	6922      	ldr	r2, [r4, #16]
 80063de:	bf0c      	ite	eq
 80063e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063e4:	2500      	movne	r5, #0
 80063e6:	4293      	cmp	r3, r2
 80063e8:	bfc4      	itt	gt
 80063ea:	1a9b      	subgt	r3, r3, r2
 80063ec:	18ed      	addgt	r5, r5, r3
 80063ee:	f04f 0900 	mov.w	r9, #0
 80063f2:	341a      	adds	r4, #26
 80063f4:	454d      	cmp	r5, r9
 80063f6:	d11a      	bne.n	800642e <_printf_common+0xd6>
 80063f8:	2000      	movs	r0, #0
 80063fa:	e008      	b.n	800640e <_printf_common+0xb6>
 80063fc:	2301      	movs	r3, #1
 80063fe:	4652      	mov	r2, sl
 8006400:	4639      	mov	r1, r7
 8006402:	4630      	mov	r0, r6
 8006404:	47c0      	blx	r8
 8006406:	3001      	adds	r0, #1
 8006408:	d103      	bne.n	8006412 <_printf_common+0xba>
 800640a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800640e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006412:	3501      	adds	r5, #1
 8006414:	e7c3      	b.n	800639e <_printf_common+0x46>
 8006416:	18e1      	adds	r1, r4, r3
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	2030      	movs	r0, #48	; 0x30
 800641c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006420:	4422      	add	r2, r4
 8006422:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006426:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800642a:	3302      	adds	r3, #2
 800642c:	e7c5      	b.n	80063ba <_printf_common+0x62>
 800642e:	2301      	movs	r3, #1
 8006430:	4622      	mov	r2, r4
 8006432:	4639      	mov	r1, r7
 8006434:	4630      	mov	r0, r6
 8006436:	47c0      	blx	r8
 8006438:	3001      	adds	r0, #1
 800643a:	d0e6      	beq.n	800640a <_printf_common+0xb2>
 800643c:	f109 0901 	add.w	r9, r9, #1
 8006440:	e7d8      	b.n	80063f4 <_printf_common+0x9c>
	...

08006444 <_printf_i>:
 8006444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006448:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800644c:	460c      	mov	r4, r1
 800644e:	7e09      	ldrb	r1, [r1, #24]
 8006450:	b085      	sub	sp, #20
 8006452:	296e      	cmp	r1, #110	; 0x6e
 8006454:	4617      	mov	r7, r2
 8006456:	4606      	mov	r6, r0
 8006458:	4698      	mov	r8, r3
 800645a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800645c:	f000 80b3 	beq.w	80065c6 <_printf_i+0x182>
 8006460:	d822      	bhi.n	80064a8 <_printf_i+0x64>
 8006462:	2963      	cmp	r1, #99	; 0x63
 8006464:	d036      	beq.n	80064d4 <_printf_i+0x90>
 8006466:	d80a      	bhi.n	800647e <_printf_i+0x3a>
 8006468:	2900      	cmp	r1, #0
 800646a:	f000 80b9 	beq.w	80065e0 <_printf_i+0x19c>
 800646e:	2958      	cmp	r1, #88	; 0x58
 8006470:	f000 8083 	beq.w	800657a <_printf_i+0x136>
 8006474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006478:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800647c:	e032      	b.n	80064e4 <_printf_i+0xa0>
 800647e:	2964      	cmp	r1, #100	; 0x64
 8006480:	d001      	beq.n	8006486 <_printf_i+0x42>
 8006482:	2969      	cmp	r1, #105	; 0x69
 8006484:	d1f6      	bne.n	8006474 <_printf_i+0x30>
 8006486:	6820      	ldr	r0, [r4, #0]
 8006488:	6813      	ldr	r3, [r2, #0]
 800648a:	0605      	lsls	r5, r0, #24
 800648c:	f103 0104 	add.w	r1, r3, #4
 8006490:	d52a      	bpl.n	80064e8 <_printf_i+0xa4>
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6011      	str	r1, [r2, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	da03      	bge.n	80064a2 <_printf_i+0x5e>
 800649a:	222d      	movs	r2, #45	; 0x2d
 800649c:	425b      	negs	r3, r3
 800649e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80064a2:	486f      	ldr	r0, [pc, #444]	; (8006660 <_printf_i+0x21c>)
 80064a4:	220a      	movs	r2, #10
 80064a6:	e039      	b.n	800651c <_printf_i+0xd8>
 80064a8:	2973      	cmp	r1, #115	; 0x73
 80064aa:	f000 809d 	beq.w	80065e8 <_printf_i+0x1a4>
 80064ae:	d808      	bhi.n	80064c2 <_printf_i+0x7e>
 80064b0:	296f      	cmp	r1, #111	; 0x6f
 80064b2:	d020      	beq.n	80064f6 <_printf_i+0xb2>
 80064b4:	2970      	cmp	r1, #112	; 0x70
 80064b6:	d1dd      	bne.n	8006474 <_printf_i+0x30>
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	f043 0320 	orr.w	r3, r3, #32
 80064be:	6023      	str	r3, [r4, #0]
 80064c0:	e003      	b.n	80064ca <_printf_i+0x86>
 80064c2:	2975      	cmp	r1, #117	; 0x75
 80064c4:	d017      	beq.n	80064f6 <_printf_i+0xb2>
 80064c6:	2978      	cmp	r1, #120	; 0x78
 80064c8:	d1d4      	bne.n	8006474 <_printf_i+0x30>
 80064ca:	2378      	movs	r3, #120	; 0x78
 80064cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064d0:	4864      	ldr	r0, [pc, #400]	; (8006664 <_printf_i+0x220>)
 80064d2:	e055      	b.n	8006580 <_printf_i+0x13c>
 80064d4:	6813      	ldr	r3, [r2, #0]
 80064d6:	1d19      	adds	r1, r3, #4
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6011      	str	r1, [r2, #0]
 80064dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064e4:	2301      	movs	r3, #1
 80064e6:	e08c      	b.n	8006602 <_printf_i+0x1be>
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6011      	str	r1, [r2, #0]
 80064ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064f0:	bf18      	it	ne
 80064f2:	b21b      	sxthne	r3, r3
 80064f4:	e7cf      	b.n	8006496 <_printf_i+0x52>
 80064f6:	6813      	ldr	r3, [r2, #0]
 80064f8:	6825      	ldr	r5, [r4, #0]
 80064fa:	1d18      	adds	r0, r3, #4
 80064fc:	6010      	str	r0, [r2, #0]
 80064fe:	0628      	lsls	r0, r5, #24
 8006500:	d501      	bpl.n	8006506 <_printf_i+0xc2>
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	e002      	b.n	800650c <_printf_i+0xc8>
 8006506:	0668      	lsls	r0, r5, #25
 8006508:	d5fb      	bpl.n	8006502 <_printf_i+0xbe>
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	4854      	ldr	r0, [pc, #336]	; (8006660 <_printf_i+0x21c>)
 800650e:	296f      	cmp	r1, #111	; 0x6f
 8006510:	bf14      	ite	ne
 8006512:	220a      	movne	r2, #10
 8006514:	2208      	moveq	r2, #8
 8006516:	2100      	movs	r1, #0
 8006518:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800651c:	6865      	ldr	r5, [r4, #4]
 800651e:	60a5      	str	r5, [r4, #8]
 8006520:	2d00      	cmp	r5, #0
 8006522:	f2c0 8095 	blt.w	8006650 <_printf_i+0x20c>
 8006526:	6821      	ldr	r1, [r4, #0]
 8006528:	f021 0104 	bic.w	r1, r1, #4
 800652c:	6021      	str	r1, [r4, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d13d      	bne.n	80065ae <_printf_i+0x16a>
 8006532:	2d00      	cmp	r5, #0
 8006534:	f040 808e 	bne.w	8006654 <_printf_i+0x210>
 8006538:	4665      	mov	r5, ip
 800653a:	2a08      	cmp	r2, #8
 800653c:	d10b      	bne.n	8006556 <_printf_i+0x112>
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	07db      	lsls	r3, r3, #31
 8006542:	d508      	bpl.n	8006556 <_printf_i+0x112>
 8006544:	6923      	ldr	r3, [r4, #16]
 8006546:	6862      	ldr	r2, [r4, #4]
 8006548:	429a      	cmp	r2, r3
 800654a:	bfde      	ittt	le
 800654c:	2330      	movle	r3, #48	; 0x30
 800654e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006552:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006556:	ebac 0305 	sub.w	r3, ip, r5
 800655a:	6123      	str	r3, [r4, #16]
 800655c:	f8cd 8000 	str.w	r8, [sp]
 8006560:	463b      	mov	r3, r7
 8006562:	aa03      	add	r2, sp, #12
 8006564:	4621      	mov	r1, r4
 8006566:	4630      	mov	r0, r6
 8006568:	f7ff fef6 	bl	8006358 <_printf_common>
 800656c:	3001      	adds	r0, #1
 800656e:	d14d      	bne.n	800660c <_printf_i+0x1c8>
 8006570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006574:	b005      	add	sp, #20
 8006576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800657a:	4839      	ldr	r0, [pc, #228]	; (8006660 <_printf_i+0x21c>)
 800657c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006580:	6813      	ldr	r3, [r2, #0]
 8006582:	6821      	ldr	r1, [r4, #0]
 8006584:	1d1d      	adds	r5, r3, #4
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6015      	str	r5, [r2, #0]
 800658a:	060a      	lsls	r2, r1, #24
 800658c:	d50b      	bpl.n	80065a6 <_printf_i+0x162>
 800658e:	07ca      	lsls	r2, r1, #31
 8006590:	bf44      	itt	mi
 8006592:	f041 0120 	orrmi.w	r1, r1, #32
 8006596:	6021      	strmi	r1, [r4, #0]
 8006598:	b91b      	cbnz	r3, 80065a2 <_printf_i+0x15e>
 800659a:	6822      	ldr	r2, [r4, #0]
 800659c:	f022 0220 	bic.w	r2, r2, #32
 80065a0:	6022      	str	r2, [r4, #0]
 80065a2:	2210      	movs	r2, #16
 80065a4:	e7b7      	b.n	8006516 <_printf_i+0xd2>
 80065a6:	064d      	lsls	r5, r1, #25
 80065a8:	bf48      	it	mi
 80065aa:	b29b      	uxthmi	r3, r3
 80065ac:	e7ef      	b.n	800658e <_printf_i+0x14a>
 80065ae:	4665      	mov	r5, ip
 80065b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80065b4:	fb02 3311 	mls	r3, r2, r1, r3
 80065b8:	5cc3      	ldrb	r3, [r0, r3]
 80065ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80065be:	460b      	mov	r3, r1
 80065c0:	2900      	cmp	r1, #0
 80065c2:	d1f5      	bne.n	80065b0 <_printf_i+0x16c>
 80065c4:	e7b9      	b.n	800653a <_printf_i+0xf6>
 80065c6:	6813      	ldr	r3, [r2, #0]
 80065c8:	6825      	ldr	r5, [r4, #0]
 80065ca:	6961      	ldr	r1, [r4, #20]
 80065cc:	1d18      	adds	r0, r3, #4
 80065ce:	6010      	str	r0, [r2, #0]
 80065d0:	0628      	lsls	r0, r5, #24
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	d501      	bpl.n	80065da <_printf_i+0x196>
 80065d6:	6019      	str	r1, [r3, #0]
 80065d8:	e002      	b.n	80065e0 <_printf_i+0x19c>
 80065da:	066a      	lsls	r2, r5, #25
 80065dc:	d5fb      	bpl.n	80065d6 <_printf_i+0x192>
 80065de:	8019      	strh	r1, [r3, #0]
 80065e0:	2300      	movs	r3, #0
 80065e2:	6123      	str	r3, [r4, #16]
 80065e4:	4665      	mov	r5, ip
 80065e6:	e7b9      	b.n	800655c <_printf_i+0x118>
 80065e8:	6813      	ldr	r3, [r2, #0]
 80065ea:	1d19      	adds	r1, r3, #4
 80065ec:	6011      	str	r1, [r2, #0]
 80065ee:	681d      	ldr	r5, [r3, #0]
 80065f0:	6862      	ldr	r2, [r4, #4]
 80065f2:	2100      	movs	r1, #0
 80065f4:	4628      	mov	r0, r5
 80065f6:	f7f9 fdf3 	bl	80001e0 <memchr>
 80065fa:	b108      	cbz	r0, 8006600 <_printf_i+0x1bc>
 80065fc:	1b40      	subs	r0, r0, r5
 80065fe:	6060      	str	r0, [r4, #4]
 8006600:	6863      	ldr	r3, [r4, #4]
 8006602:	6123      	str	r3, [r4, #16]
 8006604:	2300      	movs	r3, #0
 8006606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800660a:	e7a7      	b.n	800655c <_printf_i+0x118>
 800660c:	6923      	ldr	r3, [r4, #16]
 800660e:	462a      	mov	r2, r5
 8006610:	4639      	mov	r1, r7
 8006612:	4630      	mov	r0, r6
 8006614:	47c0      	blx	r8
 8006616:	3001      	adds	r0, #1
 8006618:	d0aa      	beq.n	8006570 <_printf_i+0x12c>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	079b      	lsls	r3, r3, #30
 800661e:	d413      	bmi.n	8006648 <_printf_i+0x204>
 8006620:	68e0      	ldr	r0, [r4, #12]
 8006622:	9b03      	ldr	r3, [sp, #12]
 8006624:	4298      	cmp	r0, r3
 8006626:	bfb8      	it	lt
 8006628:	4618      	movlt	r0, r3
 800662a:	e7a3      	b.n	8006574 <_printf_i+0x130>
 800662c:	2301      	movs	r3, #1
 800662e:	464a      	mov	r2, r9
 8006630:	4639      	mov	r1, r7
 8006632:	4630      	mov	r0, r6
 8006634:	47c0      	blx	r8
 8006636:	3001      	adds	r0, #1
 8006638:	d09a      	beq.n	8006570 <_printf_i+0x12c>
 800663a:	3501      	adds	r5, #1
 800663c:	68e3      	ldr	r3, [r4, #12]
 800663e:	9a03      	ldr	r2, [sp, #12]
 8006640:	1a9b      	subs	r3, r3, r2
 8006642:	42ab      	cmp	r3, r5
 8006644:	dcf2      	bgt.n	800662c <_printf_i+0x1e8>
 8006646:	e7eb      	b.n	8006620 <_printf_i+0x1dc>
 8006648:	2500      	movs	r5, #0
 800664a:	f104 0919 	add.w	r9, r4, #25
 800664e:	e7f5      	b.n	800663c <_printf_i+0x1f8>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1ac      	bne.n	80065ae <_printf_i+0x16a>
 8006654:	7803      	ldrb	r3, [r0, #0]
 8006656:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800665a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800665e:	e76c      	b.n	800653a <_printf_i+0xf6>
 8006660:	08006911 	.word	0x08006911
 8006664:	08006922 	.word	0x08006922

08006668 <memcpy>:
 8006668:	b510      	push	{r4, lr}
 800666a:	1e43      	subs	r3, r0, #1
 800666c:	440a      	add	r2, r1
 800666e:	4291      	cmp	r1, r2
 8006670:	d100      	bne.n	8006674 <memcpy+0xc>
 8006672:	bd10      	pop	{r4, pc}
 8006674:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006678:	f803 4f01 	strb.w	r4, [r3, #1]!
 800667c:	e7f7      	b.n	800666e <memcpy+0x6>

0800667e <memmove>:
 800667e:	4288      	cmp	r0, r1
 8006680:	b510      	push	{r4, lr}
 8006682:	eb01 0302 	add.w	r3, r1, r2
 8006686:	d807      	bhi.n	8006698 <memmove+0x1a>
 8006688:	1e42      	subs	r2, r0, #1
 800668a:	4299      	cmp	r1, r3
 800668c:	d00a      	beq.n	80066a4 <memmove+0x26>
 800668e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006692:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006696:	e7f8      	b.n	800668a <memmove+0xc>
 8006698:	4283      	cmp	r3, r0
 800669a:	d9f5      	bls.n	8006688 <memmove+0xa>
 800669c:	1881      	adds	r1, r0, r2
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	42d3      	cmn	r3, r2
 80066a2:	d100      	bne.n	80066a6 <memmove+0x28>
 80066a4:	bd10      	pop	{r4, pc}
 80066a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066aa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80066ae:	e7f7      	b.n	80066a0 <memmove+0x22>

080066b0 <_free_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4605      	mov	r5, r0
 80066b4:	2900      	cmp	r1, #0
 80066b6:	d045      	beq.n	8006744 <_free_r+0x94>
 80066b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066bc:	1f0c      	subs	r4, r1, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	bfb8      	it	lt
 80066c2:	18e4      	addlt	r4, r4, r3
 80066c4:	f000 f8d2 	bl	800686c <__malloc_lock>
 80066c8:	4a1f      	ldr	r2, [pc, #124]	; (8006748 <_free_r+0x98>)
 80066ca:	6813      	ldr	r3, [r2, #0]
 80066cc:	4610      	mov	r0, r2
 80066ce:	b933      	cbnz	r3, 80066de <_free_r+0x2e>
 80066d0:	6063      	str	r3, [r4, #4]
 80066d2:	6014      	str	r4, [r2, #0]
 80066d4:	4628      	mov	r0, r5
 80066d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066da:	f000 b8c8 	b.w	800686e <__malloc_unlock>
 80066de:	42a3      	cmp	r3, r4
 80066e0:	d90c      	bls.n	80066fc <_free_r+0x4c>
 80066e2:	6821      	ldr	r1, [r4, #0]
 80066e4:	1862      	adds	r2, r4, r1
 80066e6:	4293      	cmp	r3, r2
 80066e8:	bf04      	itt	eq
 80066ea:	681a      	ldreq	r2, [r3, #0]
 80066ec:	685b      	ldreq	r3, [r3, #4]
 80066ee:	6063      	str	r3, [r4, #4]
 80066f0:	bf04      	itt	eq
 80066f2:	1852      	addeq	r2, r2, r1
 80066f4:	6022      	streq	r2, [r4, #0]
 80066f6:	6004      	str	r4, [r0, #0]
 80066f8:	e7ec      	b.n	80066d4 <_free_r+0x24>
 80066fa:	4613      	mov	r3, r2
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	b10a      	cbz	r2, 8006704 <_free_r+0x54>
 8006700:	42a2      	cmp	r2, r4
 8006702:	d9fa      	bls.n	80066fa <_free_r+0x4a>
 8006704:	6819      	ldr	r1, [r3, #0]
 8006706:	1858      	adds	r0, r3, r1
 8006708:	42a0      	cmp	r0, r4
 800670a:	d10b      	bne.n	8006724 <_free_r+0x74>
 800670c:	6820      	ldr	r0, [r4, #0]
 800670e:	4401      	add	r1, r0
 8006710:	1858      	adds	r0, r3, r1
 8006712:	4282      	cmp	r2, r0
 8006714:	6019      	str	r1, [r3, #0]
 8006716:	d1dd      	bne.n	80066d4 <_free_r+0x24>
 8006718:	6810      	ldr	r0, [r2, #0]
 800671a:	6852      	ldr	r2, [r2, #4]
 800671c:	605a      	str	r2, [r3, #4]
 800671e:	4401      	add	r1, r0
 8006720:	6019      	str	r1, [r3, #0]
 8006722:	e7d7      	b.n	80066d4 <_free_r+0x24>
 8006724:	d902      	bls.n	800672c <_free_r+0x7c>
 8006726:	230c      	movs	r3, #12
 8006728:	602b      	str	r3, [r5, #0]
 800672a:	e7d3      	b.n	80066d4 <_free_r+0x24>
 800672c:	6820      	ldr	r0, [r4, #0]
 800672e:	1821      	adds	r1, r4, r0
 8006730:	428a      	cmp	r2, r1
 8006732:	bf04      	itt	eq
 8006734:	6811      	ldreq	r1, [r2, #0]
 8006736:	6852      	ldreq	r2, [r2, #4]
 8006738:	6062      	str	r2, [r4, #4]
 800673a:	bf04      	itt	eq
 800673c:	1809      	addeq	r1, r1, r0
 800673e:	6021      	streq	r1, [r4, #0]
 8006740:	605c      	str	r4, [r3, #4]
 8006742:	e7c7      	b.n	80066d4 <_free_r+0x24>
 8006744:	bd38      	pop	{r3, r4, r5, pc}
 8006746:	bf00      	nop
 8006748:	20000094 	.word	0x20000094

0800674c <_malloc_r>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	1ccd      	adds	r5, r1, #3
 8006750:	f025 0503 	bic.w	r5, r5, #3
 8006754:	3508      	adds	r5, #8
 8006756:	2d0c      	cmp	r5, #12
 8006758:	bf38      	it	cc
 800675a:	250c      	movcc	r5, #12
 800675c:	2d00      	cmp	r5, #0
 800675e:	4606      	mov	r6, r0
 8006760:	db01      	blt.n	8006766 <_malloc_r+0x1a>
 8006762:	42a9      	cmp	r1, r5
 8006764:	d903      	bls.n	800676e <_malloc_r+0x22>
 8006766:	230c      	movs	r3, #12
 8006768:	6033      	str	r3, [r6, #0]
 800676a:	2000      	movs	r0, #0
 800676c:	bd70      	pop	{r4, r5, r6, pc}
 800676e:	f000 f87d 	bl	800686c <__malloc_lock>
 8006772:	4a21      	ldr	r2, [pc, #132]	; (80067f8 <_malloc_r+0xac>)
 8006774:	6814      	ldr	r4, [r2, #0]
 8006776:	4621      	mov	r1, r4
 8006778:	b991      	cbnz	r1, 80067a0 <_malloc_r+0x54>
 800677a:	4c20      	ldr	r4, [pc, #128]	; (80067fc <_malloc_r+0xb0>)
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	b91b      	cbnz	r3, 8006788 <_malloc_r+0x3c>
 8006780:	4630      	mov	r0, r6
 8006782:	f000 f863 	bl	800684c <_sbrk_r>
 8006786:	6020      	str	r0, [r4, #0]
 8006788:	4629      	mov	r1, r5
 800678a:	4630      	mov	r0, r6
 800678c:	f000 f85e 	bl	800684c <_sbrk_r>
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	d124      	bne.n	80067de <_malloc_r+0x92>
 8006794:	230c      	movs	r3, #12
 8006796:	6033      	str	r3, [r6, #0]
 8006798:	4630      	mov	r0, r6
 800679a:	f000 f868 	bl	800686e <__malloc_unlock>
 800679e:	e7e4      	b.n	800676a <_malloc_r+0x1e>
 80067a0:	680b      	ldr	r3, [r1, #0]
 80067a2:	1b5b      	subs	r3, r3, r5
 80067a4:	d418      	bmi.n	80067d8 <_malloc_r+0x8c>
 80067a6:	2b0b      	cmp	r3, #11
 80067a8:	d90f      	bls.n	80067ca <_malloc_r+0x7e>
 80067aa:	600b      	str	r3, [r1, #0]
 80067ac:	50cd      	str	r5, [r1, r3]
 80067ae:	18cc      	adds	r4, r1, r3
 80067b0:	4630      	mov	r0, r6
 80067b2:	f000 f85c 	bl	800686e <__malloc_unlock>
 80067b6:	f104 000b 	add.w	r0, r4, #11
 80067ba:	1d23      	adds	r3, r4, #4
 80067bc:	f020 0007 	bic.w	r0, r0, #7
 80067c0:	1ac3      	subs	r3, r0, r3
 80067c2:	d0d3      	beq.n	800676c <_malloc_r+0x20>
 80067c4:	425a      	negs	r2, r3
 80067c6:	50e2      	str	r2, [r4, r3]
 80067c8:	e7d0      	b.n	800676c <_malloc_r+0x20>
 80067ca:	428c      	cmp	r4, r1
 80067cc:	684b      	ldr	r3, [r1, #4]
 80067ce:	bf16      	itet	ne
 80067d0:	6063      	strne	r3, [r4, #4]
 80067d2:	6013      	streq	r3, [r2, #0]
 80067d4:	460c      	movne	r4, r1
 80067d6:	e7eb      	b.n	80067b0 <_malloc_r+0x64>
 80067d8:	460c      	mov	r4, r1
 80067da:	6849      	ldr	r1, [r1, #4]
 80067dc:	e7cc      	b.n	8006778 <_malloc_r+0x2c>
 80067de:	1cc4      	adds	r4, r0, #3
 80067e0:	f024 0403 	bic.w	r4, r4, #3
 80067e4:	42a0      	cmp	r0, r4
 80067e6:	d005      	beq.n	80067f4 <_malloc_r+0xa8>
 80067e8:	1a21      	subs	r1, r4, r0
 80067ea:	4630      	mov	r0, r6
 80067ec:	f000 f82e 	bl	800684c <_sbrk_r>
 80067f0:	3001      	adds	r0, #1
 80067f2:	d0cf      	beq.n	8006794 <_malloc_r+0x48>
 80067f4:	6025      	str	r5, [r4, #0]
 80067f6:	e7db      	b.n	80067b0 <_malloc_r+0x64>
 80067f8:	20000094 	.word	0x20000094
 80067fc:	20000098 	.word	0x20000098

08006800 <_realloc_r>:
 8006800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006802:	4607      	mov	r7, r0
 8006804:	4614      	mov	r4, r2
 8006806:	460e      	mov	r6, r1
 8006808:	b921      	cbnz	r1, 8006814 <_realloc_r+0x14>
 800680a:	4611      	mov	r1, r2
 800680c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006810:	f7ff bf9c 	b.w	800674c <_malloc_r>
 8006814:	b922      	cbnz	r2, 8006820 <_realloc_r+0x20>
 8006816:	f7ff ff4b 	bl	80066b0 <_free_r>
 800681a:	4625      	mov	r5, r4
 800681c:	4628      	mov	r0, r5
 800681e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006820:	f000 f826 	bl	8006870 <_malloc_usable_size_r>
 8006824:	42a0      	cmp	r0, r4
 8006826:	d20f      	bcs.n	8006848 <_realloc_r+0x48>
 8006828:	4621      	mov	r1, r4
 800682a:	4638      	mov	r0, r7
 800682c:	f7ff ff8e 	bl	800674c <_malloc_r>
 8006830:	4605      	mov	r5, r0
 8006832:	2800      	cmp	r0, #0
 8006834:	d0f2      	beq.n	800681c <_realloc_r+0x1c>
 8006836:	4631      	mov	r1, r6
 8006838:	4622      	mov	r2, r4
 800683a:	f7ff ff15 	bl	8006668 <memcpy>
 800683e:	4631      	mov	r1, r6
 8006840:	4638      	mov	r0, r7
 8006842:	f7ff ff35 	bl	80066b0 <_free_r>
 8006846:	e7e9      	b.n	800681c <_realloc_r+0x1c>
 8006848:	4635      	mov	r5, r6
 800684a:	e7e7      	b.n	800681c <_realloc_r+0x1c>

0800684c <_sbrk_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4c06      	ldr	r4, [pc, #24]	; (8006868 <_sbrk_r+0x1c>)
 8006850:	2300      	movs	r3, #0
 8006852:	4605      	mov	r5, r0
 8006854:	4608      	mov	r0, r1
 8006856:	6023      	str	r3, [r4, #0]
 8006858:	f7fa fa40 	bl	8000cdc <_sbrk>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d102      	bne.n	8006866 <_sbrk_r+0x1a>
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	b103      	cbz	r3, 8006866 <_sbrk_r+0x1a>
 8006864:	602b      	str	r3, [r5, #0]
 8006866:	bd38      	pop	{r3, r4, r5, pc}
 8006868:	200005d8 	.word	0x200005d8

0800686c <__malloc_lock>:
 800686c:	4770      	bx	lr

0800686e <__malloc_unlock>:
 800686e:	4770      	bx	lr

08006870 <_malloc_usable_size_r>:
 8006870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006874:	1f18      	subs	r0, r3, #4
 8006876:	2b00      	cmp	r3, #0
 8006878:	bfbc      	itt	lt
 800687a:	580b      	ldrlt	r3, [r1, r0]
 800687c:	18c0      	addlt	r0, r0, r3
 800687e:	4770      	bx	lr

08006880 <_init>:
 8006880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006882:	bf00      	nop
 8006884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006886:	bc08      	pop	{r3}
 8006888:	469e      	mov	lr, r3
 800688a:	4770      	bx	lr

0800688c <_fini>:
 800688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688e:	bf00      	nop
 8006890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006892:	bc08      	pop	{r3}
 8006894:	469e      	mov	lr, r3
 8006896:	4770      	bx	lr
