
PegasusMainBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000648c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800661c  0800661c  0001661c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066b8  080066b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080066b8  080066b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066b8  080066b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066b8  080066b8  000166b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066bc  080066bc  000166bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080066c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000070  08006730  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  08006730  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167d6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ef8  00000000  00000000  00036876  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  00039770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001208  00000000  00000000  0003aae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002144d  00000000  00000000  0003bce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013d46  00000000  00000000  0005d135  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c821a  00000000  00000000  00070e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00139095  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005494  00000000  00000000  00139110  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006604 	.word	0x08006604

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006604 	.word	0x08006604

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000286:	f107 031c 	add.w	r3, r7, #28
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
 80002a0:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002a2:	4b2e      	ldr	r3, [pc, #184]	; (800035c <MX_ADC1_Init+0xdc>)
 80002a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002aa:	4b2c      	ldr	r3, [pc, #176]	; (800035c <MX_ADC1_Init+0xdc>)
 80002ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80002b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002b2:	4b2a      	ldr	r3, [pc, #168]	; (800035c <MX_ADC1_Init+0xdc>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002b8:	4b28      	ldr	r3, [pc, #160]	; (800035c <MX_ADC1_Init+0xdc>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002be:	4b27      	ldr	r3, [pc, #156]	; (800035c <MX_ADC1_Init+0xdc>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002c4:	4b25      	ldr	r3, [pc, #148]	; (800035c <MX_ADC1_Init+0xdc>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002cc:	4b23      	ldr	r3, [pc, #140]	; (800035c <MX_ADC1_Init+0xdc>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002d2:	4b22      	ldr	r3, [pc, #136]	; (800035c <MX_ADC1_Init+0xdc>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d8:	4b20      	ldr	r3, [pc, #128]	; (800035c <MX_ADC1_Init+0xdc>)
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80002de:	4b1f      	ldr	r3, [pc, #124]	; (800035c <MX_ADC1_Init+0xdc>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002e4:	4b1d      	ldr	r3, [pc, #116]	; (800035c <MX_ADC1_Init+0xdc>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002ec:	4b1b      	ldr	r3, [pc, #108]	; (800035c <MX_ADC1_Init+0xdc>)
 80002ee:	2204      	movs	r2, #4
 80002f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002f2:	4b1a      	ldr	r3, [pc, #104]	; (800035c <MX_ADC1_Init+0xdc>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80002f8:	4b18      	ldr	r3, [pc, #96]	; (800035c <MX_ADC1_Init+0xdc>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002fe:	4817      	ldr	r0, [pc, #92]	; (800035c <MX_ADC1_Init+0xdc>)
 8000300:	f001 f80e 	bl	8001320 <HAL_ADC_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800030a:	f000 fc15 	bl	8000b38 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800030e:	2300      	movs	r3, #0
 8000310:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000312:	f107 031c 	add.w	r3, r7, #28
 8000316:	4619      	mov	r1, r3
 8000318:	4810      	ldr	r0, [pc, #64]	; (800035c <MX_ADC1_Init+0xdc>)
 800031a:	f001 fccd 	bl	8001cb8 <HAL_ADCEx_MultiModeConfigChannel>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000324:	f000 fc08 	bl	8000b38 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000328:	2304      	movs	r3, #4
 800032a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800032c:	2301      	movs	r3, #1
 800032e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000330:	2300      	movs	r3, #0
 8000332:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000338:	2300      	movs	r3, #0
 800033a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800033c:	2300      	movs	r3, #0
 800033e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	4619      	mov	r1, r3
 8000344:	4805      	ldr	r0, [pc, #20]	; (800035c <MX_ADC1_Init+0xdc>)
 8000346:	f001 f9cb 	bl	80016e0 <HAL_ADC_ConfigChannel>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000350:	f000 fbf2 	bl	8000b38 <Error_Handler>
  }

}
 8000354:	bf00      	nop
 8000356:	3728      	adds	r7, #40	; 0x28
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	200000ec 	.word	0x200000ec

08000360 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000366:	463b      	mov	r3, r7
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
 8000374:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000376:	4b27      	ldr	r3, [pc, #156]	; (8000414 <MX_ADC2_Init+0xb4>)
 8000378:	4a27      	ldr	r2, [pc, #156]	; (8000418 <MX_ADC2_Init+0xb8>)
 800037a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800037c:	4b25      	ldr	r3, [pc, #148]	; (8000414 <MX_ADC2_Init+0xb4>)
 800037e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000382:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000384:	4b23      	ldr	r3, [pc, #140]	; (8000414 <MX_ADC2_Init+0xb4>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800038a:	4b22      	ldr	r3, [pc, #136]	; (8000414 <MX_ADC2_Init+0xb4>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000390:	4b20      	ldr	r3, [pc, #128]	; (8000414 <MX_ADC2_Init+0xb4>)
 8000392:	2200      	movs	r2, #0
 8000394:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000396:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <MX_ADC2_Init+0xb4>)
 8000398:	2200      	movs	r2, #0
 800039a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800039e:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003c0:	2204      	movs	r2, #4
 80003c2:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003d0:	4810      	ldr	r0, [pc, #64]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003d2:	f000 ffa5 	bl	8001320 <HAL_ADC_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80003dc:	f000 fbac 	bl	8000b38 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003e0:	2305      	movs	r3, #5
 80003e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e4:	2301      	movs	r3, #1
 80003e6:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003f8:	463b      	mov	r3, r7
 80003fa:	4619      	mov	r1, r3
 80003fc:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_ADC2_Init+0xb4>)
 80003fe:	f001 f96f 	bl	80016e0 <HAL_ADC_ConfigChannel>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000408:	f000 fb96 	bl	8000b38 <Error_Handler>
  }

}
 800040c:	bf00      	nop
 800040e:	3718      	adds	r7, #24
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	2000009c 	.word	0x2000009c
 8000418:	50000100 	.word	0x50000100

0800041c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000422:	f107 031c 	add.w	r3, r7, #28
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
 800043c:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc3.Instance = ADC3;
 800043e:	4b2d      	ldr	r3, [pc, #180]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000440:	4a2d      	ldr	r2, [pc, #180]	; (80004f8 <MX_ADC3_Init+0xdc>)
 8000442:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000444:	4b2b      	ldr	r3, [pc, #172]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000446:	2200      	movs	r2, #0
 8000448:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800044a:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <MX_ADC3_Init+0xd8>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000450:	4b28      	ldr	r3, [pc, #160]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000456:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000458:	2200      	movs	r2, #0
 800045a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800045c:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <MX_ADC3_Init+0xd8>)
 800045e:	2200      	movs	r2, #0
 8000460:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000464:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000466:	2200      	movs	r2, #0
 8000468:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800046a:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <MX_ADC3_Init+0xd8>)
 800046c:	2201      	movs	r2, #1
 800046e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000470:	4b20      	ldr	r3, [pc, #128]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000476:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000478:	2201      	movs	r2, #1
 800047a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800047c:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <MX_ADC3_Init+0xd8>)
 800047e:	2200      	movs	r2, #0
 8000480:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000486:	2204      	movs	r2, #4
 8000488:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800048a:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <MX_ADC3_Init+0xd8>)
 800048c:	2200      	movs	r2, #0
 800048e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000490:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000492:	2200      	movs	r2, #0
 8000494:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000496:	4817      	ldr	r0, [pc, #92]	; (80004f4 <MX_ADC3_Init+0xd8>)
 8000498:	f000 ff42 	bl	8001320 <HAL_ADC_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80004a2:	f000 fb49 	bl	8000b38 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80004aa:	f107 031c 	add.w	r3, r7, #28
 80004ae:	4619      	mov	r1, r3
 80004b0:	4810      	ldr	r0, [pc, #64]	; (80004f4 <MX_ADC3_Init+0xd8>)
 80004b2:	f001 fc01 	bl	8001cb8 <HAL_ADCEx_MultiModeConfigChannel>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80004bc:	f000 fb3c 	bl	8000b38 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80004c0:	230c      	movs	r3, #12
 80004c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004c4:	2301      	movs	r3, #1
 80004c6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004c8:	2300      	movs	r3, #0
 80004ca:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4619      	mov	r1, r3
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_ADC3_Init+0xd8>)
 80004de:	f001 f8ff 	bl	80016e0 <HAL_ADC_ConfigChannel>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80004e8:	f000 fb26 	bl	8000b38 <Error_Handler>
  }

}
 80004ec:	bf00      	nop
 80004ee:	3728      	adds	r7, #40	; 0x28
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	2000013c 	.word	0x2000013c
 80004f8:	50000400 	.word	0x50000400

080004fc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b090      	sub	sp, #64	; 0x40
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800051c:	d146      	bne.n	80005ac <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800051e:	4b5f      	ldr	r3, [pc, #380]	; (800069c <HAL_ADC_MspInit+0x1a0>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	3301      	adds	r3, #1
 8000524:	4a5d      	ldr	r2, [pc, #372]	; (800069c <HAL_ADC_MspInit+0x1a0>)
 8000526:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000528:	4b5c      	ldr	r3, [pc, #368]	; (800069c <HAL_ADC_MspInit+0x1a0>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d10b      	bne.n	8000548 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000530:	4b5b      	ldr	r3, [pc, #364]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a5a      	ldr	r2, [pc, #360]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6153      	str	r3, [r2, #20]
 800053c:	4b58      	ldr	r3, [pc, #352]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	62bb      	str	r3, [r7, #40]	; 0x28
 8000546:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000548:	4b55      	ldr	r3, [pc, #340]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a54      	ldr	r2, [pc, #336]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 800054e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000552:	6153      	str	r3, [r2, #20]
 8000554:	4b52      	ldr	r3, [pc, #328]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
 800055e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000560:	4b4f      	ldr	r3, [pc, #316]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a4e      	ldr	r2, [pc, #312]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	6153      	str	r3, [r2, #20]
 800056c:	4b4c      	ldr	r3, [pc, #304]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000574:	623b      	str	r3, [r7, #32]
 8000576:	6a3b      	ldr	r3, [r7, #32]
    PC3     ------> ADC1_IN9
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = TEMP0_Pin;
 8000578:	2308      	movs	r3, #8
 800057a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057c:	2303      	movs	r3, #3
 800057e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TEMP0_GPIO_Port, &GPIO_InitStruct);
 8000584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000588:	4619      	mov	r1, r3
 800058a:	4846      	ldr	r0, [pc, #280]	; (80006a4 <HAL_ADC_MspInit+0x1a8>)
 800058c:	f001 fefe 	bl	800238c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURR_V_Pin|NTC_PWR_Pin|CURR_W_Pin;
 8000590:	230e      	movs	r3, #14
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000594:	2303      	movs	r3, #3
 8000596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005a0:	4619      	mov	r1, r3
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f001 fef1 	bl	800238c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80005aa:	e073      	b.n	8000694 <HAL_ADC_MspInit+0x198>
  else if(adcHandle->Instance==ADC2)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a3d      	ldr	r2, [pc, #244]	; (80006a8 <HAL_ADC_MspInit+0x1ac>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d145      	bne.n	8000642 <HAL_ADC_MspInit+0x146>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80005b6:	4b39      	ldr	r3, [pc, #228]	; (800069c <HAL_ADC_MspInit+0x1a0>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	3301      	adds	r3, #1
 80005bc:	4a37      	ldr	r2, [pc, #220]	; (800069c <HAL_ADC_MspInit+0x1a0>)
 80005be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80005c0:	4b36      	ldr	r3, [pc, #216]	; (800069c <HAL_ADC_MspInit+0x1a0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d10b      	bne.n	80005e0 <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80005c8:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a34      	ldr	r2, [pc, #208]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6153      	str	r3, [r2, #20]
 80005d4:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	61fb      	str	r3, [r7, #28]
 80005de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a2e      	ldr	r2, [pc, #184]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 80005e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005f4:	61bb      	str	r3, [r7, #24]
 80005f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 80005fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000602:	6153      	str	r3, [r2, #20]
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TEMP1_Pin|ERR_IN_Pin;
 8000610:	2330      	movs	r3, #48	; 0x30
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000614:	2303      	movs	r3, #3
 8000616:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000620:	4619      	mov	r1, r3
 8000622:	4820      	ldr	r0, [pc, #128]	; (80006a4 <HAL_ADC_MspInit+0x1a8>)
 8000624:	f001 feb2 	bl	800238c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBUS_SCALED_Pin;
 8000628:	2304      	movs	r3, #4
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800062c:	2303      	movs	r3, #3
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VBUS_SCALED_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000638:	4619      	mov	r1, r3
 800063a:	481c      	ldr	r0, [pc, #112]	; (80006ac <HAL_ADC_MspInit+0x1b0>)
 800063c:	f001 fea6 	bl	800238c <HAL_GPIO_Init>
}
 8000640:	e028      	b.n	8000694 <HAL_ADC_MspInit+0x198>
  else if(adcHandle->Instance==ADC3)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a1a      	ldr	r2, [pc, #104]	; (80006b0 <HAL_ADC_MspInit+0x1b4>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d123      	bne.n	8000694 <HAL_ADC_MspInit+0x198>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000652:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 800066a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800066e:	6153      	str	r3, [r2, #20]
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <HAL_ADC_MspInit+0x1a4>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURR_U_Pin;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000680:	2303      	movs	r3, #3
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CURR_U_GPIO_Port, &GPIO_InitStruct);
 8000688:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800068c:	4619      	mov	r1, r3
 800068e:	4807      	ldr	r0, [pc, #28]	; (80006ac <HAL_ADC_MspInit+0x1b0>)
 8000690:	f001 fe7c 	bl	800238c <HAL_GPIO_Init>
}
 8000694:	bf00      	nop
 8000696:	3740      	adds	r7, #64	; 0x40
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000008c 	.word	0x2000008c
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000800 	.word	0x48000800
 80006a8:	50000100 	.word	0x50000100
 80006ac:	48000400 	.word	0x48000400
 80006b0:	50000400 	.word	0x50000400

080006b4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_CAN_Init+0x60>)
 80006ba:	4a17      	ldr	r2, [pc, #92]	; (8000718 <MX_CAN_Init+0x64>)
 80006bc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_CAN_Init+0x60>)
 80006c0:	2210      	movs	r2, #16
 80006c2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_CAN_Init+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_CAN_Init+0x60>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_CAN_Init+0x60>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_CAN_Init+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_CAN_Init+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_CAN_Init+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_CAN_Init+0x60>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_CAN_Init+0x60>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_CAN_Init+0x60>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_CAN_Init+0x60>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_CAN_Init+0x60>)
 8000702:	f001 fc2a 	bl	8001f5a <HAL_CAN_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800070c:	f000 fa14 	bl	8000b38 <Error_Handler>
  }

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2000018c 	.word	0x2000018c
 8000718:	40006400 	.word	0x40006400

0800071c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a17      	ldr	r2, [pc, #92]	; (8000798 <HAL_CAN_MspInit+0x7c>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d128      	bne.n	8000790 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <HAL_CAN_MspInit+0x80>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <HAL_CAN_MspInit+0x80>)
 8000744:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <HAL_CAN_MspInit+0x80>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <HAL_CAN_MspInit+0x80>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a10      	ldr	r2, [pc, #64]	; (800079c <HAL_CAN_MspInit+0x80>)
 800075c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000760:	6153      	str	r3, [r2, #20]
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <HAL_CAN_MspInit+0x80>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800076e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000780:	2309      	movs	r3, #9
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <HAL_CAN_MspInit+0x84>)
 800078c:	f001 fdfe 	bl	800238c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40006400 	.word	0x40006400
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000400 	.word	0x48000400

080007a4 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ba:	4b54      	ldr	r3, [pc, #336]	; (800090c <MX_GPIO_Init+0x168>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a53      	ldr	r2, [pc, #332]	; (800090c <MX_GPIO_Init+0x168>)
 80007c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c4:	6153      	str	r3, [r2, #20]
 80007c6:	4b51      	ldr	r3, [pc, #324]	; (800090c <MX_GPIO_Init+0x168>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4b4e      	ldr	r3, [pc, #312]	; (800090c <MX_GPIO_Init+0x168>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a4d      	ldr	r2, [pc, #308]	; (800090c <MX_GPIO_Init+0x168>)
 80007d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	4b4b      	ldr	r3, [pc, #300]	; (800090c <MX_GPIO_Init+0x168>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b48      	ldr	r3, [pc, #288]	; (800090c <MX_GPIO_Init+0x168>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a47      	ldr	r2, [pc, #284]	; (800090c <MX_GPIO_Init+0x168>)
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	6153      	str	r3, [r2, #20]
 80007f6:	4b45      	ldr	r3, [pc, #276]	; (800090c <MX_GPIO_Init+0x168>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b42      	ldr	r3, [pc, #264]	; (800090c <MX_GPIO_Init+0x168>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	4a41      	ldr	r2, [pc, #260]	; (800090c <MX_GPIO_Init+0x168>)
 8000808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800080c:	6153      	str	r3, [r2, #20]
 800080e:	4b3f      	ldr	r3, [pc, #252]	; (800090c <MX_GPIO_Init+0x168>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2110      	movs	r1, #16
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f001 ff2d 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_ENABLE_GPIO_Port, PWR_ENABLE_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2102      	movs	r1, #2
 800082a:	4839      	ldr	r0, [pc, #228]	; (8000910 <MX_GPIO_Init+0x16c>)
 800082c:	f001 ff28 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STATUS_Pin|ERR_OUT_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000836:	4837      	ldr	r0, [pc, #220]	; (8000914 <MX_GPIO_Init+0x170>)
 8000838:	f001 ff22 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HALL3_Pin|HALL2_Pin|HALL1_Pin;
 800083c:	2307      	movs	r3, #7
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4831      	ldr	r0, [pc, #196]	; (8000914 <MX_GPIO_Init+0x170>)
 8000850:	f001 fd9c 	bl	800238c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086a:	f001 fd8f 	bl	800238c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800086e:	2310      	movs	r3, #16
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000888:	f001 fd80 	bl	800238c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_ENABLE_Pin;
 800088c:	2302      	movs	r3, #2
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWR_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	481b      	ldr	r0, [pc, #108]	; (8000910 <MX_GPIO_Init+0x16c>)
 80008a4:	f001 fd72 	bl	800238c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f001 fd60 	bl	800238c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STATUS_Pin|ERR_OUT_Pin|DEBUG_LED_Pin;
 80008cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <MX_GPIO_Init+0x170>)
 80008e6:	f001 fd51 	bl	800238c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MULTI0_Pin|MULTI1_Pin;
 80008ea:	2330      	movs	r3, #48	; 0x30
 80008ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_GPIO_Init+0x16c>)
 80008fe:	f001 fd45 	bl	800238c <HAL_GPIO_Init>

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	; 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000
 8000910:	48000400 	.word	0x48000400
 8000914:	48000800 	.word	0x48000800

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b0ba      	sub	sp, #232	; 0xe8
 800091c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f000 fc77 	bl	8001210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000922:	f000 f89f 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000926:	f7ff ff3d 	bl	80007a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800092a:	f7ff fca9 	bl	8000280 <MX_ADC1_Init>
  MX_ADC2_Init();
 800092e:	f7ff fd17 	bl	8000360 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000932:	f7ff fd73 	bl	800041c <MX_ADC3_Init>
  MX_CAN_Init();
 8000936:	f7ff febd 	bl	80006b4 <MX_CAN_Init>
  MX_SPI1_Init();
 800093a:	f000 f905 	bl	8000b48 <MX_SPI1_Init>
  MX_TIM1_Init();
 800093e:	f000 fa23 	bl	8000d88 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000942:	f000 fb61 	bl	8001008 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000946:	f000 fbd3 	bl	80010f0 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  // Testa o funcionamento da flash
  // Acaba também testando a UART (MULTI2/3)
  uint8_t tx_buf[] = { 0x9F, 0x00, 0x00, 0x00, 0x00 };
 800094a:	239f      	movs	r3, #159	; 0x9f
 800094c:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8000950:	2300      	movs	r3, #0
 8000952:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 8000956:	2300      	movs	r3, #0
 8000958:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 800095c:	2300      	movs	r3, #0
 800095e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8000962:	2300      	movs	r3, #0
 8000964:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
  uint8_t rx_buf[5] = {0};
 8000968:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	711a      	strb	r2, [r3, #4]
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, SET);
 8000972:	2201      	movs	r2, #1
 8000974:	2110      	movs	r1, #16
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f001 fe81 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800097e:	200a      	movs	r0, #10
 8000980:	f000 fcac 	bl	80012dc <HAL_Delay>
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2110      	movs	r1, #16
 8000988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098c:	f001 fe78 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, tx_buf, rx_buf, sizeof(rx_buf), 0xff);
 8000990:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8000994:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000998:	23ff      	movs	r3, #255	; 0xff
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2305      	movs	r3, #5
 800099e:	482a      	ldr	r0, [pc, #168]	; (8000a48 <main+0x130>)
 80009a0:	f003 fb4b 	bl	800403a <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2110      	movs	r1, #16
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ac:	f001 fe68 	bl	8002680 <HAL_GPIO_WritePin>
  uint32_t serial = rx_buf[1] << 16 | rx_buf[2] << 8 | rx_buf[3];
 80009b0:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80009b4:	041a      	lsls	r2, r3, #16
 80009b6:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	4313      	orrs	r3, r2
 80009be:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
 80009c2:	4313      	orrs	r3, r2
 80009c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  char buf[200];
  sprintf(buf, "---\r\nFlash Serial: %lu | %s\n\r ", serial, serial == 15679512 ? "PASS" : "FAIL");
 80009c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80009cc:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <main+0x134>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d101      	bne.n	80009d6 <main+0xbe>
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <main+0x138>)
 80009d4:	e000      	b.n	80009d8 <main+0xc0>
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <main+0x13c>)
 80009d8:	1d38      	adds	r0, r7, #4
 80009da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80009de:	491e      	ldr	r1, [pc, #120]	; (8000a58 <main+0x140>)
 80009e0:	f005 fa0a 	bl	8005df8 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *) buf, strlen(buf), 0xff);
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fbf2 	bl	80001d0 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	1d39      	adds	r1, r7, #4
 80009f2:	23ff      	movs	r3, #255	; 0xff
 80009f4:	4819      	ldr	r0, [pc, #100]	; (8000a5c <main+0x144>)
 80009f6:	f004 fdc3 	bl	8005580 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Testa os LEDs
	  HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 80009fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fe:	4818      	ldr	r0, [pc, #96]	; (8000a60 <main+0x148>)
 8000a00:	f001 fe56 	bl	80026b0 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(ERR_OUT_GPIO_Port, ERR_OUT_Pin);
 8000a04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a08:	4815      	ldr	r0, [pc, #84]	; (8000a60 <main+0x148>)
 8000a0a:	f001 fe51 	bl	80026b0 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a12:	4813      	ldr	r0, [pc, #76]	; (8000a60 <main+0x148>)
 8000a14:	f001 fe4c 	bl	80026b0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000a18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a1c:	f000 fc5e 	bl	80012dc <HAL_Delay>
	  HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 8000a20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a24:	480e      	ldr	r0, [pc, #56]	; (8000a60 <main+0x148>)
 8000a26:	f001 fe43 	bl	80026b0 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(ERR_OUT_GPIO_Port, ERR_OUT_Pin);
 8000a2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <main+0x148>)
 8000a30:	f001 fe3e 	bl	80026b0 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a38:	4809      	ldr	r0, [pc, #36]	; (8000a60 <main+0x148>)
 8000a3a:	f001 fe39 	bl	80026b0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000a3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a42:	f000 fc4b 	bl	80012dc <HAL_Delay>
	  HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 8000a46:	e7d8      	b.n	80009fa <main+0xe2>
 8000a48:	200001b4 	.word	0x200001b4
 8000a4c:	00ef4018 	.word	0x00ef4018
 8000a50:	0800661c 	.word	0x0800661c
 8000a54:	08006624 	.word	0x08006624
 8000a58:	0800662c 	.word	0x0800662c
 8000a5c:	20000264 	.word	0x20000264
 8000a60:	48000800 	.word	0x48000800

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b09e      	sub	sp, #120	; 0x78
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a6e:	2228      	movs	r2, #40	; 0x28
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f005 f9b8 	bl	8005de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a88:	463b      	mov	r3, r7
 8000a8a:	223c      	movs	r2, #60	; 0x3c
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f005 f9aa 	bl	8005de8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a94:	2301      	movs	r3, #1
 8000a96:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a9c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aae:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ab0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ab4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 fef0 	bl	80028a0 <HAL_RCC_OscConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ac6:	f000 f837 	bl	8000b38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aca:	230f      	movs	r3, #15
 8000acc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ada:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 fde2 	bl	80036b0 <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000af2:	f000 f821 	bl	8000b38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <SystemClock_Config+0xd0>)
 8000af8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000afe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f003 f838 	bl	8003b84 <HAL_RCCEx_PeriphCLKConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b1a:	f000 f80d 	bl	8000b38 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000b24:	2000      	movs	r0, #0
 8000b26:	f002 ff3f 	bl	80039a8 <HAL_RCC_MCOConfig>
}
 8000b2a:	bf00      	nop
 8000b2c:	3778      	adds	r7, #120	; 0x78
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	00021101 	.word	0x00021101

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_SPI1_Init+0x74>)
 8000b4e:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <MX_SPI1_Init+0x78>)
 8000b50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <MX_SPI1_Init+0x74>)
 8000b54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <MX_SPI1_Init+0x74>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_SPI1_Init+0x74>)
 8000b62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_SPI1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_SPI1_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_SPI1_Init+0x74>)
 8000b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_SPI1_Init+0x74>)
 8000b7e:	2208      	movs	r2, #8
 8000b80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_SPI1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_SPI1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_SPI1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_SPI1_Init+0x74>)
 8000b96:	2207      	movs	r2, #7
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_SPI1_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_SPI1_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_SPI1_Init+0x74>)
 8000ba8:	f003 f99c 	bl	8003ee4 <HAL_SPI_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bb2:	f7ff ffc1 	bl	8000b38 <Error_Handler>
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200001b4 	.word	0x200001b4
 8000bc0:	40013000 	.word	0x40013000

08000bc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <HAL_SPI_MspInit+0x7c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d128      	bne.n	8000c38 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_SPI_MspInit+0x80>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	4a16      	ldr	r2, [pc, #88]	; (8000c44 <HAL_SPI_MspInit+0x80>)
 8000bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bf0:	6193      	str	r3, [r2, #24]
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_SPI_MspInit+0x80>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_SPI_MspInit+0x80>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <HAL_SPI_MspInit+0x80>)
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	6153      	str	r3, [r2, #20]
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_SPI_MspInit+0x80>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = FLASH_CLK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin;
 8000c16:	23e0      	movs	r3, #224	; 0xe0
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c26:	2305      	movs	r3, #5
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c34:	f001 fbaa 	bl	800238c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	; 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40013000 	.word	0x40013000
 8000c44:	40021000 	.word	0x40021000

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_MspInit+0x50>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	4a11      	ldr	r2, [pc, #68]	; (8000c98 <HAL_MspInit+0x50>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6193      	str	r3, [r2, #24]
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <HAL_MspInit+0x50>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <HAL_MspInit+0x50>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <HAL_MspInit+0x50>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	61d3      	str	r3, [r2, #28]
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_MspInit+0x50>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	2005      	movs	r0, #5
 8000c84:	f001 fb3f 	bl	8002306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000c88:	2005      	movs	r0, #5
 8000c8a:	f001 fb58 	bl	800233e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf0:	f000 fad4 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000cf4:	f001 fb3d 	bl	8002372 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <_sbrk+0x50>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <_sbrk+0x16>
		heap_end = &end;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <_sbrk+0x50>)
 8000d1e:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <_sbrk+0x54>)
 8000d20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <_sbrk+0x50>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <_sbrk+0x50>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4413      	add	r3, r2
 8000d30:	466a      	mov	r2, sp
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d907      	bls.n	8000d46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d36:	f005 f82d 	bl	8005d94 <__errno>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	230c      	movs	r3, #12
 8000d3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d44:	e006      	b.n	8000d54 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <_sbrk+0x50>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a03      	ldr	r2, [pc, #12]	; (8000d5c <_sbrk+0x50>)
 8000d50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000090 	.word	0x20000090
 8000d60:	200005e0 	.word	0x200005e0

08000d64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b09a      	sub	sp, #104	; 0x68
 8000d8c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	222c      	movs	r2, #44	; 0x2c
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f005 f810 	bl	8005de8 <memset>

  htim1.Instance = TIM1;
 8000dc8:	4b49      	ldr	r3, [pc, #292]	; (8000ef0 <MX_TIM1_Init+0x168>)
 8000dca:	4a4a      	ldr	r2, [pc, #296]	; (8000ef4 <MX_TIM1_Init+0x16c>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dce:	4b48      	ldr	r3, [pc, #288]	; (8000ef0 <MX_TIM1_Init+0x168>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b46      	ldr	r3, [pc, #280]	; (8000ef0 <MX_TIM1_Init+0x168>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000dda:	4b45      	ldr	r3, [pc, #276]	; (8000ef0 <MX_TIM1_Init+0x168>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b43      	ldr	r3, [pc, #268]	; (8000ef0 <MX_TIM1_Init+0x168>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000de6:	4b42      	ldr	r3, [pc, #264]	; (8000ef0 <MX_TIM1_Init+0x168>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dec:	4b40      	ldr	r3, [pc, #256]	; (8000ef0 <MX_TIM1_Init+0x168>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000df2:	483f      	ldr	r0, [pc, #252]	; (8000ef0 <MX_TIM1_Init+0x168>)
 8000df4:	f003 fc90 	bl	8004718 <HAL_TIM_Base_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000dfe:	f7ff fe9b 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4838      	ldr	r0, [pc, #224]	; (8000ef0 <MX_TIM1_Init+0x168>)
 8000e10:	f003 fdb0 	bl	8004974 <HAL_TIM_ConfigClockSource>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e1a:	f7ff fe8d 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000e1e:	4834      	ldr	r0, [pc, #208]	; (8000ef0 <MX_TIM1_Init+0x168>)
 8000e20:	f003 fcd1 	bl	80047c6 <HAL_TIM_OC_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e2a:	f7ff fe85 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e3e:	4619      	mov	r1, r3
 8000e40:	482b      	ldr	r0, [pc, #172]	; (8000ef0 <MX_TIM1_Init+0x168>)
 8000e42:	f004 fa51 	bl	80052e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000e4c:	f7ff fe74 	bl	8000b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e50:	2300      	movs	r3, #0
 8000e52:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e70:	2204      	movs	r2, #4
 8000e72:	4619      	mov	r1, r3
 8000e74:	481e      	ldr	r0, [pc, #120]	; (8000ef0 <MX_TIM1_Init+0x168>)
 8000e76:	f003 fd07 	bl	8004888 <HAL_TIM_OC_ConfigChannel>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000e80:	f7ff fe5a 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e88:	2208      	movs	r2, #8
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4818      	ldr	r0, [pc, #96]	; (8000ef0 <MX_TIM1_Init+0x168>)
 8000e8e:	f003 fcfb 	bl	8004888 <HAL_TIM_OC_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000e98:	f7ff fe4e 	bl	8000b38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <MX_TIM1_Init+0x168>)
 8000ed2:	f004 fa89 	bl	80053e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000edc:	f7ff fe2c 	bl	8000b38 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <MX_TIM1_Init+0x168>)
 8000ee2:	f000 f829 	bl	8000f38 <HAL_TIM_MspPostInit>

}
 8000ee6:	bf00      	nop
 8000ee8:	3768      	adds	r7, #104	; 0x68
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000218 	.word	0x20000218
 8000ef4:	40012c00 	.word	0x40012c00

08000ef8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_TIM_Base_MspInit+0x38>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d10b      	bne.n	8000f22 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_TIM_Base_MspInit+0x3c>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <HAL_TIM_Base_MspInit+0x3c>)
 8000f10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f14:	6193      	str	r3, [r2, #24]
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <HAL_TIM_Base_MspInit+0x3c>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40012c00 	.word	0x40012c00
 8000f34:	40021000 	.word	0x40021000

08000f38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a29      	ldr	r2, [pc, #164]	; (8000ffc <HAL_TIM_MspPostInit+0xc4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d14b      	bne.n	8000ff2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b29      	ldr	r3, [pc, #164]	; (8001000 <HAL_TIM_MspPostInit+0xc8>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a28      	ldr	r2, [pc, #160]	; (8001000 <HAL_TIM_MspPostInit+0xc8>)
 8000f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f64:	6153      	str	r3, [r2, #20]
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <HAL_TIM_MspPostInit+0xc8>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b23      	ldr	r3, [pc, #140]	; (8001000 <HAL_TIM_MspPostInit+0xc8>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a22      	ldr	r2, [pc, #136]	; (8001000 <HAL_TIM_MspPostInit+0xc8>)
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b20      	ldr	r3, [pc, #128]	; (8001000 <HAL_TIM_MspPostInit+0xc8>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = U_L_Pin|V_L_Pin;
 8000f8a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f9c:	2306      	movs	r3, #6
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4817      	ldr	r0, [pc, #92]	; (8001004 <HAL_TIM_MspPostInit+0xcc>)
 8000fa8:	f001 f9f0 	bl	800238c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_L_Pin;
 8000fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_L_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480e      	ldr	r0, [pc, #56]	; (8001004 <HAL_TIM_MspPostInit+0xcc>)
 8000fca:	f001 f9df 	bl	800238c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_H_Pin|W_H_Pin;
 8000fce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fe0:	2306      	movs	r3, #6
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fee:	f001 f9cd 	bl	800238c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40012c00 	.word	0x40012c00
 8001000:	40021000 	.word	0x40021000
 8001004:	48000400 	.word	0x48000400

08001008 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_USART1_UART_Init+0x58>)
 800100e:	4a15      	ldr	r2, [pc, #84]	; (8001064 <MX_USART1_UART_Init+0x5c>)
 8001010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <MX_USART1_UART_Init+0x58>)
 8001014:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_USART1_UART_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_USART1_UART_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_USART1_UART_Init+0x58>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_USART1_UART_Init+0x58>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_USART1_UART_Init+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_USART1_UART_Init+0x58>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_USART1_UART_Init+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_USART1_UART_Init+0x58>)
 8001046:	2200      	movs	r2, #0
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_USART1_UART_Init+0x58>)
 800104c:	f004 fa4a 	bl	80054e4 <HAL_UART_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001056:	f7ff fd6f 	bl	8000b38 <Error_Handler>
  }

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000264 	.word	0x20000264
 8001064:	40013800 	.word	0x40013800

08001068 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <HAL_UART_MspInit+0x7c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d127      	bne.n	80010da <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_UART_MspInit+0x80>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	4a16      	ldr	r2, [pc, #88]	; (80010e8 <HAL_UART_MspInit+0x80>)
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6193      	str	r3, [r2, #24]
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <HAL_UART_MspInit+0x80>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_UART_MspInit+0x80>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <HAL_UART_MspInit+0x80>)
 80010a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ac:	6153      	str	r3, [r2, #20]
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_UART_MspInit+0x80>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = MULTI2_TX_Pin|MULTI3_RX_Pin;
 80010ba:	23c0      	movs	r3, #192	; 0xc0
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ca:	2307      	movs	r3, #7
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <HAL_UART_MspInit+0x84>)
 80010d6:	f001 f959 	bl	800238c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010da:	bf00      	nop
 80010dc:	3728      	adds	r7, #40	; 0x28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40013800 	.word	0x40013800
 80010e8:	40021000 	.word	0x40021000
 80010ec:	48000400 	.word	0x48000400

080010f0 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0

  hpcd_USB_FS.Instance = USB;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <MX_USB_PCD_Init+0x3c>)
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <MX_USB_PCD_Init+0x40>)
 80010f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_USB_PCD_Init+0x3c>)
 80010fc:	2208      	movs	r2, #8
 80010fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <MX_USB_PCD_Init+0x3c>)
 8001102:	2202      	movs	r2, #2
 8001104:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_USB_PCD_Init+0x3c>)
 8001108:	2202      	movs	r2, #2
 800110a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_USB_PCD_Init+0x3c>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_USB_PCD_Init+0x3c>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_USB_PCD_Init+0x3c>)
 800111a:	f001 fae3 	bl	80026e4 <HAL_PCD_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001124:	f7ff fd08 	bl	8000b38 <Error_Handler>
  }

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200002e8 	.word	0x200002e8
 8001130:	40005c00 	.word	0x40005c00

08001134 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <HAL_PCD_MspInit+0x80>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d129      	bne.n	80011aa <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_PCD_MspInit+0x84>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <HAL_PCD_MspInit+0x84>)
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	6153      	str	r3, [r2, #20]
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_PCD_MspInit+0x84>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800116e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001180:	230e      	movs	r3, #14
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118e:	f001 f8fd 	bl	800238c <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_PCD_MspInit+0x84>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <HAL_PCD_MspInit+0x84>)
 8001198:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800119c:	61d3      	str	r3, [r2, #28]
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_PCD_MspInit+0x84>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40005c00 	.word	0x40005c00
 80011b8:	40021000 	.word	0x40021000

080011bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011c2:	490e      	ldr	r1, [pc, #56]	; (80011fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c4:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <LoopForever+0xe>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d8:	4c0b      	ldr	r4, [pc, #44]	; (8001208 <LoopForever+0x16>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011e6:	f7ff fdbd 	bl	8000d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f004 fdd9 	bl	8005da0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ee:	f7ff fb93 	bl	8000918 <main>

080011f2 <LoopForever>:

LoopForever:
    b LoopForever
 80011f2:	e7fe      	b.n	80011f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011f4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001200:	080066c0 	.word	0x080066c0
  ldr r2, =_sbss
 8001204:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001208:	200005dc 	.word	0x200005dc

0800120c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC1_2_IRQHandler>
	...

08001210 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_Init+0x28>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_Init+0x28>)
 800121a:	f043 0310 	orr.w	r3, r3, #16
 800121e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001220:	2003      	movs	r0, #3
 8001222:	f001 f865 	bl	80022f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001226:	2000      	movs	r0, #0
 8001228:	f000 f808 	bl	800123c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800122c:	f7ff fd0c 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40022000 	.word	0x40022000

0800123c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x54>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_InitTick+0x58>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	fbb3 f3f1 	udiv	r3, r3, r1
 8001256:	fbb2 f3f3 	udiv	r3, r2, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f001 f87d 	bl	800235a <HAL_SYSTICK_Config>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e00e      	b.n	8001288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b0f      	cmp	r3, #15
 800126e:	d80a      	bhi.n	8001286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001270:	2200      	movs	r2, #0
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001278:	f001 f845 	bl	8002306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800127c:	4a06      	ldr	r2, [pc, #24]	; (8001298 <HAL_InitTick+0x5c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e000      	b.n	8001288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000000 	.word	0x20000000
 8001294:	20000008 	.word	0x20000008
 8001298:	20000004 	.word	0x20000004

0800129c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x20>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x24>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_IncTick+0x24>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000008 	.word	0x20000008
 80012c0:	200005d4 	.word	0x200005d4

080012c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <HAL_GetTick+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	200005d4 	.word	0x200005d4

080012dc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff ffee 	bl	80012c4 <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012f4:	d005      	beq.n	8001302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_Delay+0x40>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001302:	bf00      	nop
 8001304:	f7ff ffde 	bl	80012c4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f7      	bhi.n	8001304 <HAL_Delay+0x28>
  {
  }
}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000008 	.word	0x20000008

08001320 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b09a      	sub	sp, #104	; 0x68
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800132e:	2300      	movs	r3, #0
 8001330:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e1c9      	b.n	80016d4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	2b00      	cmp	r3, #0
 8001350:	d176      	bne.n	8001440 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	2b00      	cmp	r3, #0
 8001358:	d152      	bne.n	8001400 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff f8c1 	bl	80004fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d13b      	bne.n	8001400 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 fd87 	bl	8001e9c <ADC_Disable>
 800138e:	4603      	mov	r3, r0
 8001390:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	f003 0310 	and.w	r3, r3, #16
 800139c:	2b00      	cmp	r3, #0
 800139e:	d12f      	bne.n	8001400 <HAL_ADC_Init+0xe0>
 80013a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d12b      	bne.n	8001400 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013b0:	f023 0302 	bic.w	r3, r3, #2
 80013b4:	f043 0202 	orr.w	r2, r3, #2
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013ca:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013da:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013dc:	4b86      	ldr	r3, [pc, #536]	; (80015f8 <HAL_ADC_Init+0x2d8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a86      	ldr	r2, [pc, #536]	; (80015fc <HAL_ADC_Init+0x2dc>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	0c9a      	lsrs	r2, r3, #18
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013f2:	e002      	b.n	80013fa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f9      	bne.n	80013f4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d007      	beq.n	800141e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800141c:	d110      	bne.n	8001440 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f023 0312 	bic.w	r3, r3, #18
 8001426:	f043 0210 	orr.w	r2, r3, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f043 0201 	orr.w	r2, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	2b00      	cmp	r3, #0
 800144a:	f040 8136 	bne.w	80016ba <HAL_ADC_Init+0x39a>
 800144e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001452:	2b00      	cmp	r3, #0
 8001454:	f040 8131 	bne.w	80016ba <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 8129 	bne.w	80016ba <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001470:	f043 0202 	orr.w	r2, r3, #2
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001480:	d004      	beq.n	800148c <HAL_ADC_Init+0x16c>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a5e      	ldr	r2, [pc, #376]	; (8001600 <HAL_ADC_Init+0x2e0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d101      	bne.n	8001490 <HAL_ADC_Init+0x170>
 800148c:	4b5d      	ldr	r3, [pc, #372]	; (8001604 <HAL_ADC_Init+0x2e4>)
 800148e:	e000      	b.n	8001492 <HAL_ADC_Init+0x172>
 8001490:	4b5d      	ldr	r3, [pc, #372]	; (8001608 <HAL_ADC_Init+0x2e8>)
 8001492:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800149c:	d102      	bne.n	80014a4 <HAL_ADC_Init+0x184>
 800149e:	4b58      	ldr	r3, [pc, #352]	; (8001600 <HAL_ADC_Init+0x2e0>)
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	e01a      	b.n	80014da <HAL_ADC_Init+0x1ba>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a55      	ldr	r2, [pc, #340]	; (8001600 <HAL_ADC_Init+0x2e0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d103      	bne.n	80014b6 <HAL_ADC_Init+0x196>
 80014ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	e011      	b.n	80014da <HAL_ADC_Init+0x1ba>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a54      	ldr	r2, [pc, #336]	; (800160c <HAL_ADC_Init+0x2ec>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d102      	bne.n	80014c6 <HAL_ADC_Init+0x1a6>
 80014c0:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_ADC_Init+0x2f0>)
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	e009      	b.n	80014da <HAL_ADC_Init+0x1ba>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a51      	ldr	r2, [pc, #324]	; (8001610 <HAL_ADC_Init+0x2f0>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d102      	bne.n	80014d6 <HAL_ADC_Init+0x1b6>
 80014d0:	4b4e      	ldr	r3, [pc, #312]	; (800160c <HAL_ADC_Init+0x2ec>)
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e001      	b.n	80014da <HAL_ADC_Init+0x1ba>
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d108      	bne.n	80014fa <HAL_ADC_Init+0x1da>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_ADC_Init+0x1da>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_ADC_Init+0x1dc>
 80014fa:	2300      	movs	r3, #0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d11c      	bne.n	800153a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001500:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001502:	2b00      	cmp	r3, #0
 8001504:	d010      	beq.n	8001528 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b01      	cmp	r3, #1
 8001510:	d107      	bne.n	8001522 <HAL_ADC_Init+0x202>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_ADC_Init+0x202>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_ADC_Init+0x204>
 8001522:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001524:	2b00      	cmp	r3, #0
 8001526:	d108      	bne.n	800153a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	431a      	orrs	r2, r3
 8001536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001538:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7e5b      	ldrb	r3, [r3, #25]
 800153e:	035b      	lsls	r3, r3, #13
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001544:	2a01      	cmp	r2, #1
 8001546:	d002      	beq.n	800154e <HAL_ADC_Init+0x22e>
 8001548:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800154c:	e000      	b.n	8001550 <HAL_ADC_Init+0x230>
 800154e:	2200      	movs	r2, #0
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	4313      	orrs	r3, r2
 800155e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001560:	4313      	orrs	r3, r2
 8001562:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d11b      	bne.n	80015a6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7e5b      	ldrb	r3, [r3, #25]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d109      	bne.n	800158a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	3b01      	subs	r3, #1
 800157c:	045a      	lsls	r2, r3, #17
 800157e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001580:	4313      	orrs	r3, r2
 8001582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001586:	663b      	str	r3, [r7, #96]	; 0x60
 8001588:	e00d      	b.n	80015a6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001592:	f043 0220 	orr.w	r2, r3, #32
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f043 0201 	orr.w	r2, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d03a      	beq.n	8001624 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a16      	ldr	r2, [pc, #88]	; (800160c <HAL_ADC_Init+0x2ec>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d004      	beq.n	80015c2 <HAL_ADC_Init+0x2a2>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <HAL_ADC_Init+0x2f0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d128      	bne.n	8001614 <HAL_ADC_Init+0x2f4>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80015ca:	d012      	beq.n	80015f2 <HAL_ADC_Init+0x2d2>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015d4:	d00a      	beq.n	80015ec <HAL_ADC_Init+0x2cc>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015da:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80015de:	d002      	beq.n	80015e6 <HAL_ADC_Init+0x2c6>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	e018      	b.n	8001618 <HAL_ADC_Init+0x2f8>
 80015e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ea:	e015      	b.n	8001618 <HAL_ADC_Init+0x2f8>
 80015ec:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80015f0:	e012      	b.n	8001618 <HAL_ADC_Init+0x2f8>
 80015f2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80015f6:	e00f      	b.n	8001618 <HAL_ADC_Init+0x2f8>
 80015f8:	20000000 	.word	0x20000000
 80015fc:	431bde83 	.word	0x431bde83
 8001600:	50000100 	.word	0x50000100
 8001604:	50000300 	.word	0x50000300
 8001608:	50000700 	.word	0x50000700
 800160c:	50000400 	.word	0x50000400
 8001610:	50000500 	.word	0x50000500
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800161c:	4313      	orrs	r3, r2
 800161e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001620:	4313      	orrs	r3, r2
 8001622:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b00      	cmp	r3, #0
 8001630:	d114      	bne.n	800165c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001640:	f023 0302 	bic.w	r3, r3, #2
 8001644:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7e1b      	ldrb	r3, [r3, #24]
 800164a:	039a      	lsls	r2, r3, #14
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4313      	orrs	r3, r2
 8001656:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001658:	4313      	orrs	r3, r2
 800165a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_ADC_Init+0x3bc>)
 8001664:	4013      	ands	r3, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800166c:	430b      	orrs	r3, r1
 800166e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d10c      	bne.n	8001692 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f023 010f 	bic.w	r1, r3, #15
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	1e5a      	subs	r2, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	631a      	str	r2, [r3, #48]	; 0x30
 8001690:	e007      	b.n	80016a2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 020f 	bic.w	r2, r2, #15
 80016a0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f023 0303 	bic.w	r3, r3, #3
 80016b0:	f043 0201 	orr.w	r2, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
 80016b8:	e00a      	b.n	80016d0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f023 0312 	bic.w	r3, r3, #18
 80016c2:	f043 0210 	orr.w	r2, r3, #16
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80016ca:	2301      	movs	r3, #1
 80016cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80016d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3768      	adds	r7, #104	; 0x68
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	fff0c007 	.word	0xfff0c007

080016e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b09b      	sub	sp, #108	; 0x6c
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d101      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x22>
 80016fe:	2302      	movs	r3, #2
 8001700:	e2cb      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x5ba>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	f040 82af 	bne.w	8001c78 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b04      	cmp	r3, #4
 8001720:	d81c      	bhi.n	800175c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	461a      	mov	r2, r3
 8001736:	231f      	movs	r3, #31
 8001738:	4093      	lsls	r3, r2
 800173a:	43db      	mvns	r3, r3
 800173c:	4019      	ands	r1, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	fa00 f203 	lsl.w	r2, r0, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	631a      	str	r2, [r3, #48]	; 0x30
 800175a:	e063      	b.n	8001824 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b09      	cmp	r3, #9
 8001762:	d81e      	bhi.n	80017a2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	3b1e      	subs	r3, #30
 8001778:	221f      	movs	r2, #31
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	4019      	ands	r1, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	3b1e      	subs	r3, #30
 8001794:	fa00 f203 	lsl.w	r2, r0, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	635a      	str	r2, [r3, #52]	; 0x34
 80017a0:	e040      	b.n	8001824 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b0e      	cmp	r3, #14
 80017a8:	d81e      	bhi.n	80017e8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	3b3c      	subs	r3, #60	; 0x3c
 80017be:	221f      	movs	r2, #31
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	4019      	ands	r1, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	3b3c      	subs	r3, #60	; 0x3c
 80017da:	fa00 f203 	lsl.w	r2, r0, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	639a      	str	r2, [r3, #56]	; 0x38
 80017e6:	e01d      	b.n	8001824 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	3b5a      	subs	r3, #90	; 0x5a
 80017fc:	221f      	movs	r2, #31
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	4019      	ands	r1, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	3b5a      	subs	r3, #90	; 0x5a
 8001818:	fa00 f203 	lsl.w	r2, r0, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b00      	cmp	r3, #0
 8001830:	f040 80e5 	bne.w	80019fe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b09      	cmp	r3, #9
 800183a:	d91c      	bls.n	8001876 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6999      	ldr	r1, [r3, #24]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	3b1e      	subs	r3, #30
 800184e:	2207      	movs	r2, #7
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	4019      	ands	r1, r3
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	6898      	ldr	r0, [r3, #8]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	3b1e      	subs	r3, #30
 8001868:	fa00 f203 	lsl.w	r2, r0, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	619a      	str	r2, [r3, #24]
 8001874:	e019      	b.n	80018aa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6959      	ldr	r1, [r3, #20]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	2207      	movs	r2, #7
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	4019      	ands	r1, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	6898      	ldr	r0, [r3, #8]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	fa00 f203 	lsl.w	r2, r0, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	08db      	lsrs	r3, r3, #3
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d84f      	bhi.n	800196c <HAL_ADC_ConfigChannel+0x28c>
 80018cc:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <HAL_ADC_ConfigChannel+0x1f4>)
 80018ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d2:	bf00      	nop
 80018d4:	080018e5 	.word	0x080018e5
 80018d8:	08001907 	.word	0x08001907
 80018dc:	08001929 	.word	0x08001929
 80018e0:	0800194b 	.word	0x0800194b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018ea:	4b9f      	ldr	r3, [pc, #636]	; (8001b68 <HAL_ADC_ConfigChannel+0x488>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	0691      	lsls	r1, r2, #26
 80018f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018f6:	430a      	orrs	r2, r1
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001902:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001904:	e07e      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800190c:	4b96      	ldr	r3, [pc, #600]	; (8001b68 <HAL_ADC_ConfigChannel+0x488>)
 800190e:	4013      	ands	r3, r2
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	0691      	lsls	r1, r2, #26
 8001916:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001918:	430a      	orrs	r2, r1
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001924:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001926:	e06d      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800192e:	4b8e      	ldr	r3, [pc, #568]	; (8001b68 <HAL_ADC_ConfigChannel+0x488>)
 8001930:	4013      	ands	r3, r2
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	0691      	lsls	r1, r2, #26
 8001938:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800193a:	430a      	orrs	r2, r1
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001946:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001948:	e05c      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001950:	4b85      	ldr	r3, [pc, #532]	; (8001b68 <HAL_ADC_ConfigChannel+0x488>)
 8001952:	4013      	ands	r3, r2
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	0691      	lsls	r1, r2, #26
 800195a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800195c:	430a      	orrs	r2, r1
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001968:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800196a:	e04b      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001972:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	069b      	lsls	r3, r3, #26
 800197c:	429a      	cmp	r2, r3
 800197e:	d107      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800198e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001996:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	069b      	lsls	r3, r3, #26
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d107      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019b2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	069b      	lsls	r3, r3, #26
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d107      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019d6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	069b      	lsls	r3, r3, #26
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d10a      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019fa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80019fc:	e001      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80019fe:	bf00      	nop
 8001a00:	e000      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001a02:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d108      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x344>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x344>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x346>
 8001a24:	2300      	movs	r3, #0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f040 8131 	bne.w	8001c8e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d00f      	beq.n	8001a54 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2201      	movs	r2, #1
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a52:	e049      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2201      	movs	r2, #1
 8001a62:	409a      	lsls	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b09      	cmp	r3, #9
 8001a74:	d91c      	bls.n	8001ab0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6999      	ldr	r1, [r3, #24]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	3b1b      	subs	r3, #27
 8001a88:	2207      	movs	r2, #7
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	4019      	ands	r1, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	6898      	ldr	r0, [r3, #8]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3b1b      	subs	r3, #27
 8001aa2:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	619a      	str	r2, [r3, #24]
 8001aae:	e01b      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6959      	ldr	r1, [r3, #20]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4019      	ands	r1, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6898      	ldr	r0, [r3, #8]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001af0:	d004      	beq.n	8001afc <HAL_ADC_ConfigChannel+0x41c>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <HAL_ADC_ConfigChannel+0x48c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x420>
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <HAL_ADC_ConfigChannel+0x490>)
 8001afe:	e000      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x422>
 8001b00:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <HAL_ADC_ConfigChannel+0x494>)
 8001b02:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b10      	cmp	r3, #16
 8001b0a:	d105      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d015      	beq.n	8001b44 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b1c:	2b11      	cmp	r3, #17
 8001b1e:	d105      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00b      	beq.n	8001b44 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b30:	2b12      	cmp	r3, #18
 8001b32:	f040 80ac 	bne.w	8001c8e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f040 80a5 	bne.w	8001c8e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b4c:	d102      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x474>
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <HAL_ADC_ConfigChannel+0x48c>)
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	e023      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x4bc>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_ADC_ConfigChannel+0x48c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d10c      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x498>
 8001b5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e01a      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x4bc>
 8001b66:	bf00      	nop
 8001b68:	83fff000 	.word	0x83fff000
 8001b6c:	50000100 	.word	0x50000100
 8001b70:	50000300 	.word	0x50000300
 8001b74:	50000700 	.word	0x50000700
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a4a      	ldr	r2, [pc, #296]	; (8001ca8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d102      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x4a8>
 8001b82:	4b4a      	ldr	r3, [pc, #296]	; (8001cac <HAL_ADC_ConfigChannel+0x5cc>)
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	e009      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x4bc>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a47      	ldr	r2, [pc, #284]	; (8001cac <HAL_ADC_ConfigChannel+0x5cc>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d102      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x4b8>
 8001b92:	4b45      	ldr	r3, [pc, #276]	; (8001ca8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	e001      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x4bc>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d108      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x4dc>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x4dc>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x4de>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d150      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bc2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d010      	beq.n	8001bea <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d107      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x504>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d101      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x504>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x506>
 8001be4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d13c      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b10      	cmp	r3, #16
 8001bf0:	d11d      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x54e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bfa:	d118      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c06:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c08:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <HAL_ADC_ConfigChannel+0x5d0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a29      	ldr	r2, [pc, #164]	; (8001cb4 <HAL_ADC_ConfigChannel+0x5d4>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	0c9a      	lsrs	r2, r3, #18
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c1e:	e002      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f9      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c2c:	e02e      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b11      	cmp	r3, #17
 8001c34:	d10b      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x56e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c3e:	d106      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c4a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c4c:	e01e      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b12      	cmp	r3, #18
 8001c54:	d11a      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c60:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c62:	e013      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f043 0220 	orr.w	r2, r3, #32
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c76:	e00a      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f043 0220 	orr.w	r2, r3, #32
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c8a:	e000      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c8c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	376c      	adds	r7, #108	; 0x6c
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	50000400 	.word	0x50000400
 8001cac:	50000500 	.word	0x50000500
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	431bde83 	.word	0x431bde83

08001cb8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b099      	sub	sp, #100	; 0x64
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd0:	d102      	bne.n	8001cd8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001cd2:	4b6d      	ldr	r3, [pc, #436]	; (8001e88 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	e01a      	b.n	8001d0e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a6a      	ldr	r2, [pc, #424]	; (8001e88 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d103      	bne.n	8001cea <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001ce2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	e011      	b.n	8001d0e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a67      	ldr	r2, [pc, #412]	; (8001e8c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d102      	bne.n	8001cfa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001cf4:	4b66      	ldr	r3, [pc, #408]	; (8001e90 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	e009      	b.n	8001d0e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a64      	ldr	r2, [pc, #400]	; (8001e90 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d102      	bne.n	8001d0a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001d04:	4b61      	ldr	r3, [pc, #388]	; (8001e8c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	e001      	b.n	8001d0e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0b0      	b.n	8001e7a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e0a9      	b.n	8001e7a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f040 808d 	bne.w	8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f040 8086 	bne.w	8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d54:	d004      	beq.n	8001d60 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a4b      	ldr	r2, [pc, #300]	; (8001e88 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001d60:	4b4c      	ldr	r3, [pc, #304]	; (8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001d62:	e000      	b.n	8001d66 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001d64:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001d66:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d040      	beq.n	8001df2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d82:	035b      	lsls	r3, r3, #13
 8001d84:	430b      	orrs	r3, r1
 8001d86:	431a      	orrs	r2, r3
 8001d88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d8a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d108      	bne.n	8001dac <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001dac:	2300      	movs	r3, #0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d15c      	bne.n	8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d107      	bne.n	8001dce <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001dce:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d14b      	bne.n	8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001dd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ddc:	f023 030f 	bic.w	r3, r3, #15
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	6811      	ldr	r1, [r2, #0]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	6892      	ldr	r2, [r2, #8]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	431a      	orrs	r2, r3
 8001dec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dee:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001df0:	e03c      	b.n	8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dfc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d108      	bne.n	8001e1e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d123      	bne.n	8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d107      	bne.n	8001e40 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001e40:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d112      	bne.n	8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e4e:	f023 030f 	bic.w	r3, r3, #15
 8001e52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e54:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e56:	e009      	b.n	8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f043 0220 	orr.w	r2, r3, #32
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001e6a:	e000      	b.n	8001e6e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e6c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3764      	adds	r7, #100	; 0x64
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	50000100 	.word	0x50000100
 8001e8c:	50000400 	.word	0x50000400
 8001e90:	50000500 	.word	0x50000500
 8001e94:	50000300 	.word	0x50000300
 8001e98:	50000700 	.word	0x50000700

08001e9c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d108      	bne.n	8001ec8 <ADC_Disable+0x2c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <ADC_Disable+0x2c>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <ADC_Disable+0x2e>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d040      	beq.n	8001f50 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 030d 	and.w	r3, r3, #13
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d10f      	bne.n	8001efc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0202 	orr.w	r2, r2, #2
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ef4:	f7ff f9e6 	bl	80012c4 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001efa:	e022      	b.n	8001f42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f043 0210 	orr.w	r2, r3, #16
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0c:	f043 0201 	orr.w	r2, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e01c      	b.n	8001f52 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f18:	f7ff f9d4 	bl	80012c4 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d90d      	bls.n	8001f42 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f043 0210 	orr.w	r2, r3, #16
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e007      	b.n	8001f52 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d0e3      	beq.n	8001f18 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0ed      	b.n	8002148 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d102      	bne.n	8001f7e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7fe fbcf 	bl	800071c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0202 	bic.w	r2, r2, #2
 8001f8c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f8e:	f7ff f999 	bl	80012c4 <HAL_GetTick>
 8001f92:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f94:	e012      	b.n	8001fbc <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f96:	f7ff f995 	bl	80012c4 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b0a      	cmp	r3, #10
 8001fa2:	d90b      	bls.n	8001fbc <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2205      	movs	r2, #5
 8001fb4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0c5      	b.n	8002148 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1e5      	bne.n	8001f96 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0201 	orr.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fda:	f7ff f973 	bl	80012c4 <HAL_GetTick>
 8001fde:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fe0:	e012      	b.n	8002008 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fe2:	f7ff f96f 	bl	80012c4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b0a      	cmp	r3, #10
 8001fee:	d90b      	bls.n	8002008 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2205      	movs	r2, #5
 8002000:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e09f      	b.n	8002148 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0e5      	beq.n	8001fe2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	7e1b      	ldrb	r3, [r3, #24]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d108      	bne.n	8002030 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	e007      	b.n	8002040 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800203e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7e5b      	ldrb	r3, [r3, #25]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d108      	bne.n	800205a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e007      	b.n	800206a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002068:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7e9b      	ldrb	r3, [r3, #26]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d108      	bne.n	8002084 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f042 0220 	orr.w	r2, r2, #32
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	e007      	b.n	8002094 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0220 	bic.w	r2, r2, #32
 8002092:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7edb      	ldrb	r3, [r3, #27]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d108      	bne.n	80020ae <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0210 	bic.w	r2, r2, #16
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	e007      	b.n	80020be <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0210 	orr.w	r2, r2, #16
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7f1b      	ldrb	r3, [r3, #28]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d108      	bne.n	80020d8 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0208 	orr.w	r2, r2, #8
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e007      	b.n	80020e8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0208 	bic.w	r2, r2, #8
 80020e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7f5b      	ldrb	r3, [r3, #29]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d108      	bne.n	8002102 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0204 	orr.w	r2, r2, #4
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	e007      	b.n	8002112 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0204 	bic.w	r2, r2, #4
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	ea42 0103 	orr.w	r1, r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	1e5a      	subs	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800216c:	4013      	ands	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800217c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002182:	4a04      	ldr	r2, [pc, #16]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60d3      	str	r3, [r2, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <__NVIC_GetPriorityGrouping+0x18>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 0307 	and.w	r3, r3, #7
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	db0b      	blt.n	80021de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	f003 021f 	and.w	r2, r3, #31
 80021cc:	4907      	ldr	r1, [pc, #28]	; (80021ec <__NVIC_EnableIRQ+0x38>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2001      	movs	r0, #1
 80021d6:	fa00 f202 	lsl.w	r2, r0, r2
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000e100 	.word	0xe000e100

080021f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	6039      	str	r1, [r7, #0]
 80021fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	db0a      	blt.n	800221a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	490c      	ldr	r1, [pc, #48]	; (800223c <__NVIC_SetPriority+0x4c>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	440b      	add	r3, r1
 8002214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002218:	e00a      	b.n	8002230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4908      	ldr	r1, [pc, #32]	; (8002240 <__NVIC_SetPriority+0x50>)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	3b04      	subs	r3, #4
 8002228:	0112      	lsls	r2, r2, #4
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	440b      	add	r3, r1
 800222e:	761a      	strb	r2, [r3, #24]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000e100 	.word	0xe000e100
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f1c3 0307 	rsb	r3, r3, #7
 800225e:	2b04      	cmp	r3, #4
 8002260:	bf28      	it	cs
 8002262:	2304      	movcs	r3, #4
 8002264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3304      	adds	r3, #4
 800226a:	2b06      	cmp	r3, #6
 800226c:	d902      	bls.n	8002274 <NVIC_EncodePriority+0x30>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3b03      	subs	r3, #3
 8002272:	e000      	b.n	8002276 <NVIC_EncodePriority+0x32>
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	401a      	ands	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800228c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	43d9      	mvns	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	4313      	orrs	r3, r2
         );
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	; 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022bc:	d301      	bcc.n	80022c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022be:	2301      	movs	r3, #1
 80022c0:	e00f      	b.n	80022e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <SysTick_Config+0x40>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ca:	210f      	movs	r1, #15
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022d0:	f7ff ff8e 	bl	80021f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <SysTick_Config+0x40>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <SysTick_Config+0x40>)
 80022dc:	2207      	movs	r2, #7
 80022de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	e000e010 	.word	0xe000e010

080022f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ff29 	bl	8002150 <__NVIC_SetPriorityGrouping>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002318:	f7ff ff3e 	bl	8002198 <__NVIC_GetPriorityGrouping>
 800231c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	6978      	ldr	r0, [r7, #20]
 8002324:	f7ff ff8e 	bl	8002244 <NVIC_EncodePriority>
 8002328:	4602      	mov	r2, r0
 800232a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff5d 	bl	80021f0 <__NVIC_SetPriority>
}
 8002336:	bf00      	nop
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff31 	bl	80021b4 <__NVIC_EnableIRQ>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ffa2 	bl	80022ac <SysTick_Config>
 8002368:	4603      	mov	r3, r0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002376:	f000 f802 	bl	800237e <HAL_SYSTICK_Callback>
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800239a:	e154      	b.n	8002646 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2101      	movs	r1, #1
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	4013      	ands	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8146 	beq.w	8002640 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d00b      	beq.n	80023d4 <HAL_GPIO_Init+0x48>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d007      	beq.n	80023d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023c8:	2b11      	cmp	r3, #17
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b12      	cmp	r3, #18
 80023d2:	d130      	bne.n	8002436 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800240a:	2201      	movs	r2, #1
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	091b      	lsrs	r3, r3, #4
 8002420:	f003 0201 	and.w	r2, r3, #1
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	2203      	movs	r2, #3
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4013      	ands	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0xea>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b12      	cmp	r3, #18
 8002474:	d123      	bne.n	80024be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	08da      	lsrs	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3208      	adds	r2, #8
 800247e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002482:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	220f      	movs	r2, #15
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	08da      	lsrs	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3208      	adds	r2, #8
 80024b8:	6939      	ldr	r1, [r7, #16]
 80024ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	2203      	movs	r2, #3
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0203 	and.w	r2, r3, #3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 80a0 	beq.w	8002640 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002500:	4b58      	ldr	r3, [pc, #352]	; (8002664 <HAL_GPIO_Init+0x2d8>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	4a57      	ldr	r2, [pc, #348]	; (8002664 <HAL_GPIO_Init+0x2d8>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6193      	str	r3, [r2, #24]
 800250c:	4b55      	ldr	r3, [pc, #340]	; (8002664 <HAL_GPIO_Init+0x2d8>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002518:	4a53      	ldr	r2, [pc, #332]	; (8002668 <HAL_GPIO_Init+0x2dc>)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002524:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002542:	d019      	beq.n	8002578 <HAL_GPIO_Init+0x1ec>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a49      	ldr	r2, [pc, #292]	; (800266c <HAL_GPIO_Init+0x2e0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d013      	beq.n	8002574 <HAL_GPIO_Init+0x1e8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a48      	ldr	r2, [pc, #288]	; (8002670 <HAL_GPIO_Init+0x2e4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00d      	beq.n	8002570 <HAL_GPIO_Init+0x1e4>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a47      	ldr	r2, [pc, #284]	; (8002674 <HAL_GPIO_Init+0x2e8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d007      	beq.n	800256c <HAL_GPIO_Init+0x1e0>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a46      	ldr	r2, [pc, #280]	; (8002678 <HAL_GPIO_Init+0x2ec>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d101      	bne.n	8002568 <HAL_GPIO_Init+0x1dc>
 8002564:	2304      	movs	r3, #4
 8002566:	e008      	b.n	800257a <HAL_GPIO_Init+0x1ee>
 8002568:	2305      	movs	r3, #5
 800256a:	e006      	b.n	800257a <HAL_GPIO_Init+0x1ee>
 800256c:	2303      	movs	r3, #3
 800256e:	e004      	b.n	800257a <HAL_GPIO_Init+0x1ee>
 8002570:	2302      	movs	r3, #2
 8002572:	e002      	b.n	800257a <HAL_GPIO_Init+0x1ee>
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <HAL_GPIO_Init+0x1ee>
 8002578:	2300      	movs	r3, #0
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	f002 0203 	and.w	r2, r2, #3
 8002580:	0092      	lsls	r2, r2, #2
 8002582:	4093      	lsls	r3, r2
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800258a:	4937      	ldr	r1, [pc, #220]	; (8002668 <HAL_GPIO_Init+0x2dc>)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	089b      	lsrs	r3, r3, #2
 8002590:	3302      	adds	r3, #2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002598:	4b38      	ldr	r3, [pc, #224]	; (800267c <HAL_GPIO_Init+0x2f0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025bc:	4a2f      	ldr	r2, [pc, #188]	; (800267c <HAL_GPIO_Init+0x2f0>)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025c2:	4b2e      	ldr	r3, [pc, #184]	; (800267c <HAL_GPIO_Init+0x2f0>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025e6:	4a25      	ldr	r2, [pc, #148]	; (800267c <HAL_GPIO_Init+0x2f0>)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ec:	4b23      	ldr	r3, [pc, #140]	; (800267c <HAL_GPIO_Init+0x2f0>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002610:	4a1a      	ldr	r2, [pc, #104]	; (800267c <HAL_GPIO_Init+0x2f0>)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002616:	4b19      	ldr	r3, [pc, #100]	; (800267c <HAL_GPIO_Init+0x2f0>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	43db      	mvns	r3, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800263a:	4a10      	ldr	r2, [pc, #64]	; (800267c <HAL_GPIO_Init+0x2f0>)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3301      	adds	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	f47f aea3 	bne.w	800239c <HAL_GPIO_Init+0x10>
  }
}
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	40010000 	.word	0x40010000
 800266c:	48000400 	.word	0x48000400
 8002670:	48000800 	.word	0x48000800
 8002674:	48000c00 	.word	0x48000c00
 8002678:	48001000 	.word	0x48001000
 800267c:	40010400 	.word	0x40010400

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4013      	ands	r3, r2
 80026c8:	041a      	lsls	r2, r3, #16
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	43d9      	mvns	r1, r3
 80026ce:	887b      	ldrh	r3, [r7, #2]
 80026d0:	400b      	ands	r3, r1
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	619a      	str	r2, [r3, #24]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e6:	b08b      	sub	sp, #44	; 0x2c
 80026e8:	af06      	add	r7, sp, #24
 80026ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0d0      	b.n	8002898 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe fd12 	bl	8001134 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2203      	movs	r2, #3
 8002714:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f003 fafc 	bl	8005d1a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002722:	2300      	movs	r3, #0
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e04c      	b.n	80027c2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	440b      	add	r3, r1
 8002738:	3301      	adds	r3, #1
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	440b      	add	r3, r1
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	b298      	uxth	r0, r3
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	440b      	add	r3, r1
 8002764:	3336      	adds	r3, #54	; 0x36
 8002766:	4602      	mov	r2, r0
 8002768:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	3303      	adds	r3, #3
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	3338      	adds	r3, #56	; 0x38
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	333c      	adds	r3, #60	; 0x3c
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	3340      	adds	r3, #64	; 0x40
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	3301      	adds	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d3ad      	bcc.n	8002728 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e044      	b.n	800285c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027e8:	7bfa      	ldrb	r2, [r7, #15]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	440b      	add	r3, r1
 80027f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	440b      	add	r3, r1
 800280c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	440b      	add	r3, r1
 8002822:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002840:	7bfa      	ldrb	r2, [r7, #15]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	3301      	adds	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	d3b5      	bcc.n	80027d2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	687e      	ldr	r6, [r7, #4]
 800286e:	466d      	mov	r5, sp
 8002870:	f106 0410 	add.w	r4, r6, #16
 8002874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	602b      	str	r3, [r5, #0]
 800287c:	1d33      	adds	r3, r6, #4
 800287e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002880:	6838      	ldr	r0, [r7, #0]
 8002882:	f003 fa65 	bl	8005d50 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028ac:	1d3b      	adds	r3, r7, #4
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f000 bef4 	b.w	80036a2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 816a 	beq.w	8002b9e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028ca:	4bb3      	ldr	r3, [pc, #716]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d00c      	beq.n	80028f0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028d6:	4bb0      	ldr	r3, [pc, #704]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d159      	bne.n	8002996 <HAL_RCC_OscConfig+0xf6>
 80028e2:	4bad      	ldr	r3, [pc, #692]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ee:	d152      	bne.n	8002996 <HAL_RCC_OscConfig+0xf6>
 80028f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002904:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	fab3 f383 	clz	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d102      	bne.n	8002922 <HAL_RCC_OscConfig+0x82>
 800291c:	4b9e      	ldr	r3, [pc, #632]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	e015      	b.n	800294e <HAL_RCC_OscConfig+0xae>
 8002922:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002926:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002936:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800293a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800293e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800294a:	4b93      	ldr	r3, [pc, #588]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002952:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002956:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800295a:	fa92 f2a2 	rbit	r2, r2
 800295e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002962:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002966:	fab2 f282 	clz	r2, r2
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	f042 0220 	orr.w	r2, r2, #32
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f002 021f 	and.w	r2, r2, #31
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f202 	lsl.w	r2, r1, r2
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 810c 	beq.w	8002b9c <HAL_RCC_OscConfig+0x2fc>
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f040 8106 	bne.w	8002b9c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	f000 be86 	b.w	80036a2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a0:	d106      	bne.n	80029b0 <HAL_RCC_OscConfig+0x110>
 80029a2:	4b7d      	ldr	r3, [pc, #500]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a7c      	ldr	r2, [pc, #496]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 80029a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	e030      	b.n	8002a12 <HAL_RCC_OscConfig+0x172>
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x134>
 80029ba:	4b77      	ldr	r3, [pc, #476]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a76      	ldr	r2, [pc, #472]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	4b74      	ldr	r3, [pc, #464]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a73      	ldr	r2, [pc, #460]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 80029cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e01e      	b.n	8002a12 <HAL_RCC_OscConfig+0x172>
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029de:	d10c      	bne.n	80029fa <HAL_RCC_OscConfig+0x15a>
 80029e0:	4b6d      	ldr	r3, [pc, #436]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a6c      	ldr	r2, [pc, #432]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 80029e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	4b6a      	ldr	r3, [pc, #424]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a69      	ldr	r2, [pc, #420]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 80029f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	e00b      	b.n	8002a12 <HAL_RCC_OscConfig+0x172>
 80029fa:	4b67      	ldr	r3, [pc, #412]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a66      	ldr	r2, [pc, #408]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 8002a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b64      	ldr	r3, [pc, #400]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a63      	ldr	r2, [pc, #396]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 8002a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a10:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a12:	4b61      	ldr	r3, [pc, #388]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	f023 020f 	bic.w	r2, r3, #15
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	495d      	ldr	r1, [pc, #372]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a26:	1d3b      	adds	r3, r7, #4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d059      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe fc48 	bl	80012c4 <HAL_GetTick>
 8002a34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a38:	e00a      	b.n	8002a50 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a3a:	f7fe fc43 	bl	80012c4 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d902      	bls.n	8002a50 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	f000 be29 	b.w	80036a2 <HAL_RCC_OscConfig+0xe02>
 8002a50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a54:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002a64:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d102      	bne.n	8002a82 <HAL_RCC_OscConfig+0x1e2>
 8002a7c:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	e015      	b.n	8002aae <HAL_RCC_OscConfig+0x20e>
 8002a82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a86:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a9a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002a9e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002aaa:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ab2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ab6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002aba:	fa92 f2a2 	rbit	r2, r2
 8002abe:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002ac2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ac6:	fab2 f282 	clz	r2, r2
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	f042 0220 	orr.w	r2, r2, #32
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	f002 021f 	and.w	r2, r2, #31
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0ab      	beq.n	8002a3a <HAL_RCC_OscConfig+0x19a>
 8002ae2:	e05c      	b.n	8002b9e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fbee 	bl	80012c4 <HAL_GetTick>
 8002ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aec:	e00a      	b.n	8002b04 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aee:	f7fe fbe9 	bl	80012c4 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	; 0x64
 8002afc:	d902      	bls.n	8002b04 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	f000 bdcf 	b.w	80036a2 <HAL_RCC_OscConfig+0xe02>
 8002b04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b08:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002b18:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d102      	bne.n	8002b36 <HAL_RCC_OscConfig+0x296>
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	e015      	b.n	8002b62 <HAL_RCC_OscConfig+0x2c2>
 8002b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b3a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b52:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <HAL_RCC_OscConfig+0x2f8>)
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b66:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002b6a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002b6e:	fa92 f2a2 	rbit	r2, r2
 8002b72:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002b76:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002b7a:	fab2 f282 	clz	r2, r2
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	f042 0220 	orr.w	r2, r2, #32
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	f002 021f 	and.w	r2, r2, #31
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1ab      	bne.n	8002aee <HAL_RCC_OscConfig+0x24e>
 8002b96:	e002      	b.n	8002b9e <HAL_RCC_OscConfig+0x2fe>
 8002b98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 816f 	beq.w	8002e8c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bae:	4bd0      	ldr	r3, [pc, #832]	; (8002ef0 <HAL_RCC_OscConfig+0x650>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bba:	4bcd      	ldr	r3, [pc, #820]	; (8002ef0 <HAL_RCC_OscConfig+0x650>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d16c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x400>
 8002bc6:	4bca      	ldr	r3, [pc, #808]	; (8002ef0 <HAL_RCC_OscConfig+0x650>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d166      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x400>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002be4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d102      	bne.n	8002c02 <HAL_RCC_OscConfig+0x362>
 8002bfc:	4bbc      	ldr	r3, [pc, #752]	; (8002ef0 <HAL_RCC_OscConfig+0x650>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	e013      	b.n	8002c2a <HAL_RCC_OscConfig+0x38a>
 8002c02:	2302      	movs	r3, #2
 8002c04:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c14:	2302      	movs	r3, #2
 8002c16:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002c26:	4bb2      	ldr	r3, [pc, #712]	; (8002ef0 <HAL_RCC_OscConfig+0x650>)
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c30:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c34:	fa92 f2a2 	rbit	r2, r2
 8002c38:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002c3c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002c40:	fab2 f282 	clz	r2, r2
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	f042 0220 	orr.w	r2, r2, #32
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f002 021f 	and.w	r2, r2, #31
 8002c50:	2101      	movs	r1, #1
 8002c52:	fa01 f202 	lsl.w	r2, r1, r2
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <HAL_RCC_OscConfig+0x3cc>
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d002      	beq.n	8002c6c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	f000 bd1b 	b.w	80036a2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6c:	4ba0      	ldr	r3, [pc, #640]	; (8002ef0 <HAL_RCC_OscConfig+0x650>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	21f8      	movs	r1, #248	; 0xf8
 8002c7c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002c84:	fa91 f1a1 	rbit	r1, r1
 8002c88:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002c8c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002c90:	fab1 f181 	clz	r1, r1
 8002c94:	b2c9      	uxtb	r1, r1
 8002c96:	408b      	lsls	r3, r1
 8002c98:	4995      	ldr	r1, [pc, #596]	; (8002ef0 <HAL_RCC_OscConfig+0x650>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	e0f5      	b.n	8002e8c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8085 	beq.w	8002db6 <HAL_RCC_OscConfig+0x516>
 8002cac:	2301      	movs	r3, #1
 8002cae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002cbe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ccc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd8:	f7fe faf4 	bl	80012c4 <HAL_GetTick>
 8002cdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce2:	f7fe faef 	bl	80012c4 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d902      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	f000 bcd5 	b.w	80036a2 <HAL_RCC_OscConfig+0xe02>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002d0a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d102      	bne.n	8002d28 <HAL_RCC_OscConfig+0x488>
 8002d22:	4b73      	ldr	r3, [pc, #460]	; (8002ef0 <HAL_RCC_OscConfig+0x650>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	e013      	b.n	8002d50 <HAL_RCC_OscConfig+0x4b0>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d40:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002d44:	fa93 f3a3 	rbit	r3, r3
 8002d48:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002d4c:	4b68      	ldr	r3, [pc, #416]	; (8002ef0 <HAL_RCC_OscConfig+0x650>)
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	2202      	movs	r2, #2
 8002d52:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002d56:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d5a:	fa92 f2a2 	rbit	r2, r2
 8002d5e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002d62:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002d66:	fab2 f282 	clz	r2, r2
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	f042 0220 	orr.w	r2, r2, #32
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	f002 021f 	and.w	r2, r2, #31
 8002d76:	2101      	movs	r1, #1
 8002d78:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0af      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d82:	4b5b      	ldr	r3, [pc, #364]	; (8002ef0 <HAL_RCC_OscConfig+0x650>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	21f8      	movs	r1, #248	; 0xf8
 8002d92:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002d9a:	fa91 f1a1 	rbit	r1, r1
 8002d9e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002da2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002da6:	fab1 f181 	clz	r1, r1
 8002daa:	b2c9      	uxtb	r1, r1
 8002dac:	408b      	lsls	r3, r1
 8002dae:	4950      	ldr	r1, [pc, #320]	; (8002ef0 <HAL_RCC_OscConfig+0x650>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	600b      	str	r3, [r1, #0]
 8002db4:	e06a      	b.n	8002e8c <HAL_RCC_OscConfig+0x5ec>
 8002db6:	2301      	movs	r3, #1
 8002db8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002dc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2300      	movs	r3, #0
 8002de0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7fe fa6f 	bl	80012c4 <HAL_GetTick>
 8002de6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dec:	f7fe fa6a 	bl	80012c4 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d902      	bls.n	8002e02 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	f000 bc50 	b.w	80036a2 <HAL_RCC_OscConfig+0xe02>
 8002e02:	2302      	movs	r3, #2
 8002e04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d102      	bne.n	8002e32 <HAL_RCC_OscConfig+0x592>
 8002e2c:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <HAL_RCC_OscConfig+0x650>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	e013      	b.n	8002e5a <HAL_RCC_OscConfig+0x5ba>
 8002e32:	2302      	movs	r3, #2
 8002e34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e44:	2302      	movs	r3, #2
 8002e46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002e56:	4b26      	ldr	r3, [pc, #152]	; (8002ef0 <HAL_RCC_OscConfig+0x650>)
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002e60:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002e64:	fa92 f2a2 	rbit	r2, r2
 8002e68:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002e6c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002e70:	fab2 f282 	clz	r2, r2
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	f042 0220 	orr.w	r2, r2, #32
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	f002 021f 	and.w	r2, r2, #31
 8002e80:	2101      	movs	r1, #1
 8002e82:	fa01 f202 	lsl.w	r2, r1, r2
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1af      	bne.n	8002dec <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80da 	beq.w	8003050 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e9c:	1d3b      	adds	r3, r7, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d069      	beq.n	8002f7a <HAL_RCC_OscConfig+0x6da>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_RCC_OscConfig+0x654>)
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2301      	movs	r3, #1
 8002ece:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed0:	f7fe f9f8 	bl	80012c4 <HAL_GetTick>
 8002ed4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed8:	e00e      	b.n	8002ef8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eda:	f7fe f9f3 	bl	80012c4 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d906      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e3d9      	b.n	80036a2 <HAL_RCC_OscConfig+0xe02>
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	10908120 	.word	0x10908120
 8002ef8:	2302      	movs	r3, #2
 8002efa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f0a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f0e:	2202      	movs	r2, #2
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	fa93 f2a3 	rbit	r2, r3
 8002f1c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f26:	2202      	movs	r2, #2
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	fa93 f2a3 	rbit	r2, r3
 8002f34:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002f38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3a:	4ba5      	ldr	r3, [pc, #660]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 8002f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f3e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002f42:	2102      	movs	r1, #2
 8002f44:	6019      	str	r1, [r3, #0]
 8002f46:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	fa93 f1a3 	rbit	r1, r3
 8002f50:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002f54:	6019      	str	r1, [r3, #0]
  return result;
 8002f56:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	fab3 f383 	clz	r3, r3
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0b0      	beq.n	8002eda <HAL_RCC_OscConfig+0x63a>
 8002f78:	e06a      	b.n	8003050 <HAL_RCC_OscConfig+0x7b0>
 8002f7a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002f90:	601a      	str	r2, [r3, #0]
  return result;
 8002f92:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002f96:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4b8c      	ldr	r3, [pc, #560]	; (80031d4 <HAL_RCC_OscConfig+0x934>)
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2300      	movs	r3, #0
 8002faa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fac:	f7fe f98a 	bl	80012c4 <HAL_GetTick>
 8002fb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb4:	e009      	b.n	8002fca <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb6:	f7fe f985 	bl	80012c4 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e36b      	b.n	80036a2 <HAL_RCC_OscConfig+0xe02>
 8002fca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002fce:	2202      	movs	r2, #2
 8002fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	fa93 f2a3 	rbit	r2, r3
 8002fdc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	fa93 f2a3 	rbit	r2, r3
 8002ff4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002ffe:	2202      	movs	r2, #2
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	fa93 f2a3 	rbit	r2, r3
 800300c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003010:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003012:	4b6f      	ldr	r3, [pc, #444]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 8003014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003016:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800301a:	2102      	movs	r1, #2
 800301c:	6019      	str	r1, [r3, #0]
 800301e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	fa93 f1a3 	rbit	r1, r3
 8003028:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800302c:	6019      	str	r1, [r3, #0]
  return result;
 800302e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1b2      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003050:	1d3b      	adds	r3, r7, #4
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8158 	beq.w	8003310 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003060:	2300      	movs	r3, #0
 8003062:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003066:	4b5a      	ldr	r3, [pc, #360]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d112      	bne.n	8003098 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003072:	4b57      	ldr	r3, [pc, #348]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	4a56      	ldr	r2, [pc, #344]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307c:	61d3      	str	r3, [r2, #28]
 800307e:	4b54      	ldr	r3, [pc, #336]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003086:	f107 0308 	add.w	r3, r7, #8
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	f107 0308 	add.w	r3, r7, #8
 8003090:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003092:	2301      	movs	r3, #1
 8003094:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	4b4f      	ldr	r3, [pc, #316]	; (80031d8 <HAL_RCC_OscConfig+0x938>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d11a      	bne.n	80030da <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030a4:	4b4c      	ldr	r3, [pc, #304]	; (80031d8 <HAL_RCC_OscConfig+0x938>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a4b      	ldr	r2, [pc, #300]	; (80031d8 <HAL_RCC_OscConfig+0x938>)
 80030aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b0:	f7fe f908 	bl	80012c4 <HAL_GetTick>
 80030b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b8:	e009      	b.n	80030ce <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ba:	f7fe f903 	bl	80012c4 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b64      	cmp	r3, #100	; 0x64
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e2e9      	b.n	80036a2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ce:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <HAL_RCC_OscConfig+0x938>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0ef      	beq.n	80030ba <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d106      	bne.n	80030f2 <HAL_RCC_OscConfig+0x852>
 80030e4:	4b3a      	ldr	r3, [pc, #232]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	4a39      	ldr	r2, [pc, #228]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	6213      	str	r3, [r2, #32]
 80030f0:	e02f      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10c      	bne.n	8003116 <HAL_RCC_OscConfig+0x876>
 80030fc:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4a33      	ldr	r2, [pc, #204]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	6213      	str	r3, [r2, #32]
 8003108:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	4a30      	ldr	r2, [pc, #192]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 800310e:	f023 0304 	bic.w	r3, r3, #4
 8003112:	6213      	str	r3, [r2, #32]
 8003114:	e01d      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b05      	cmp	r3, #5
 800311e:	d10c      	bne.n	800313a <HAL_RCC_OscConfig+0x89a>
 8003120:	4b2b      	ldr	r3, [pc, #172]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4a2a      	ldr	r2, [pc, #168]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 8003126:	f043 0304 	orr.w	r3, r3, #4
 800312a:	6213      	str	r3, [r2, #32]
 800312c:	4b28      	ldr	r3, [pc, #160]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4a27      	ldr	r2, [pc, #156]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	6213      	str	r3, [r2, #32]
 8003138:	e00b      	b.n	8003152 <HAL_RCC_OscConfig+0x8b2>
 800313a:	4b25      	ldr	r3, [pc, #148]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	4a24      	ldr	r2, [pc, #144]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 8003140:	f023 0301 	bic.w	r3, r3, #1
 8003144:	6213      	str	r3, [r2, #32]
 8003146:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	4a21      	ldr	r2, [pc, #132]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 800314c:	f023 0304 	bic.w	r3, r3, #4
 8003150:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d06b      	beq.n	8003234 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315c:	f7fe f8b2 	bl	80012c4 <HAL_GetTick>
 8003160:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003164:	e00b      	b.n	800317e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003166:	f7fe f8ad 	bl	80012c4 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	; 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e291      	b.n	80036a2 <HAL_RCC_OscConfig+0xe02>
 800317e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003182:	2202      	movs	r2, #2
 8003184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	fa93 f2a3 	rbit	r2, r3
 8003190:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800319a:	2202      	movs	r2, #2
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	fa93 f2a3 	rbit	r2, r3
 80031a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80031ac:	601a      	str	r2, [r3, #0]
  return result;
 80031ae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80031b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b4:	fab3 f383 	clz	r3, r3
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f043 0302 	orr.w	r3, r3, #2
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d109      	bne.n	80031dc <HAL_RCC_OscConfig+0x93c>
 80031c8:	4b01      	ldr	r3, [pc, #4]	; (80031d0 <HAL_RCC_OscConfig+0x930>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	e014      	b.n	80031f8 <HAL_RCC_OscConfig+0x958>
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000
 80031d4:	10908120 	.word	0x10908120
 80031d8:	40007000 	.word	0x40007000
 80031dc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80031e0:	2202      	movs	r2, #2
 80031e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	fa93 f2a3 	rbit	r2, r3
 80031ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	4bbb      	ldr	r3, [pc, #748]	; (80034e4 <HAL_RCC_OscConfig+0xc44>)
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80031fc:	2102      	movs	r1, #2
 80031fe:	6011      	str	r1, [r2, #0]
 8003200:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	fa92 f1a2 	rbit	r1, r2
 800320a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800320e:	6011      	str	r1, [r2, #0]
  return result;
 8003210:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	fab2 f282 	clz	r2, r2
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	f002 021f 	and.w	r2, r2, #31
 8003226:	2101      	movs	r1, #1
 8003228:	fa01 f202 	lsl.w	r2, r1, r2
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d099      	beq.n	8003166 <HAL_RCC_OscConfig+0x8c6>
 8003232:	e063      	b.n	80032fc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003234:	f7fe f846 	bl	80012c4 <HAL_GetTick>
 8003238:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323c:	e00b      	b.n	8003256 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7fe f841 	bl	80012c4 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	; 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e225      	b.n	80036a2 <HAL_RCC_OscConfig+0xe02>
 8003256:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800325a:	2202      	movs	r2, #2
 800325c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f2a3 	rbit	r2, r3
 8003268:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003272:	2202      	movs	r2, #2
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	fa93 f2a3 	rbit	r2, r3
 8003280:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003284:	601a      	str	r2, [r3, #0]
  return result;
 8003286:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800328a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f043 0302 	orr.w	r3, r3, #2
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d102      	bne.n	80032a6 <HAL_RCC_OscConfig+0xa06>
 80032a0:	4b90      	ldr	r3, [pc, #576]	; (80034e4 <HAL_RCC_OscConfig+0xc44>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	e00d      	b.n	80032c2 <HAL_RCC_OscConfig+0xa22>
 80032a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80032aa:	2202      	movs	r2, #2
 80032ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	fa93 f2a3 	rbit	r2, r3
 80032b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	4b89      	ldr	r3, [pc, #548]	; (80034e4 <HAL_RCC_OscConfig+0xc44>)
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80032c6:	2102      	movs	r1, #2
 80032c8:	6011      	str	r1, [r2, #0]
 80032ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	fa92 f1a2 	rbit	r1, r2
 80032d4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80032d8:	6011      	str	r1, [r2, #0]
  return result;
 80032da:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	fab2 f282 	clz	r2, r2
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	f002 021f 	and.w	r2, r2, #31
 80032f0:	2101      	movs	r1, #1
 80032f2:	fa01 f202 	lsl.w	r2, r1, r2
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1a0      	bne.n	800323e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032fc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003300:	2b01      	cmp	r3, #1
 8003302:	d105      	bne.n	8003310 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003304:	4b77      	ldr	r3, [pc, #476]	; (80034e4 <HAL_RCC_OscConfig+0xc44>)
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	4a76      	ldr	r2, [pc, #472]	; (80034e4 <HAL_RCC_OscConfig+0xc44>)
 800330a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003310:	1d3b      	adds	r3, r7, #4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 81c2 	beq.w	80036a0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800331c:	4b71      	ldr	r3, [pc, #452]	; (80034e4 <HAL_RCC_OscConfig+0xc44>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b08      	cmp	r3, #8
 8003326:	f000 819c 	beq.w	8003662 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800332a:	1d3b      	adds	r3, r7, #4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	2b02      	cmp	r3, #2
 8003332:	f040 8114 	bne.w	800355e <HAL_RCC_OscConfig+0xcbe>
 8003336:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800333a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800333e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	fa93 f2a3 	rbit	r2, r3
 800334a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800334e:	601a      	str	r2, [r3, #0]
  return result;
 8003350:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003354:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003360:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	461a      	mov	r2, r3
 8003368:	2300      	movs	r3, #0
 800336a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fd ffaa 	bl	80012c4 <HAL_GetTick>
 8003370:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003374:	e009      	b.n	800338a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003376:	f7fd ffa5 	bl	80012c4 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e18b      	b.n	80036a2 <HAL_RCC_OscConfig+0xe02>
 800338a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800338e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	fa93 f2a3 	rbit	r2, r3
 800339e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80033a2:	601a      	str	r2, [r3, #0]
  return result;
 80033a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80033a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d102      	bne.n	80033c4 <HAL_RCC_OscConfig+0xb24>
 80033be:	4b49      	ldr	r3, [pc, #292]	; (80034e4 <HAL_RCC_OscConfig+0xc44>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	e01b      	b.n	80033fc <HAL_RCC_OscConfig+0xb5c>
 80033c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80033c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	fa93 f2a3 	rbit	r2, r3
 80033d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80033e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	fa93 f2a3 	rbit	r2, r3
 80033f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	4b3a      	ldr	r3, [pc, #232]	; (80034e4 <HAL_RCC_OscConfig+0xc44>)
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003400:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003404:	6011      	str	r1, [r2, #0]
 8003406:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	fa92 f1a2 	rbit	r1, r2
 8003410:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003414:	6011      	str	r1, [r2, #0]
  return result;
 8003416:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	fab2 f282 	clz	r2, r2
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	f042 0220 	orr.w	r2, r2, #32
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	f002 021f 	and.w	r2, r2, #31
 800342c:	2101      	movs	r1, #1
 800342e:	fa01 f202 	lsl.w	r2, r1, r2
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d19e      	bne.n	8003376 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003438:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <HAL_RCC_OscConfig+0xc44>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003446:	1d3b      	adds	r3, r7, #4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	430b      	orrs	r3, r1
 800344e:	4925      	ldr	r1, [pc, #148]	; (80034e4 <HAL_RCC_OscConfig+0xc44>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
 8003454:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003458:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800345c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	fa93 f2a3 	rbit	r2, r3
 8003468:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800346c:	601a      	str	r2, [r3, #0]
  return result;
 800346e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003472:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003474:	fab3 f383 	clz	r3, r3
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800347e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	461a      	mov	r2, r3
 8003486:	2301      	movs	r3, #1
 8003488:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348a:	f7fd ff1b 	bl	80012c4 <HAL_GetTick>
 800348e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003492:	e009      	b.n	80034a8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003494:	f7fd ff16 	bl	80012c4 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e0fc      	b.n	80036a2 <HAL_RCC_OscConfig+0xe02>
 80034a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	fa93 f2a3 	rbit	r2, r3
 80034bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034c0:	601a      	str	r2, [r3, #0]
  return result;
 80034c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c8:	fab3 f383 	clz	r3, r3
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d105      	bne.n	80034e8 <HAL_RCC_OscConfig+0xc48>
 80034dc:	4b01      	ldr	r3, [pc, #4]	; (80034e4 <HAL_RCC_OscConfig+0xc44>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	e01e      	b.n	8003520 <HAL_RCC_OscConfig+0xc80>
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000
 80034e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	fa93 f2a3 	rbit	r2, r3
 80034fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003506:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	fa93 f2a3 	rbit	r2, r3
 8003516:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	4b63      	ldr	r3, [pc, #396]	; (80036ac <HAL_RCC_OscConfig+0xe0c>)
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003524:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003528:	6011      	str	r1, [r2, #0]
 800352a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	fa92 f1a2 	rbit	r1, r2
 8003534:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003538:	6011      	str	r1, [r2, #0]
  return result;
 800353a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	fab2 f282 	clz	r2, r2
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	f042 0220 	orr.w	r2, r2, #32
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	f002 021f 	and.w	r2, r2, #31
 8003550:	2101      	movs	r1, #1
 8003552:	fa01 f202 	lsl.w	r2, r1, r2
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d09b      	beq.n	8003494 <HAL_RCC_OscConfig+0xbf4>
 800355c:	e0a0      	b.n	80036a0 <HAL_RCC_OscConfig+0xe00>
 800355e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003562:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003566:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003568:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	fa93 f2a3 	rbit	r2, r3
 8003572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003576:	601a      	str	r2, [r3, #0]
  return result;
 8003578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800357c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003588:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	461a      	mov	r2, r3
 8003590:	2300      	movs	r3, #0
 8003592:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fd fe96 	bl	80012c4 <HAL_GetTick>
 8003598:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800359c:	e009      	b.n	80035b2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359e:	f7fd fe91 	bl	80012c4 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e077      	b.n	80036a2 <HAL_RCC_OscConfig+0xe02>
 80035b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	fa93 f2a3 	rbit	r2, r3
 80035c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ca:	601a      	str	r2, [r3, #0]
  return result;
 80035cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d102      	bne.n	80035ec <HAL_RCC_OscConfig+0xd4c>
 80035e6:	4b31      	ldr	r3, [pc, #196]	; (80036ac <HAL_RCC_OscConfig+0xe0c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	e01b      	b.n	8003624 <HAL_RCC_OscConfig+0xd84>
 80035ec:	f107 0320 	add.w	r3, r7, #32
 80035f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	f107 0320 	add.w	r3, r7, #32
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	fa93 f2a3 	rbit	r2, r3
 8003600:	f107 031c 	add.w	r3, r7, #28
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	f107 0318 	add.w	r3, r7, #24
 800360a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	f107 0318 	add.w	r3, r7, #24
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	fa93 f2a3 	rbit	r2, r3
 800361a:	f107 0314 	add.w	r3, r7, #20
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	4b22      	ldr	r3, [pc, #136]	; (80036ac <HAL_RCC_OscConfig+0xe0c>)
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	f107 0210 	add.w	r2, r7, #16
 8003628:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800362c:	6011      	str	r1, [r2, #0]
 800362e:	f107 0210 	add.w	r2, r7, #16
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	fa92 f1a2 	rbit	r1, r2
 8003638:	f107 020c 	add.w	r2, r7, #12
 800363c:	6011      	str	r1, [r2, #0]
  return result;
 800363e:	f107 020c 	add.w	r2, r7, #12
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	fab2 f282 	clz	r2, r2
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	f042 0220 	orr.w	r2, r2, #32
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	f002 021f 	and.w	r2, r2, #31
 8003654:	2101      	movs	r1, #1
 8003656:	fa01 f202 	lsl.w	r2, r1, r2
 800365a:	4013      	ands	r3, r2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d19e      	bne.n	800359e <HAL_RCC_OscConfig+0xcfe>
 8003660:	e01e      	b.n	80036a0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003662:	1d3b      	adds	r3, r7, #4
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e018      	b.n	80036a2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003670:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <HAL_RCC_OscConfig+0xe0c>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003678:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800367c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003680:	1d3b      	adds	r3, r7, #4
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	429a      	cmp	r2, r3
 8003688:	d108      	bne.n	800369c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800368a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800368e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003692:	1d3b      	adds	r3, r7, #4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000

080036b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b09e      	sub	sp, #120	; 0x78
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e162      	b.n	800398e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036c8:	4b90      	ldr	r3, [pc, #576]	; (800390c <HAL_RCC_ClockConfig+0x25c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d910      	bls.n	80036f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b8d      	ldr	r3, [pc, #564]	; (800390c <HAL_RCC_ClockConfig+0x25c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 0207 	bic.w	r2, r3, #7
 80036de:	498b      	ldr	r1, [pc, #556]	; (800390c <HAL_RCC_ClockConfig+0x25c>)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e6:	4b89      	ldr	r3, [pc, #548]	; (800390c <HAL_RCC_ClockConfig+0x25c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e14a      	b.n	800398e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003704:	4b82      	ldr	r3, [pc, #520]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	497f      	ldr	r1, [pc, #508]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 8003712:	4313      	orrs	r3, r2
 8003714:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80dc 	beq.w	80038dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d13c      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xf6>
 800372c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003730:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800373a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373c:	fab3 f383 	clz	r3, r3
 8003740:	b2db      	uxtb	r3, r3
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	b2db      	uxtb	r3, r3
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d102      	bne.n	8003756 <HAL_RCC_ClockConfig+0xa6>
 8003750:	4b6f      	ldr	r3, [pc, #444]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	e00f      	b.n	8003776 <HAL_RCC_ClockConfig+0xc6>
 8003756:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800375a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	667b      	str	r3, [r7, #100]	; 0x64
 8003764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003768:	663b      	str	r3, [r7, #96]	; 0x60
 800376a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800376c:	fa93 f3a3 	rbit	r3, r3
 8003770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003772:	4b67      	ldr	r3, [pc, #412]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800377a:	65ba      	str	r2, [r7, #88]	; 0x58
 800377c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800377e:	fa92 f2a2 	rbit	r2, r2
 8003782:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003784:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003786:	fab2 f282 	clz	r2, r2
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	f042 0220 	orr.w	r2, r2, #32
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	f002 021f 	and.w	r2, r2, #31
 8003796:	2101      	movs	r1, #1
 8003798:	fa01 f202 	lsl.w	r2, r1, r2
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d17b      	bne.n	800389a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e0f3      	b.n	800398e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d13c      	bne.n	8003828 <HAL_RCC_ClockConfig+0x178>
 80037ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b6:	fa93 f3a3 	rbit	r3, r3
 80037ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d102      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x128>
 80037d2:	4b4f      	ldr	r3, [pc, #316]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	e00f      	b.n	80037f8 <HAL_RCC_ClockConfig+0x148>
 80037d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	647b      	str	r3, [r7, #68]	; 0x44
 80037e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ea:	643b      	str	r3, [r7, #64]	; 0x40
 80037ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f4:	4b46      	ldr	r3, [pc, #280]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80037fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003800:	fa92 f2a2 	rbit	r2, r2
 8003804:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003808:	fab2 f282 	clz	r2, r2
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	f042 0220 	orr.w	r2, r2, #32
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	f002 021f 	and.w	r2, r2, #31
 8003818:	2101      	movs	r1, #1
 800381a:	fa01 f202 	lsl.w	r2, r1, r2
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d13a      	bne.n	800389a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0b2      	b.n	800398e <HAL_RCC_ClockConfig+0x2de>
 8003828:	2302      	movs	r3, #2
 800382a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	fa93 f3a3 	rbit	r3, r3
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b01      	cmp	r3, #1
 8003848:	d102      	bne.n	8003850 <HAL_RCC_ClockConfig+0x1a0>
 800384a:	4b31      	ldr	r3, [pc, #196]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	e00d      	b.n	800386c <HAL_RCC_ClockConfig+0x1bc>
 8003850:	2302      	movs	r3, #2
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
 800385c:	2302      	movs	r3, #2
 800385e:	623b      	str	r3, [r7, #32]
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	4b29      	ldr	r3, [pc, #164]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	2202      	movs	r2, #2
 800386e:	61ba      	str	r2, [r7, #24]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	fa92 f2a2 	rbit	r2, r2
 8003876:	617a      	str	r2, [r7, #20]
  return result;
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	fab2 f282 	clz	r2, r2
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	f042 0220 	orr.w	r2, r2, #32
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	f002 021f 	and.w	r2, r2, #31
 800388a:	2101      	movs	r1, #1
 800388c:	fa01 f202 	lsl.w	r2, r1, r2
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e079      	b.n	800398e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389a:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f023 0203 	bic.w	r2, r3, #3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	491a      	ldr	r1, [pc, #104]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038ac:	f7fd fd0a 	bl	80012c4 <HAL_GetTick>
 80038b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b4:	f7fd fd06 	bl	80012c4 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e061      	b.n	800398e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <HAL_RCC_ClockConfig+0x260>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f003 020c 	and.w	r2, r3, #12
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	429a      	cmp	r2, r3
 80038da:	d1eb      	bne.n	80038b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_RCC_ClockConfig+0x25c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d214      	bcs.n	8003914 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b08      	ldr	r3, [pc, #32]	; (800390c <HAL_RCC_ClockConfig+0x25c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 0207 	bic.w	r2, r3, #7
 80038f2:	4906      	ldr	r1, [pc, #24]	; (800390c <HAL_RCC_ClockConfig+0x25c>)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b04      	ldr	r3, [pc, #16]	; (800390c <HAL_RCC_ClockConfig+0x25c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d005      	beq.n	8003914 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e040      	b.n	800398e <HAL_RCC_ClockConfig+0x2de>
 800390c:	40022000 	.word	0x40022000
 8003910:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003920:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <HAL_RCC_ClockConfig+0x2e8>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	491a      	ldr	r1, [pc, #104]	; (8003998 <HAL_RCC_ClockConfig+0x2e8>)
 800392e:	4313      	orrs	r3, r2
 8003930:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800393e:	4b16      	ldr	r3, [pc, #88]	; (8003998 <HAL_RCC_ClockConfig+0x2e8>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4912      	ldr	r1, [pc, #72]	; (8003998 <HAL_RCC_ClockConfig+0x2e8>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003952:	f000 f85b 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 8003956:	4601      	mov	r1, r0
 8003958:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <HAL_RCC_ClockConfig+0x2e8>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003960:	22f0      	movs	r2, #240	; 0xf0
 8003962:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	fa92 f2a2 	rbit	r2, r2
 800396a:	60fa      	str	r2, [r7, #12]
  return result;
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	fab2 f282 	clz	r2, r2
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	40d3      	lsrs	r3, r2
 8003976:	4a09      	ldr	r2, [pc, #36]	; (800399c <HAL_RCC_ClockConfig+0x2ec>)
 8003978:	5cd3      	ldrb	r3, [r2, r3]
 800397a:	fa21 f303 	lsr.w	r3, r1, r3
 800397e:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <HAL_RCC_ClockConfig+0x2f0>)
 8003980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003982:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <HAL_RCC_ClockConfig+0x2f4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fd fc58 	bl	800123c <HAL_InitTick>
  
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3778      	adds	r7, #120	; 0x78
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40021000 	.word	0x40021000
 800399c:	0800664c 	.word	0x0800664c
 80039a0:	20000000 	.word	0x20000000
 80039a4:	20000004 	.word	0x20000004

080039a8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	; 0x28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80039b4:	2302      	movs	r3, #2
 80039b6:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80039b8:	2303      	movs	r3, #3
 80039ba:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 80039c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039c4:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 80039c6:	2300      	movs	r3, #0
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80039ca:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <HAL_RCC_MCOConfig+0x60>)
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	4a0e      	ldr	r2, [pc, #56]	; (8003a08 <HAL_RCC_MCOConfig+0x60>)
 80039d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d4:	6153      	str	r3, [r2, #20]
 80039d6:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <HAL_RCC_MCOConfig+0x60>)
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80039e2:	f107 0314 	add.w	r3, r7, #20
 80039e6:	4619      	mov	r1, r3
 80039e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ec:	f7fe fcce 	bl	800238c <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_RCC_MCOConfig+0x60>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80039f8:	4903      	ldr	r1, [pc, #12]	; (8003a08 <HAL_RCC_MCOConfig+0x60>)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
}
 8003a00:	bf00      	nop
 8003a02:	3728      	adds	r7, #40	; 0x28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40021000 	.word	0x40021000

08003a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b08b      	sub	sp, #44	; 0x2c
 8003a10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a26:	4b29      	ldr	r3, [pc, #164]	; (8003acc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d002      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x30>
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x36>
 8003a3a:	e03c      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a3c:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a3e:	623b      	str	r3, [r7, #32]
      break;
 8003a40:	e03c      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	fa92 f2a2 	rbit	r2, r2
 8003a54:	607a      	str	r2, [r7, #4]
  return result;
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	fab2 f282 	clz	r2, r2
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	40d3      	lsrs	r3, r2
 8003a60:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a62:	5cd3      	ldrb	r3, [r2, r3]
 8003a64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a66:	4b19      	ldr	r3, [pc, #100]	; (8003acc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	220f      	movs	r2, #15
 8003a70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	fa92 f2a2 	rbit	r2, r2
 8003a78:	60fa      	str	r2, [r7, #12]
  return result;
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	fab2 f282 	clz	r2, r2
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	40d3      	lsrs	r3, r2
 8003a84:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a86:	5cd3      	ldrb	r3, [r2, r3]
 8003a88:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a94:	4a0e      	ldr	r2, [pc, #56]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	fb02 f303 	mul.w	r3, r2, r3
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa4:	e004      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	4a0c      	ldr	r2, [pc, #48]	; (8003adc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003aaa:	fb02 f303 	mul.w	r3, r2, r3
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	623b      	str	r3, [r7, #32]
      break;
 8003ab4:	e002      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003ab8:	623b      	str	r3, [r7, #32]
      break;
 8003aba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003abc:	6a3b      	ldr	r3, [r7, #32]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	372c      	adds	r7, #44	; 0x2c
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	00b71b00 	.word	0x00b71b00
 8003ad4:	08006664 	.word	0x08006664
 8003ad8:	08006674 	.word	0x08006674
 8003adc:	003d0900 	.word	0x003d0900
 8003ae0:	007a1200 	.word	0x007a1200

08003ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000000 	.word	0x20000000

08003afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b02:	f7ff ffef 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b06:	4601      	mov	r1, r0
 8003b08:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b10:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	fa92 f2a2 	rbit	r2, r2
 8003b1c:	603a      	str	r2, [r7, #0]
  return result;
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	fab2 f282 	clz	r2, r2
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	40d3      	lsrs	r3, r2
 8003b28:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b2a:	5cd3      	ldrb	r3, [r2, r3]
 8003b2c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	0800665c 	.word	0x0800665c

08003b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b46:	f7ff ffcd 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b4a:	4601      	mov	r1, r0
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b54:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	fa92 f2a2 	rbit	r2, r2
 8003b60:	603a      	str	r2, [r7, #0]
  return result;
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	fab2 f282 	clz	r2, r2
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	40d3      	lsrs	r3, r2
 8003b6c:	4a04      	ldr	r2, [pc, #16]	; (8003b80 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b6e:	5cd3      	ldrb	r3, [r2, r3]
 8003b70:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	0800665c 	.word	0x0800665c

08003b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b092      	sub	sp, #72	; 0x48
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b94:	2300      	movs	r3, #0
 8003b96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80d4 	beq.w	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba8:	4b4e      	ldr	r3, [pc, #312]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10e      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb4:	4b4b      	ldr	r3, [pc, #300]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	4a4a      	ldr	r2, [pc, #296]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	61d3      	str	r3, [r2, #28]
 8003bc0:	4b48      	ldr	r3, [pc, #288]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd2:	4b45      	ldr	r3, [pc, #276]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d118      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bde:	4b42      	ldr	r3, [pc, #264]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a41      	ldr	r2, [pc, #260]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bea:	f7fd fb6b 	bl	80012c4 <HAL_GetTick>
 8003bee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf0:	e008      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf2:	f7fd fb67 	bl	80012c4 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b64      	cmp	r3, #100	; 0x64
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e169      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	4b38      	ldr	r3, [pc, #224]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c10:	4b34      	ldr	r3, [pc, #208]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c18:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8084 	beq.w	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d07c      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c30:	4b2c      	ldr	r3, [pc, #176]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	fa93 f3a3 	rbit	r3, r3
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c4a:	fab3 f383 	clz	r3, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	4b26      	ldr	r3, [pc, #152]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c66:	fa93 f3a3 	rbit	r3, r3
 8003c6a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2300      	movs	r3, #0
 8003c80:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c82:	4a18      	ldr	r2, [pc, #96]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c86:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d04b      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c92:	f7fd fb17 	bl	80012c4 <HAL_GetTick>
 8003c96:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9a:	f7fd fb13 	bl	80012c4 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e113      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	623b      	str	r3, [r7, #32]
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	fa93 f3a3 	rbit	r3, r3
 8003cc6:	61fb      	str	r3, [r7, #28]
  return result;
 8003cc8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	f043 0302 	orr.w	r3, r3, #2
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d108      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003cde:	4b01      	ldr	r3, [pc, #4]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	e00d      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40007000 	.word	0x40007000
 8003cec:	10908100 	.word	0x10908100
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	fa93 f3a3 	rbit	r3, r3
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	4b78      	ldr	r3, [pc, #480]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	2202      	movs	r2, #2
 8003d02:	613a      	str	r2, [r7, #16]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	fa92 f2a2 	rbit	r2, r2
 8003d0a:	60fa      	str	r2, [r7, #12]
  return result;
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	fab2 f282 	clz	r2, r2
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	f002 021f 	and.w	r2, r2, #31
 8003d1e:	2101      	movs	r1, #1
 8003d20:	fa01 f202 	lsl.w	r2, r1, r2
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0b7      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d2a:	4b6d      	ldr	r3, [pc, #436]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	496a      	ldr	r1, [pc, #424]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d105      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d44:	4b66      	ldr	r3, [pc, #408]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	4a65      	ldr	r2, [pc, #404]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d5c:	4b60      	ldr	r3, [pc, #384]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	f023 0203 	bic.w	r2, r3, #3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	495d      	ldr	r1, [pc, #372]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d7a:	4b59      	ldr	r3, [pc, #356]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	4956      	ldr	r1, [pc, #344]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d98:	4b51      	ldr	r3, [pc, #324]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	494e      	ldr	r1, [pc, #312]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003db6:	4b4a      	ldr	r3, [pc, #296]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	f023 0210 	bic.w	r2, r3, #16
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	4947      	ldr	r1, [pc, #284]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003dd4:	4b42      	ldr	r3, [pc, #264]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	493f      	ldr	r1, [pc, #252]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003df2:	4b3b      	ldr	r3, [pc, #236]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f023 0220 	bic.w	r2, r3, #32
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	4938      	ldr	r1, [pc, #224]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e10:	4b33      	ldr	r3, [pc, #204]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	4930      	ldr	r1, [pc, #192]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	4929      	ldr	r1, [pc, #164]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e4c:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	4921      	ldr	r1, [pc, #132]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	491a      	ldr	r1, [pc, #104]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003e88:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	4912      	ldr	r1, [pc, #72]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ea6:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	490b      	ldr	r1, [pc, #44]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ec4:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed0:	4903      	ldr	r1, [pc, #12]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3748      	adds	r7, #72	; 0x48
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000

08003ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e09d      	b.n	8004032 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d108      	bne.n	8003f10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f06:	d009      	beq.n	8003f1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	61da      	str	r2, [r3, #28]
 8003f0e:	e005      	b.n	8003f1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fc fe44 	bl	8000bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f5c:	d902      	bls.n	8003f64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	e002      	b.n	8003f6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f72:	d007      	beq.n	8003f84 <HAL_SPI_Init+0xa0>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f7c:	d002      	beq.n	8003f84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc6:	ea42 0103 	orr.w	r1, r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	0c1b      	lsrs	r3, r3, #16
 8003fe0:	f003 0204 	and.w	r2, r3, #4
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004000:	ea42 0103 	orr.w	r1, r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004020:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b08a      	sub	sp, #40	; 0x28
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004048:	2301      	movs	r3, #1
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_SPI_TransmitReceive+0x26>
 800405c:	2302      	movs	r3, #2
 800405e:	e1fb      	b.n	8004458 <HAL_SPI_TransmitReceive+0x41e>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004068:	f7fd f92c 	bl	80012c4 <HAL_GetTick>
 800406c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004074:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800407c:	887b      	ldrh	r3, [r7, #2]
 800407e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004080:	887b      	ldrh	r3, [r7, #2]
 8004082:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004084:	7efb      	ldrb	r3, [r7, #27]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d00e      	beq.n	80040a8 <HAL_SPI_TransmitReceive+0x6e>
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004090:	d106      	bne.n	80040a0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d102      	bne.n	80040a0 <HAL_SPI_TransmitReceive+0x66>
 800409a:	7efb      	ldrb	r3, [r7, #27]
 800409c:	2b04      	cmp	r3, #4
 800409e:	d003      	beq.n	80040a8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80040a0:	2302      	movs	r3, #2
 80040a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80040a6:	e1cd      	b.n	8004444 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <HAL_SPI_TransmitReceive+0x80>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_SPI_TransmitReceive+0x80>
 80040b4:	887b      	ldrh	r3, [r7, #2]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d103      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80040c0:	e1c0      	b.n	8004444 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d003      	beq.n	80040d6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2205      	movs	r2, #5
 80040d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	887a      	ldrh	r2, [r7, #2]
 80040e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	887a      	ldrh	r2, [r7, #2]
 80040ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	887a      	ldrh	r2, [r7, #2]
 80040fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	887a      	ldrh	r2, [r7, #2]
 8004102:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004118:	d802      	bhi.n	8004120 <HAL_SPI_TransmitReceive+0xe6>
 800411a:	8a3b      	ldrh	r3, [r7, #16]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d908      	bls.n	8004132 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800412e:	605a      	str	r2, [r3, #4]
 8004130:	e007      	b.n	8004142 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004140:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d007      	beq.n	8004160 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800415e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004168:	d97c      	bls.n	8004264 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_SPI_TransmitReceive+0x13e>
 8004172:	8a7b      	ldrh	r3, [r7, #18]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d169      	bne.n	800424c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417c:	881a      	ldrh	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	1c9a      	adds	r2, r3, #2
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800419c:	e056      	b.n	800424c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d11b      	bne.n	80041e4 <HAL_SPI_TransmitReceive+0x1aa>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d016      	beq.n	80041e4 <HAL_SPI_TransmitReceive+0x1aa>
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d113      	bne.n	80041e4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	881a      	ldrh	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	1c9a      	adds	r2, r3, #2
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d11c      	bne.n	800422c <HAL_SPI_TransmitReceive+0x1f2>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d016      	beq.n	800422c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	b292      	uxth	r2, r2
 800420a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	1c9a      	adds	r2, r3, #2
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004228:	2301      	movs	r3, #1
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800422c:	f7fd f84a 	bl	80012c4 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004238:	429a      	cmp	r2, r3
 800423a:	d807      	bhi.n	800424c <HAL_SPI_TransmitReceive+0x212>
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004242:	d003      	beq.n	800424c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800424a:	e0fb      	b.n	8004444 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1a3      	bne.n	800419e <HAL_SPI_TransmitReceive+0x164>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d19d      	bne.n	800419e <HAL_SPI_TransmitReceive+0x164>
 8004262:	e0df      	b.n	8004424 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_SPI_TransmitReceive+0x23a>
 800426c:	8a7b      	ldrh	r3, [r7, #18]
 800426e:	2b01      	cmp	r3, #1
 8004270:	f040 80cb 	bne.w	800440a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b01      	cmp	r3, #1
 800427c:	d912      	bls.n	80042a4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	881a      	ldrh	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	1c9a      	adds	r2, r3, #2
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b02      	subs	r3, #2
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042a2:	e0b2      	b.n	800440a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	7812      	ldrb	r2, [r2, #0]
 80042b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ca:	e09e      	b.n	800440a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d134      	bne.n	8004344 <HAL_SPI_TransmitReceive+0x30a>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042de:	b29b      	uxth	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d02f      	beq.n	8004344 <HAL_SPI_TransmitReceive+0x30a>
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d12c      	bne.n	8004344 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d912      	bls.n	800431a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	881a      	ldrh	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	1c9a      	adds	r2, r3, #2
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b02      	subs	r3, #2
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004318:	e012      	b.n	8004340 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	330c      	adds	r3, #12
 8004324:	7812      	ldrb	r2, [r2, #0]
 8004326:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b01      	cmp	r3, #1
 8004350:	d148      	bne.n	80043e4 <HAL_SPI_TransmitReceive+0x3aa>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d042      	beq.n	80043e4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	d923      	bls.n	80043b2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	b292      	uxth	r2, r2
 8004376:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	1c9a      	adds	r2, r3, #2
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b02      	subs	r3, #2
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	d81f      	bhi.n	80043e0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043ae:	605a      	str	r2, [r3, #4]
 80043b0:	e016      	b.n	80043e0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f103 020c 	add.w	r2, r3, #12
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	7812      	ldrb	r2, [r2, #0]
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043e0:	2301      	movs	r3, #1
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043e4:	f7fc ff6e 	bl	80012c4 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d803      	bhi.n	80043fc <HAL_SPI_TransmitReceive+0x3c2>
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043fa:	d102      	bne.n	8004402 <HAL_SPI_TransmitReceive+0x3c8>
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d103      	bne.n	800440a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004408:	e01c      	b.n	8004444 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	f47f af5b 	bne.w	80042cc <HAL_SPI_TransmitReceive+0x292>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	f47f af54 	bne.w	80042cc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f92f 	bl	800468c <SPI_EndRxTxTransaction>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d006      	beq.n	8004442 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	661a      	str	r2, [r3, #96]	; 0x60
 8004440:	e000      	b.n	8004444 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004442:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004458:	4618      	mov	r0, r3
 800445a:	3728      	adds	r7, #40	; 0x28
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004470:	f7fc ff28 	bl	80012c4 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	4413      	add	r3, r2
 800447e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004480:	f7fc ff20 	bl	80012c4 <HAL_GetTick>
 8004484:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004486:	4b39      	ldr	r3, [pc, #228]	; (800456c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	015b      	lsls	r3, r3, #5
 800448c:	0d1b      	lsrs	r3, r3, #20
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	fb02 f303 	mul.w	r3, r2, r3
 8004494:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004496:	e054      	b.n	8004542 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800449e:	d050      	beq.n	8004542 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044a0:	f7fc ff10 	bl	80012c4 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d902      	bls.n	80044b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d13d      	bne.n	8004532 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ce:	d111      	bne.n	80044f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d8:	d004      	beq.n	80044e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e2:	d107      	bne.n	80044f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044fc:	d10f      	bne.n	800451e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800451c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e017      	b.n	8004562 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	3b01      	subs	r3, #1
 8004540:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4013      	ands	r3, r2
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	429a      	cmp	r2, r3
 8004550:	bf0c      	ite	eq
 8004552:	2301      	moveq	r3, #1
 8004554:	2300      	movne	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	429a      	cmp	r2, r3
 800455e:	d19b      	bne.n	8004498 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000000 	.word	0x20000000

08004570 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800457e:	f7fc fea1 	bl	80012c4 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	4413      	add	r3, r2
 800458c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800458e:	f7fc fe99 	bl	80012c4 <HAL_GetTick>
 8004592:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004594:	4b3c      	ldr	r3, [pc, #240]	; (8004688 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	00da      	lsls	r2, r3, #3
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	0d1b      	lsrs	r3, r3, #20
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	fb02 f303 	mul.w	r3, r2, r3
 80045aa:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80045ac:	e05f      	b.n	800466e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80045b4:	d106      	bne.n	80045c4 <SPI_WaitFifoStateUntilTimeout+0x54>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d103      	bne.n	80045c4 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ca:	d050      	beq.n	800466e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045cc:	f7fc fe7a 	bl	80012c4 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d902      	bls.n	80045e2 <SPI_WaitFifoStateUntilTimeout+0x72>
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d13d      	bne.n	800465e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fa:	d111      	bne.n	8004620 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004604:	d004      	beq.n	8004610 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800460e:	d107      	bne.n	8004620 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800461e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004628:	d10f      	bne.n	800464a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004648:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e010      	b.n	8004680 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	3b01      	subs	r3, #1
 800466c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4013      	ands	r3, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	429a      	cmp	r2, r3
 800467c:	d197      	bne.n	80045ae <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3720      	adds	r7, #32
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20000000 	.word	0x20000000

0800468c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2200      	movs	r2, #0
 80046a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7ff ff63 	bl	8004570 <SPI_WaitFifoStateUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e027      	b.n	8004710 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2200      	movs	r2, #0
 80046c8:	2180      	movs	r1, #128	; 0x80
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7ff fec8 	bl	8004460 <SPI_WaitFlagStateUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d007      	beq.n	80046e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046da:	f043 0220 	orr.w	r2, r3, #32
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e014      	b.n	8004710 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7ff ff3c 	bl	8004570 <SPI_WaitFifoStateUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004702:	f043 0220 	orr.w	r2, r3, #32
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e000      	b.n	8004710 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e049      	b.n	80047be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fc fbda 	bl	8000ef8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f000 f9c6 	bl	8004ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e049      	b.n	800486c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d106      	bne.n	80047f2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f841 	bl	8004874 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3304      	adds	r3, #4
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f000 f96f 	bl	8004ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_TIM_OC_ConfigChannel+0x1a>
 800489e:	2302      	movs	r3, #2
 80048a0:	e064      	b.n	800496c <HAL_TIM_OC_ConfigChannel+0xe4>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b14      	cmp	r3, #20
 80048ae:	d857      	bhi.n	8004960 <HAL_TIM_OC_ConfigChannel+0xd8>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <HAL_TIM_OC_ConfigChannel+0x30>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	0800490d 	.word	0x0800490d
 80048bc:	08004961 	.word	0x08004961
 80048c0:	08004961 	.word	0x08004961
 80048c4:	08004961 	.word	0x08004961
 80048c8:	0800491b 	.word	0x0800491b
 80048cc:	08004961 	.word	0x08004961
 80048d0:	08004961 	.word	0x08004961
 80048d4:	08004961 	.word	0x08004961
 80048d8:	08004929 	.word	0x08004929
 80048dc:	08004961 	.word	0x08004961
 80048e0:	08004961 	.word	0x08004961
 80048e4:	08004961 	.word	0x08004961
 80048e8:	08004937 	.word	0x08004937
 80048ec:	08004961 	.word	0x08004961
 80048f0:	08004961 	.word	0x08004961
 80048f4:	08004961 	.word	0x08004961
 80048f8:	08004945 	.word	0x08004945
 80048fc:	08004961 	.word	0x08004961
 8004900:	08004961 	.word	0x08004961
 8004904:	08004961 	.word	0x08004961
 8004908:	08004953 	.word	0x08004953
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f978 	bl	8004c08 <TIM_OC1_SetConfig>
      break;
 8004918:	e023      	b.n	8004962 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fa01 	bl	8004d28 <TIM_OC2_SetConfig>
      break;
 8004926:	e01c      	b.n	8004962 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fa84 	bl	8004e3c <TIM_OC3_SetConfig>
      break;
 8004934:	e015      	b.n	8004962 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fb05 	bl	8004f4c <TIM_OC4_SetConfig>
      break;
 8004942:	e00e      	b.n	8004962 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fb68 	bl	8005020 <TIM_OC5_SetConfig>
      break;
 8004950:	e007      	b.n	8004962 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fbc5 	bl	80050e8 <TIM_OC6_SetConfig>
      break;
 800495e:	e000      	b.n	8004962 <HAL_TIM_OC_ConfigChannel+0xda>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004960:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_TIM_ConfigClockSource+0x18>
 8004988:	2302      	movs	r3, #2
 800498a:	e0a8      	b.n	8004ade <HAL_TIM_ConfigClockSource+0x16a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b40      	cmp	r3, #64	; 0x40
 80049c6:	d067      	beq.n	8004a98 <HAL_TIM_ConfigClockSource+0x124>
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d80b      	bhi.n	80049e4 <HAL_TIM_ConfigClockSource+0x70>
 80049cc:	2b10      	cmp	r3, #16
 80049ce:	d073      	beq.n	8004ab8 <HAL_TIM_ConfigClockSource+0x144>
 80049d0:	2b10      	cmp	r3, #16
 80049d2:	d802      	bhi.n	80049da <HAL_TIM_ConfigClockSource+0x66>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d06f      	beq.n	8004ab8 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80049d8:	e078      	b.n	8004acc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80049da:	2b20      	cmp	r3, #32
 80049dc:	d06c      	beq.n	8004ab8 <HAL_TIM_ConfigClockSource+0x144>
 80049de:	2b30      	cmp	r3, #48	; 0x30
 80049e0:	d06a      	beq.n	8004ab8 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80049e2:	e073      	b.n	8004acc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80049e4:	2b70      	cmp	r3, #112	; 0x70
 80049e6:	d00d      	beq.n	8004a04 <HAL_TIM_ConfigClockSource+0x90>
 80049e8:	2b70      	cmp	r3, #112	; 0x70
 80049ea:	d804      	bhi.n	80049f6 <HAL_TIM_ConfigClockSource+0x82>
 80049ec:	2b50      	cmp	r3, #80	; 0x50
 80049ee:	d033      	beq.n	8004a58 <HAL_TIM_ConfigClockSource+0xe4>
 80049f0:	2b60      	cmp	r3, #96	; 0x60
 80049f2:	d041      	beq.n	8004a78 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80049f4:	e06a      	b.n	8004acc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80049f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fa:	d066      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x156>
 80049fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a00:	d017      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004a02:	e063      	b.n	8004acc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	6899      	ldr	r1, [r3, #8]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f000 fc48 	bl	80052a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	609a      	str	r2, [r3, #8]
      break;
 8004a30:	e04c      	b.n	8004acc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	6899      	ldr	r1, [r3, #8]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f000 fc31 	bl	80052a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a54:	609a      	str	r2, [r3, #8]
      break;
 8004a56:	e039      	b.n	8004acc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	6859      	ldr	r1, [r3, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	461a      	mov	r2, r3
 8004a66:	f000 fba5 	bl	80051b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2150      	movs	r1, #80	; 0x50
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fbfe 	bl	8005272 <TIM_ITRx_SetConfig>
      break;
 8004a76:	e029      	b.n	8004acc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6818      	ldr	r0, [r3, #0]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	6859      	ldr	r1, [r3, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	461a      	mov	r2, r3
 8004a86:	f000 fbc4 	bl	8005212 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2160      	movs	r1, #96	; 0x60
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fbee 	bl	8005272 <TIM_ITRx_SetConfig>
      break;
 8004a96:	e019      	b.n	8004acc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	6859      	ldr	r1, [r3, #4]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	f000 fb85 	bl	80051b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2140      	movs	r1, #64	; 0x40
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fbde 	bl	8005272 <TIM_ITRx_SetConfig>
      break;
 8004ab6:	e009      	b.n	8004acc <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f000 fbd5 	bl	8005272 <TIM_ITRx_SetConfig>
        break;
 8004ac8:	e000      	b.n	8004acc <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004aca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a3c      	ldr	r2, [pc, #240]	; (8004bec <TIM_Base_SetConfig+0x104>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00f      	beq.n	8004b20 <TIM_Base_SetConfig+0x38>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b06:	d00b      	beq.n	8004b20 <TIM_Base_SetConfig+0x38>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a39      	ldr	r2, [pc, #228]	; (8004bf0 <TIM_Base_SetConfig+0x108>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d007      	beq.n	8004b20 <TIM_Base_SetConfig+0x38>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a38      	ldr	r2, [pc, #224]	; (8004bf4 <TIM_Base_SetConfig+0x10c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <TIM_Base_SetConfig+0x38>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a37      	ldr	r2, [pc, #220]	; (8004bf8 <TIM_Base_SetConfig+0x110>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d108      	bne.n	8004b32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a2d      	ldr	r2, [pc, #180]	; (8004bec <TIM_Base_SetConfig+0x104>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01b      	beq.n	8004b72 <TIM_Base_SetConfig+0x8a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b40:	d017      	beq.n	8004b72 <TIM_Base_SetConfig+0x8a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a2a      	ldr	r2, [pc, #168]	; (8004bf0 <TIM_Base_SetConfig+0x108>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d013      	beq.n	8004b72 <TIM_Base_SetConfig+0x8a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a29      	ldr	r2, [pc, #164]	; (8004bf4 <TIM_Base_SetConfig+0x10c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00f      	beq.n	8004b72 <TIM_Base_SetConfig+0x8a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a28      	ldr	r2, [pc, #160]	; (8004bf8 <TIM_Base_SetConfig+0x110>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00b      	beq.n	8004b72 <TIM_Base_SetConfig+0x8a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a27      	ldr	r2, [pc, #156]	; (8004bfc <TIM_Base_SetConfig+0x114>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d007      	beq.n	8004b72 <TIM_Base_SetConfig+0x8a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a26      	ldr	r2, [pc, #152]	; (8004c00 <TIM_Base_SetConfig+0x118>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d003      	beq.n	8004b72 <TIM_Base_SetConfig+0x8a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a25      	ldr	r2, [pc, #148]	; (8004c04 <TIM_Base_SetConfig+0x11c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d108      	bne.n	8004b84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a10      	ldr	r2, [pc, #64]	; (8004bec <TIM_Base_SetConfig+0x104>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00f      	beq.n	8004bd0 <TIM_Base_SetConfig+0xe8>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a11      	ldr	r2, [pc, #68]	; (8004bf8 <TIM_Base_SetConfig+0x110>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00b      	beq.n	8004bd0 <TIM_Base_SetConfig+0xe8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a10      	ldr	r2, [pc, #64]	; (8004bfc <TIM_Base_SetConfig+0x114>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d007      	beq.n	8004bd0 <TIM_Base_SetConfig+0xe8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a0f      	ldr	r2, [pc, #60]	; (8004c00 <TIM_Base_SetConfig+0x118>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_Base_SetConfig+0xe8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a0e      	ldr	r2, [pc, #56]	; (8004c04 <TIM_Base_SetConfig+0x11c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d103      	bne.n	8004bd8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	615a      	str	r2, [r3, #20]
}
 8004bde:	bf00      	nop
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40012c00 	.word	0x40012c00
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40013400 	.word	0x40013400
 8004bfc:	40014000 	.word	0x40014000
 8004c00:	40014400 	.word	0x40014400
 8004c04:	40014800 	.word	0x40014800

08004c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	f023 0201 	bic.w	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0303 	bic.w	r3, r3, #3
 8004c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f023 0302 	bic.w	r3, r3, #2
 8004c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a2c      	ldr	r2, [pc, #176]	; (8004d14 <TIM_OC1_SetConfig+0x10c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00f      	beq.n	8004c88 <TIM_OC1_SetConfig+0x80>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a2b      	ldr	r2, [pc, #172]	; (8004d18 <TIM_OC1_SetConfig+0x110>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00b      	beq.n	8004c88 <TIM_OC1_SetConfig+0x80>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a2a      	ldr	r2, [pc, #168]	; (8004d1c <TIM_OC1_SetConfig+0x114>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d007      	beq.n	8004c88 <TIM_OC1_SetConfig+0x80>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a29      	ldr	r2, [pc, #164]	; (8004d20 <TIM_OC1_SetConfig+0x118>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_OC1_SetConfig+0x80>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a28      	ldr	r2, [pc, #160]	; (8004d24 <TIM_OC1_SetConfig+0x11c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d10c      	bne.n	8004ca2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f023 0308 	bic.w	r3, r3, #8
 8004c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f023 0304 	bic.w	r3, r3, #4
 8004ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a1b      	ldr	r2, [pc, #108]	; (8004d14 <TIM_OC1_SetConfig+0x10c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00f      	beq.n	8004cca <TIM_OC1_SetConfig+0xc2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a1a      	ldr	r2, [pc, #104]	; (8004d18 <TIM_OC1_SetConfig+0x110>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00b      	beq.n	8004cca <TIM_OC1_SetConfig+0xc2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a19      	ldr	r2, [pc, #100]	; (8004d1c <TIM_OC1_SetConfig+0x114>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d007      	beq.n	8004cca <TIM_OC1_SetConfig+0xc2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a18      	ldr	r2, [pc, #96]	; (8004d20 <TIM_OC1_SetConfig+0x118>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d003      	beq.n	8004cca <TIM_OC1_SetConfig+0xc2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a17      	ldr	r2, [pc, #92]	; (8004d24 <TIM_OC1_SetConfig+0x11c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d111      	bne.n	8004cee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	621a      	str	r2, [r3, #32]
}
 8004d08:	bf00      	nop
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40013400 	.word	0x40013400
 8004d1c:	40014000 	.word	0x40014000
 8004d20:	40014400 	.word	0x40014400
 8004d24:	40014800 	.word	0x40014800

08004d28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f023 0210 	bic.w	r2, r3, #16
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f023 0320 	bic.w	r3, r3, #32
 8004d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a28      	ldr	r2, [pc, #160]	; (8004e28 <TIM_OC2_SetConfig+0x100>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_OC2_SetConfig+0x6c>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a27      	ldr	r2, [pc, #156]	; (8004e2c <TIM_OC2_SetConfig+0x104>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d10d      	bne.n	8004db0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a1d      	ldr	r2, [pc, #116]	; (8004e28 <TIM_OC2_SetConfig+0x100>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00f      	beq.n	8004dd8 <TIM_OC2_SetConfig+0xb0>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <TIM_OC2_SetConfig+0x104>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00b      	beq.n	8004dd8 <TIM_OC2_SetConfig+0xb0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <TIM_OC2_SetConfig+0x108>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d007      	beq.n	8004dd8 <TIM_OC2_SetConfig+0xb0>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a1a      	ldr	r2, [pc, #104]	; (8004e34 <TIM_OC2_SetConfig+0x10c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_OC2_SetConfig+0xb0>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a19      	ldr	r2, [pc, #100]	; (8004e38 <TIM_OC2_SetConfig+0x110>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d113      	bne.n	8004e00 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dde:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004de6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	621a      	str	r2, [r3, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40012c00 	.word	0x40012c00
 8004e2c:	40013400 	.word	0x40013400
 8004e30:	40014000 	.word	0x40014000
 8004e34:	40014400 	.word	0x40014400
 8004e38:	40014800 	.word	0x40014800

08004e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0303 	bic.w	r3, r3, #3
 8004e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a27      	ldr	r2, [pc, #156]	; (8004f38 <TIM_OC3_SetConfig+0xfc>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d003      	beq.n	8004ea6 <TIM_OC3_SetConfig+0x6a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a26      	ldr	r2, [pc, #152]	; (8004f3c <TIM_OC3_SetConfig+0x100>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d10d      	bne.n	8004ec2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ec0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a1c      	ldr	r2, [pc, #112]	; (8004f38 <TIM_OC3_SetConfig+0xfc>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00f      	beq.n	8004eea <TIM_OC3_SetConfig+0xae>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a1b      	ldr	r2, [pc, #108]	; (8004f3c <TIM_OC3_SetConfig+0x100>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00b      	beq.n	8004eea <TIM_OC3_SetConfig+0xae>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a1a      	ldr	r2, [pc, #104]	; (8004f40 <TIM_OC3_SetConfig+0x104>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <TIM_OC3_SetConfig+0xae>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a19      	ldr	r2, [pc, #100]	; (8004f44 <TIM_OC3_SetConfig+0x108>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d003      	beq.n	8004eea <TIM_OC3_SetConfig+0xae>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a18      	ldr	r2, [pc, #96]	; (8004f48 <TIM_OC3_SetConfig+0x10c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d113      	bne.n	8004f12 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	621a      	str	r2, [r3, #32]
}
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40013400 	.word	0x40013400
 8004f40:	40014000 	.word	0x40014000
 8004f44:	40014400 	.word	0x40014400
 8004f48:	40014800 	.word	0x40014800

08004f4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	031b      	lsls	r3, r3, #12
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a18      	ldr	r2, [pc, #96]	; (800500c <TIM_OC4_SetConfig+0xc0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00f      	beq.n	8004fd0 <TIM_OC4_SetConfig+0x84>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a17      	ldr	r2, [pc, #92]	; (8005010 <TIM_OC4_SetConfig+0xc4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d00b      	beq.n	8004fd0 <TIM_OC4_SetConfig+0x84>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a16      	ldr	r2, [pc, #88]	; (8005014 <TIM_OC4_SetConfig+0xc8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d007      	beq.n	8004fd0 <TIM_OC4_SetConfig+0x84>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a15      	ldr	r2, [pc, #84]	; (8005018 <TIM_OC4_SetConfig+0xcc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d003      	beq.n	8004fd0 <TIM_OC4_SetConfig+0x84>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a14      	ldr	r2, [pc, #80]	; (800501c <TIM_OC4_SetConfig+0xd0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d109      	bne.n	8004fe4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	019b      	lsls	r3, r3, #6
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	621a      	str	r2, [r3, #32]
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40013400 	.word	0x40013400
 8005014:	40014000 	.word	0x40014000
 8005018:	40014400 	.word	0x40014400
 800501c:	40014800 	.word	0x40014800

08005020 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005064:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	041b      	lsls	r3, r3, #16
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a17      	ldr	r2, [pc, #92]	; (80050d4 <TIM_OC5_SetConfig+0xb4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00f      	beq.n	800509a <TIM_OC5_SetConfig+0x7a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <TIM_OC5_SetConfig+0xb8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00b      	beq.n	800509a <TIM_OC5_SetConfig+0x7a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a15      	ldr	r2, [pc, #84]	; (80050dc <TIM_OC5_SetConfig+0xbc>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d007      	beq.n	800509a <TIM_OC5_SetConfig+0x7a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a14      	ldr	r2, [pc, #80]	; (80050e0 <TIM_OC5_SetConfig+0xc0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d003      	beq.n	800509a <TIM_OC5_SetConfig+0x7a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a13      	ldr	r2, [pc, #76]	; (80050e4 <TIM_OC5_SetConfig+0xc4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d109      	bne.n	80050ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	621a      	str	r2, [r3, #32]
}
 80050c8:	bf00      	nop
 80050ca:	371c      	adds	r7, #28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	40012c00 	.word	0x40012c00
 80050d8:	40013400 	.word	0x40013400
 80050dc:	40014000 	.word	0x40014000
 80050e0:	40014400 	.word	0x40014400
 80050e4:	40014800 	.word	0x40014800

080050e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800511a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	021b      	lsls	r3, r3, #8
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800512e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	051b      	lsls	r3, r3, #20
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <TIM_OC6_SetConfig+0xb8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00f      	beq.n	8005164 <TIM_OC6_SetConfig+0x7c>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a17      	ldr	r2, [pc, #92]	; (80051a4 <TIM_OC6_SetConfig+0xbc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00b      	beq.n	8005164 <TIM_OC6_SetConfig+0x7c>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a16      	ldr	r2, [pc, #88]	; (80051a8 <TIM_OC6_SetConfig+0xc0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d007      	beq.n	8005164 <TIM_OC6_SetConfig+0x7c>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a15      	ldr	r2, [pc, #84]	; (80051ac <TIM_OC6_SetConfig+0xc4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d003      	beq.n	8005164 <TIM_OC6_SetConfig+0x7c>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a14      	ldr	r2, [pc, #80]	; (80051b0 <TIM_OC6_SetConfig+0xc8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d109      	bne.n	8005178 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800516a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	029b      	lsls	r3, r3, #10
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	621a      	str	r2, [r3, #32]
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40012c00 	.word	0x40012c00
 80051a4:	40013400 	.word	0x40013400
 80051a8:	40014000 	.word	0x40014000
 80051ac:	40014400 	.word	0x40014400
 80051b0:	40014800 	.word	0x40014800

080051b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f023 0201 	bic.w	r2, r3, #1
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f023 030a 	bic.w	r3, r3, #10
 80051f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005212:	b480      	push	{r7}
 8005214:	b087      	sub	sp, #28
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f023 0210 	bic.w	r2, r3, #16
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800523c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	031b      	lsls	r3, r3, #12
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800524e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	621a      	str	r2, [r3, #32]
}
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005272:	b480      	push	{r7}
 8005274:	b085      	sub	sp, #20
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005288:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	f043 0307 	orr.w	r3, r3, #7
 8005294:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	609a      	str	r2, [r3, #8]
}
 800529c:	bf00      	nop
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	021a      	lsls	r2, r3, #8
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	431a      	orrs	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	609a      	str	r2, [r3, #8]
}
 80052dc:	bf00      	nop
 80052de:	371c      	adds	r7, #28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e063      	b.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a2b      	ldr	r2, [pc, #172]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d004      	beq.n	8005334 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a2a      	ldr	r2, [pc, #168]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d108      	bne.n	8005346 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800533a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1b      	ldr	r2, [pc, #108]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d018      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005372:	d013      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a18      	ldr	r2, [pc, #96]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00e      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a17      	ldr	r2, [pc, #92]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d009      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a12      	ldr	r2, [pc, #72]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d004      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a13      	ldr	r2, [pc, #76]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d10c      	bne.n	80053b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	40012c00 	.word	0x40012c00
 80053d8:	40013400 	.word	0x40013400
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40014000 	.word	0x40014000

080053e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005400:	2302      	movs	r3, #2
 8005402:	e065      	b.n	80054d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	041b      	lsls	r3, r3, #16
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a16      	ldr	r2, [pc, #88]	; (80054dc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a14      	ldr	r2, [pc, #80]	; (80054e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d115      	bne.n	80054be <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	051b      	lsls	r3, r3, #20
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40013400 	.word	0x40013400

080054e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e040      	b.n	8005578 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7fb fdae 	bl	8001068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2224      	movs	r2, #36	; 0x24
 8005510:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0201 	bic.w	r2, r2, #1
 8005520:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f8c0 	bl	80056a8 <UART_SetConfig>
 8005528:	4603      	mov	r3, r0
 800552a:	2b01      	cmp	r3, #1
 800552c:	d101      	bne.n	8005532 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e022      	b.n	8005578 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fa86 	bl	8005a4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800554e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800555e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fb0d 	bl	8005b90 <UART_CheckIdleState>
 8005576:	4603      	mov	r3, r0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	; 0x28
 8005584:	af02      	add	r7, sp, #8
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005594:	2b20      	cmp	r3, #32
 8005596:	f040 8082 	bne.w	800569e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <HAL_UART_Transmit+0x26>
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e07a      	b.n	80056a0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_UART_Transmit+0x38>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e073      	b.n	80056a0 <HAL_UART_Transmit+0x120>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2221      	movs	r2, #33	; 0x21
 80055cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055ce:	f7fb fe79 	bl	80012c4 <HAL_GetTick>
 80055d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	88fa      	ldrh	r2, [r7, #6]
 80055d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	88fa      	ldrh	r2, [r7, #6]
 80055e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ec:	d108      	bne.n	8005600 <HAL_UART_Transmit+0x80>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d104      	bne.n	8005600 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	e003      	b.n	8005608 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005604:	2300      	movs	r3, #0
 8005606:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005610:	e02d      	b.n	800566e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2200      	movs	r2, #0
 800561a:	2180      	movs	r1, #128	; 0x80
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fb00 	bl	8005c22 <UART_WaitOnFlagUntilTimeout>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e039      	b.n	80056a0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10b      	bne.n	800564a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	881a      	ldrh	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800563e:	b292      	uxth	r2, r2
 8005640:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	3302      	adds	r3, #2
 8005646:	61bb      	str	r3, [r7, #24]
 8005648:	e008      	b.n	800565c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	781a      	ldrb	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	b292      	uxth	r2, r2
 8005654:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	3301      	adds	r3, #1
 800565a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1cb      	bne.n	8005612 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2200      	movs	r2, #0
 8005682:	2140      	movs	r1, #64	; 0x40
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 facc 	bl	8005c22 <UART_WaitOnFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e005      	b.n	80056a0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2220      	movs	r2, #32
 8005698:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	e000      	b.n	80056a0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800569e:	2302      	movs	r3, #2
  }
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80056d6:	f023 030c 	bic.w	r3, r3, #12
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6812      	ldr	r2, [r2, #0]
 80056de:	6979      	ldr	r1, [r7, #20]
 80056e0:	430b      	orrs	r3, r1
 80056e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	430a      	orrs	r2, r1
 800571c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4aad      	ldr	r2, [pc, #692]	; (80059d8 <UART_SetConfig+0x330>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d121      	bne.n	800576c <UART_SetConfig+0xc4>
 8005728:	4bac      	ldr	r3, [pc, #688]	; (80059dc <UART_SetConfig+0x334>)
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	f003 0303 	and.w	r3, r3, #3
 8005730:	2b03      	cmp	r3, #3
 8005732:	d817      	bhi.n	8005764 <UART_SetConfig+0xbc>
 8005734:	a201      	add	r2, pc, #4	; (adr r2, 800573c <UART_SetConfig+0x94>)
 8005736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573a:	bf00      	nop
 800573c:	0800574d 	.word	0x0800574d
 8005740:	08005759 	.word	0x08005759
 8005744:	0800575f 	.word	0x0800575f
 8005748:	08005753 	.word	0x08005753
 800574c:	2301      	movs	r3, #1
 800574e:	77fb      	strb	r3, [r7, #31]
 8005750:	e0b2      	b.n	80058b8 <UART_SetConfig+0x210>
 8005752:	2302      	movs	r3, #2
 8005754:	77fb      	strb	r3, [r7, #31]
 8005756:	e0af      	b.n	80058b8 <UART_SetConfig+0x210>
 8005758:	2304      	movs	r3, #4
 800575a:	77fb      	strb	r3, [r7, #31]
 800575c:	e0ac      	b.n	80058b8 <UART_SetConfig+0x210>
 800575e:	2308      	movs	r3, #8
 8005760:	77fb      	strb	r3, [r7, #31]
 8005762:	e0a9      	b.n	80058b8 <UART_SetConfig+0x210>
 8005764:	2310      	movs	r3, #16
 8005766:	77fb      	strb	r3, [r7, #31]
 8005768:	bf00      	nop
 800576a:	e0a5      	b.n	80058b8 <UART_SetConfig+0x210>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a9b      	ldr	r2, [pc, #620]	; (80059e0 <UART_SetConfig+0x338>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d123      	bne.n	80057be <UART_SetConfig+0x116>
 8005776:	4b99      	ldr	r3, [pc, #612]	; (80059dc <UART_SetConfig+0x334>)
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800577e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005782:	d012      	beq.n	80057aa <UART_SetConfig+0x102>
 8005784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005788:	d802      	bhi.n	8005790 <UART_SetConfig+0xe8>
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <UART_SetConfig+0xf6>
 800578e:	e012      	b.n	80057b6 <UART_SetConfig+0x10e>
 8005790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005794:	d00c      	beq.n	80057b0 <UART_SetConfig+0x108>
 8005796:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800579a:	d003      	beq.n	80057a4 <UART_SetConfig+0xfc>
 800579c:	e00b      	b.n	80057b6 <UART_SetConfig+0x10e>
 800579e:	2300      	movs	r3, #0
 80057a0:	77fb      	strb	r3, [r7, #31]
 80057a2:	e089      	b.n	80058b8 <UART_SetConfig+0x210>
 80057a4:	2302      	movs	r3, #2
 80057a6:	77fb      	strb	r3, [r7, #31]
 80057a8:	e086      	b.n	80058b8 <UART_SetConfig+0x210>
 80057aa:	2304      	movs	r3, #4
 80057ac:	77fb      	strb	r3, [r7, #31]
 80057ae:	e083      	b.n	80058b8 <UART_SetConfig+0x210>
 80057b0:	2308      	movs	r3, #8
 80057b2:	77fb      	strb	r3, [r7, #31]
 80057b4:	e080      	b.n	80058b8 <UART_SetConfig+0x210>
 80057b6:	2310      	movs	r3, #16
 80057b8:	77fb      	strb	r3, [r7, #31]
 80057ba:	bf00      	nop
 80057bc:	e07c      	b.n	80058b8 <UART_SetConfig+0x210>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a88      	ldr	r2, [pc, #544]	; (80059e4 <UART_SetConfig+0x33c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d123      	bne.n	8005810 <UART_SetConfig+0x168>
 80057c8:	4b84      	ldr	r3, [pc, #528]	; (80059dc <UART_SetConfig+0x334>)
 80057ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057cc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80057d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057d4:	d012      	beq.n	80057fc <UART_SetConfig+0x154>
 80057d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057da:	d802      	bhi.n	80057e2 <UART_SetConfig+0x13a>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d007      	beq.n	80057f0 <UART_SetConfig+0x148>
 80057e0:	e012      	b.n	8005808 <UART_SetConfig+0x160>
 80057e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80057e6:	d00c      	beq.n	8005802 <UART_SetConfig+0x15a>
 80057e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80057ec:	d003      	beq.n	80057f6 <UART_SetConfig+0x14e>
 80057ee:	e00b      	b.n	8005808 <UART_SetConfig+0x160>
 80057f0:	2300      	movs	r3, #0
 80057f2:	77fb      	strb	r3, [r7, #31]
 80057f4:	e060      	b.n	80058b8 <UART_SetConfig+0x210>
 80057f6:	2302      	movs	r3, #2
 80057f8:	77fb      	strb	r3, [r7, #31]
 80057fa:	e05d      	b.n	80058b8 <UART_SetConfig+0x210>
 80057fc:	2304      	movs	r3, #4
 80057fe:	77fb      	strb	r3, [r7, #31]
 8005800:	e05a      	b.n	80058b8 <UART_SetConfig+0x210>
 8005802:	2308      	movs	r3, #8
 8005804:	77fb      	strb	r3, [r7, #31]
 8005806:	e057      	b.n	80058b8 <UART_SetConfig+0x210>
 8005808:	2310      	movs	r3, #16
 800580a:	77fb      	strb	r3, [r7, #31]
 800580c:	bf00      	nop
 800580e:	e053      	b.n	80058b8 <UART_SetConfig+0x210>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a74      	ldr	r2, [pc, #464]	; (80059e8 <UART_SetConfig+0x340>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d123      	bne.n	8005862 <UART_SetConfig+0x1ba>
 800581a:	4b70      	ldr	r3, [pc, #448]	; (80059dc <UART_SetConfig+0x334>)
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005826:	d012      	beq.n	800584e <UART_SetConfig+0x1a6>
 8005828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800582c:	d802      	bhi.n	8005834 <UART_SetConfig+0x18c>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <UART_SetConfig+0x19a>
 8005832:	e012      	b.n	800585a <UART_SetConfig+0x1b2>
 8005834:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005838:	d00c      	beq.n	8005854 <UART_SetConfig+0x1ac>
 800583a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800583e:	d003      	beq.n	8005848 <UART_SetConfig+0x1a0>
 8005840:	e00b      	b.n	800585a <UART_SetConfig+0x1b2>
 8005842:	2300      	movs	r3, #0
 8005844:	77fb      	strb	r3, [r7, #31]
 8005846:	e037      	b.n	80058b8 <UART_SetConfig+0x210>
 8005848:	2302      	movs	r3, #2
 800584a:	77fb      	strb	r3, [r7, #31]
 800584c:	e034      	b.n	80058b8 <UART_SetConfig+0x210>
 800584e:	2304      	movs	r3, #4
 8005850:	77fb      	strb	r3, [r7, #31]
 8005852:	e031      	b.n	80058b8 <UART_SetConfig+0x210>
 8005854:	2308      	movs	r3, #8
 8005856:	77fb      	strb	r3, [r7, #31]
 8005858:	e02e      	b.n	80058b8 <UART_SetConfig+0x210>
 800585a:	2310      	movs	r3, #16
 800585c:	77fb      	strb	r3, [r7, #31]
 800585e:	bf00      	nop
 8005860:	e02a      	b.n	80058b8 <UART_SetConfig+0x210>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a61      	ldr	r2, [pc, #388]	; (80059ec <UART_SetConfig+0x344>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d123      	bne.n	80058b4 <UART_SetConfig+0x20c>
 800586c:	4b5b      	ldr	r3, [pc, #364]	; (80059dc <UART_SetConfig+0x334>)
 800586e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005870:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005878:	d012      	beq.n	80058a0 <UART_SetConfig+0x1f8>
 800587a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800587e:	d802      	bhi.n	8005886 <UART_SetConfig+0x1de>
 8005880:	2b00      	cmp	r3, #0
 8005882:	d007      	beq.n	8005894 <UART_SetConfig+0x1ec>
 8005884:	e012      	b.n	80058ac <UART_SetConfig+0x204>
 8005886:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800588a:	d00c      	beq.n	80058a6 <UART_SetConfig+0x1fe>
 800588c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005890:	d003      	beq.n	800589a <UART_SetConfig+0x1f2>
 8005892:	e00b      	b.n	80058ac <UART_SetConfig+0x204>
 8005894:	2300      	movs	r3, #0
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e00e      	b.n	80058b8 <UART_SetConfig+0x210>
 800589a:	2302      	movs	r3, #2
 800589c:	77fb      	strb	r3, [r7, #31]
 800589e:	e00b      	b.n	80058b8 <UART_SetConfig+0x210>
 80058a0:	2304      	movs	r3, #4
 80058a2:	77fb      	strb	r3, [r7, #31]
 80058a4:	e008      	b.n	80058b8 <UART_SetConfig+0x210>
 80058a6:	2308      	movs	r3, #8
 80058a8:	77fb      	strb	r3, [r7, #31]
 80058aa:	e005      	b.n	80058b8 <UART_SetConfig+0x210>
 80058ac:	2310      	movs	r3, #16
 80058ae:	77fb      	strb	r3, [r7, #31]
 80058b0:	bf00      	nop
 80058b2:	e001      	b.n	80058b8 <UART_SetConfig+0x210>
 80058b4:	2310      	movs	r3, #16
 80058b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c0:	d15d      	bne.n	800597e <UART_SetConfig+0x2d6>
  {
    switch (clocksource)
 80058c2:	7ffb      	ldrb	r3, [r7, #31]
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d828      	bhi.n	800591a <UART_SetConfig+0x272>
 80058c8:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <UART_SetConfig+0x228>)
 80058ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ce:	bf00      	nop
 80058d0:	080058f5 	.word	0x080058f5
 80058d4:	080058fd 	.word	0x080058fd
 80058d8:	08005905 	.word	0x08005905
 80058dc:	0800591b 	.word	0x0800591b
 80058e0:	0800590b 	.word	0x0800590b
 80058e4:	0800591b 	.word	0x0800591b
 80058e8:	0800591b 	.word	0x0800591b
 80058ec:	0800591b 	.word	0x0800591b
 80058f0:	08005913 	.word	0x08005913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f4:	f7fe f902 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 80058f8:	61b8      	str	r0, [r7, #24]
        break;
 80058fa:	e013      	b.n	8005924 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058fc:	f7fe f920 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8005900:	61b8      	str	r0, [r7, #24]
        break;
 8005902:	e00f      	b.n	8005924 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005904:	4b3a      	ldr	r3, [pc, #232]	; (80059f0 <UART_SetConfig+0x348>)
 8005906:	61bb      	str	r3, [r7, #24]
        break;
 8005908:	e00c      	b.n	8005924 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800590a:	f7fe f87f 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 800590e:	61b8      	str	r0, [r7, #24]
        break;
 8005910:	e008      	b.n	8005924 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005916:	61bb      	str	r3, [r7, #24]
        break;
 8005918:	e004      	b.n	8005924 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	77bb      	strb	r3, [r7, #30]
        break;
 8005922:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 8085 	beq.w	8005a36 <UART_SetConfig+0x38e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	005a      	lsls	r2, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	085b      	lsrs	r3, r3, #1
 8005936:	441a      	add	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005940:	b29b      	uxth	r3, r3
 8005942:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	2b0f      	cmp	r3, #15
 8005948:	d916      	bls.n	8005978 <UART_SetConfig+0x2d0>
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005950:	d212      	bcs.n	8005978 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	b29b      	uxth	r3, r3
 8005956:	f023 030f 	bic.w	r3, r3, #15
 800595a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	b29b      	uxth	r3, r3
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	b29a      	uxth	r2, r3
 8005968:	89fb      	ldrh	r3, [r7, #14]
 800596a:	4313      	orrs	r3, r2
 800596c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	89fa      	ldrh	r2, [r7, #14]
 8005974:	60da      	str	r2, [r3, #12]
 8005976:	e05e      	b.n	8005a36 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	77bb      	strb	r3, [r7, #30]
 800597c:	e05b      	b.n	8005a36 <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800597e:	7ffb      	ldrb	r3, [r7, #31]
 8005980:	2b08      	cmp	r3, #8
 8005982:	d837      	bhi.n	80059f4 <UART_SetConfig+0x34c>
 8005984:	a201      	add	r2, pc, #4	; (adr r2, 800598c <UART_SetConfig+0x2e4>)
 8005986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598a:	bf00      	nop
 800598c:	080059b1 	.word	0x080059b1
 8005990:	080059b9 	.word	0x080059b9
 8005994:	080059c1 	.word	0x080059c1
 8005998:	080059f5 	.word	0x080059f5
 800599c:	080059c7 	.word	0x080059c7
 80059a0:	080059f5 	.word	0x080059f5
 80059a4:	080059f5 	.word	0x080059f5
 80059a8:	080059f5 	.word	0x080059f5
 80059ac:	080059cf 	.word	0x080059cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059b0:	f7fe f8a4 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 80059b4:	61b8      	str	r0, [r7, #24]
        break;
 80059b6:	e022      	b.n	80059fe <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059b8:	f7fe f8c2 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 80059bc:	61b8      	str	r0, [r7, #24]
        break;
 80059be:	e01e      	b.n	80059fe <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <UART_SetConfig+0x348>)
 80059c2:	61bb      	str	r3, [r7, #24]
        break;
 80059c4:	e01b      	b.n	80059fe <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059c6:	f7fe f821 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80059ca:	61b8      	str	r0, [r7, #24]
        break;
 80059cc:	e017      	b.n	80059fe <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059d2:	61bb      	str	r3, [r7, #24]
        break;
 80059d4:	e013      	b.n	80059fe <UART_SetConfig+0x356>
 80059d6:	bf00      	nop
 80059d8:	40013800 	.word	0x40013800
 80059dc:	40021000 	.word	0x40021000
 80059e0:	40004400 	.word	0x40004400
 80059e4:	40004800 	.word	0x40004800
 80059e8:	40004c00 	.word	0x40004c00
 80059ec:	40005000 	.word	0x40005000
 80059f0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	77bb      	strb	r3, [r7, #30]
        break;
 80059fc:	bf00      	nop
    }

    if (pclk != 0U)
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d018      	beq.n	8005a36 <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	085a      	lsrs	r2, r3, #1
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	441a      	add	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b0f      	cmp	r3, #15
 8005a1e:	d908      	bls.n	8005a32 <UART_SetConfig+0x38a>
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a26:	d204      	bcs.n	8005a32 <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = usartdiv;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	60da      	str	r2, [r3, #12]
 8005a30:	e001      	b.n	8005a36 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a42:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3720      	adds	r7, #32
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00a      	beq.n	8005aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	f003 0310 	and.w	r3, r3, #16
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01a      	beq.n	8005b62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b4a:	d10a      	bne.n	8005b62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	605a      	str	r2, [r3, #4]
  }
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ba0:	f7fb fb90 	bl	80012c4 <HAL_GetTick>
 8005ba4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d10e      	bne.n	8005bd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f82d 	bl	8005c22 <UART_WaitOnFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e023      	b.n	8005c1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d10e      	bne.n	8005bfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005be0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f817 	bl	8005c22 <UART_WaitOnFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e00d      	b.n	8005c1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2220      	movs	r2, #32
 8005c02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2220      	movs	r2, #32
 8005c08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b084      	sub	sp, #16
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	603b      	str	r3, [r7, #0]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c32:	e05e      	b.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c3a:	d05a      	beq.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c3c:	f7fb fb42 	bl	80012c4 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d302      	bcc.n	8005c52 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d11b      	bne.n	8005c8a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0201 	bic.w	r2, r2, #1
 8005c70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e043      	b.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d02c      	beq.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca6:	d124      	bne.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cb0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cc0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0201 	bic.w	r2, r2, #1
 8005cd0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e00f      	b.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69da      	ldr	r2, [r3, #28]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	bf0c      	ite	eq
 8005d02:	2301      	moveq	r3, #1
 8005d04:	2300      	movne	r3, #0
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	461a      	mov	r2, r3
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d091      	beq.n	8005c34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b085      	sub	sp, #20
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d22:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005d26:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	43db      	mvns	r3, r3
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	4013      	ands	r3, r2
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d50:	b084      	sub	sp, #16
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	f107 0014 	add.w	r0, r7, #20
 8005d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	b004      	add	sp, #16
 8005d90:	4770      	bx	lr
	...

08005d94 <__errno>:
 8005d94:	4b01      	ldr	r3, [pc, #4]	; (8005d9c <__errno+0x8>)
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	2000000c 	.word	0x2000000c

08005da0 <__libc_init_array>:
 8005da0:	b570      	push	{r4, r5, r6, lr}
 8005da2:	4e0d      	ldr	r6, [pc, #52]	; (8005dd8 <__libc_init_array+0x38>)
 8005da4:	4c0d      	ldr	r4, [pc, #52]	; (8005ddc <__libc_init_array+0x3c>)
 8005da6:	1ba4      	subs	r4, r4, r6
 8005da8:	10a4      	asrs	r4, r4, #2
 8005daa:	2500      	movs	r5, #0
 8005dac:	42a5      	cmp	r5, r4
 8005dae:	d109      	bne.n	8005dc4 <__libc_init_array+0x24>
 8005db0:	4e0b      	ldr	r6, [pc, #44]	; (8005de0 <__libc_init_array+0x40>)
 8005db2:	4c0c      	ldr	r4, [pc, #48]	; (8005de4 <__libc_init_array+0x44>)
 8005db4:	f000 fc26 	bl	8006604 <_init>
 8005db8:	1ba4      	subs	r4, r4, r6
 8005dba:	10a4      	asrs	r4, r4, #2
 8005dbc:	2500      	movs	r5, #0
 8005dbe:	42a5      	cmp	r5, r4
 8005dc0:	d105      	bne.n	8005dce <__libc_init_array+0x2e>
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dc8:	4798      	blx	r3
 8005dca:	3501      	adds	r5, #1
 8005dcc:	e7ee      	b.n	8005dac <__libc_init_array+0xc>
 8005dce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dd2:	4798      	blx	r3
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	e7f2      	b.n	8005dbe <__libc_init_array+0x1e>
 8005dd8:	080066b8 	.word	0x080066b8
 8005ddc:	080066b8 	.word	0x080066b8
 8005de0:	080066b8 	.word	0x080066b8
 8005de4:	080066bc 	.word	0x080066bc

08005de8 <memset>:
 8005de8:	4402      	add	r2, r0
 8005dea:	4603      	mov	r3, r0
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d100      	bne.n	8005df2 <memset+0xa>
 8005df0:	4770      	bx	lr
 8005df2:	f803 1b01 	strb.w	r1, [r3], #1
 8005df6:	e7f9      	b.n	8005dec <memset+0x4>

08005df8 <siprintf>:
 8005df8:	b40e      	push	{r1, r2, r3}
 8005dfa:	b500      	push	{lr}
 8005dfc:	b09c      	sub	sp, #112	; 0x70
 8005dfe:	ab1d      	add	r3, sp, #116	; 0x74
 8005e00:	9002      	str	r0, [sp, #8]
 8005e02:	9006      	str	r0, [sp, #24]
 8005e04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e08:	4809      	ldr	r0, [pc, #36]	; (8005e30 <siprintf+0x38>)
 8005e0a:	9107      	str	r1, [sp, #28]
 8005e0c:	9104      	str	r1, [sp, #16]
 8005e0e:	4909      	ldr	r1, [pc, #36]	; (8005e34 <siprintf+0x3c>)
 8005e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e14:	9105      	str	r1, [sp, #20]
 8005e16:	6800      	ldr	r0, [r0, #0]
 8005e18:	9301      	str	r3, [sp, #4]
 8005e1a:	a902      	add	r1, sp, #8
 8005e1c:	f000 f866 	bl	8005eec <_svfiprintf_r>
 8005e20:	9b02      	ldr	r3, [sp, #8]
 8005e22:	2200      	movs	r2, #0
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	b01c      	add	sp, #112	; 0x70
 8005e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e2c:	b003      	add	sp, #12
 8005e2e:	4770      	bx	lr
 8005e30:	2000000c 	.word	0x2000000c
 8005e34:	ffff0208 	.word	0xffff0208

08005e38 <__ssputs_r>:
 8005e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	688e      	ldr	r6, [r1, #8]
 8005e3e:	429e      	cmp	r6, r3
 8005e40:	4682      	mov	sl, r0
 8005e42:	460c      	mov	r4, r1
 8005e44:	4690      	mov	r8, r2
 8005e46:	4699      	mov	r9, r3
 8005e48:	d837      	bhi.n	8005eba <__ssputs_r+0x82>
 8005e4a:	898a      	ldrh	r2, [r1, #12]
 8005e4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e50:	d031      	beq.n	8005eb6 <__ssputs_r+0x7e>
 8005e52:	6825      	ldr	r5, [r4, #0]
 8005e54:	6909      	ldr	r1, [r1, #16]
 8005e56:	1a6f      	subs	r7, r5, r1
 8005e58:	6965      	ldr	r5, [r4, #20]
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e60:	fb95 f5f3 	sdiv	r5, r5, r3
 8005e64:	f109 0301 	add.w	r3, r9, #1
 8005e68:	443b      	add	r3, r7
 8005e6a:	429d      	cmp	r5, r3
 8005e6c:	bf38      	it	cc
 8005e6e:	461d      	movcc	r5, r3
 8005e70:	0553      	lsls	r3, r2, #21
 8005e72:	d530      	bpl.n	8005ed6 <__ssputs_r+0x9e>
 8005e74:	4629      	mov	r1, r5
 8005e76:	f000 fb2b 	bl	80064d0 <_malloc_r>
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	b950      	cbnz	r0, 8005e94 <__ssputs_r+0x5c>
 8005e7e:	230c      	movs	r3, #12
 8005e80:	f8ca 3000 	str.w	r3, [sl]
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e8a:	81a3      	strh	r3, [r4, #12]
 8005e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e94:	463a      	mov	r2, r7
 8005e96:	6921      	ldr	r1, [r4, #16]
 8005e98:	f000 faa8 	bl	80063ec <memcpy>
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	6126      	str	r6, [r4, #16]
 8005eaa:	6165      	str	r5, [r4, #20]
 8005eac:	443e      	add	r6, r7
 8005eae:	1bed      	subs	r5, r5, r7
 8005eb0:	6026      	str	r6, [r4, #0]
 8005eb2:	60a5      	str	r5, [r4, #8]
 8005eb4:	464e      	mov	r6, r9
 8005eb6:	454e      	cmp	r6, r9
 8005eb8:	d900      	bls.n	8005ebc <__ssputs_r+0x84>
 8005eba:	464e      	mov	r6, r9
 8005ebc:	4632      	mov	r2, r6
 8005ebe:	4641      	mov	r1, r8
 8005ec0:	6820      	ldr	r0, [r4, #0]
 8005ec2:	f000 fa9e 	bl	8006402 <memmove>
 8005ec6:	68a3      	ldr	r3, [r4, #8]
 8005ec8:	1b9b      	subs	r3, r3, r6
 8005eca:	60a3      	str	r3, [r4, #8]
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	441e      	add	r6, r3
 8005ed0:	6026      	str	r6, [r4, #0]
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	e7dc      	b.n	8005e90 <__ssputs_r+0x58>
 8005ed6:	462a      	mov	r2, r5
 8005ed8:	f000 fb54 	bl	8006584 <_realloc_r>
 8005edc:	4606      	mov	r6, r0
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	d1e2      	bne.n	8005ea8 <__ssputs_r+0x70>
 8005ee2:	6921      	ldr	r1, [r4, #16]
 8005ee4:	4650      	mov	r0, sl
 8005ee6:	f000 faa5 	bl	8006434 <_free_r>
 8005eea:	e7c8      	b.n	8005e7e <__ssputs_r+0x46>

08005eec <_svfiprintf_r>:
 8005eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef0:	461d      	mov	r5, r3
 8005ef2:	898b      	ldrh	r3, [r1, #12]
 8005ef4:	061f      	lsls	r7, r3, #24
 8005ef6:	b09d      	sub	sp, #116	; 0x74
 8005ef8:	4680      	mov	r8, r0
 8005efa:	460c      	mov	r4, r1
 8005efc:	4616      	mov	r6, r2
 8005efe:	d50f      	bpl.n	8005f20 <_svfiprintf_r+0x34>
 8005f00:	690b      	ldr	r3, [r1, #16]
 8005f02:	b96b      	cbnz	r3, 8005f20 <_svfiprintf_r+0x34>
 8005f04:	2140      	movs	r1, #64	; 0x40
 8005f06:	f000 fae3 	bl	80064d0 <_malloc_r>
 8005f0a:	6020      	str	r0, [r4, #0]
 8005f0c:	6120      	str	r0, [r4, #16]
 8005f0e:	b928      	cbnz	r0, 8005f1c <_svfiprintf_r+0x30>
 8005f10:	230c      	movs	r3, #12
 8005f12:	f8c8 3000 	str.w	r3, [r8]
 8005f16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f1a:	e0c8      	b.n	80060ae <_svfiprintf_r+0x1c2>
 8005f1c:	2340      	movs	r3, #64	; 0x40
 8005f1e:	6163      	str	r3, [r4, #20]
 8005f20:	2300      	movs	r3, #0
 8005f22:	9309      	str	r3, [sp, #36]	; 0x24
 8005f24:	2320      	movs	r3, #32
 8005f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f2a:	2330      	movs	r3, #48	; 0x30
 8005f2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f30:	9503      	str	r5, [sp, #12]
 8005f32:	f04f 0b01 	mov.w	fp, #1
 8005f36:	4637      	mov	r7, r6
 8005f38:	463d      	mov	r5, r7
 8005f3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f3e:	b10b      	cbz	r3, 8005f44 <_svfiprintf_r+0x58>
 8005f40:	2b25      	cmp	r3, #37	; 0x25
 8005f42:	d13e      	bne.n	8005fc2 <_svfiprintf_r+0xd6>
 8005f44:	ebb7 0a06 	subs.w	sl, r7, r6
 8005f48:	d00b      	beq.n	8005f62 <_svfiprintf_r+0x76>
 8005f4a:	4653      	mov	r3, sl
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4640      	mov	r0, r8
 8005f52:	f7ff ff71 	bl	8005e38 <__ssputs_r>
 8005f56:	3001      	adds	r0, #1
 8005f58:	f000 80a4 	beq.w	80060a4 <_svfiprintf_r+0x1b8>
 8005f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f5e:	4453      	add	r3, sl
 8005f60:	9309      	str	r3, [sp, #36]	; 0x24
 8005f62:	783b      	ldrb	r3, [r7, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 809d 	beq.w	80060a4 <_svfiprintf_r+0x1b8>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	9307      	str	r3, [sp, #28]
 8005f78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f7c:	931a      	str	r3, [sp, #104]	; 0x68
 8005f7e:	462f      	mov	r7, r5
 8005f80:	2205      	movs	r2, #5
 8005f82:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005f86:	4850      	ldr	r0, [pc, #320]	; (80060c8 <_svfiprintf_r+0x1dc>)
 8005f88:	f7fa f92a 	bl	80001e0 <memchr>
 8005f8c:	9b04      	ldr	r3, [sp, #16]
 8005f8e:	b9d0      	cbnz	r0, 8005fc6 <_svfiprintf_r+0xda>
 8005f90:	06d9      	lsls	r1, r3, #27
 8005f92:	bf44      	itt	mi
 8005f94:	2220      	movmi	r2, #32
 8005f96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f9a:	071a      	lsls	r2, r3, #28
 8005f9c:	bf44      	itt	mi
 8005f9e:	222b      	movmi	r2, #43	; 0x2b
 8005fa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fa4:	782a      	ldrb	r2, [r5, #0]
 8005fa6:	2a2a      	cmp	r2, #42	; 0x2a
 8005fa8:	d015      	beq.n	8005fd6 <_svfiprintf_r+0xea>
 8005faa:	9a07      	ldr	r2, [sp, #28]
 8005fac:	462f      	mov	r7, r5
 8005fae:	2000      	movs	r0, #0
 8005fb0:	250a      	movs	r5, #10
 8005fb2:	4639      	mov	r1, r7
 8005fb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fb8:	3b30      	subs	r3, #48	; 0x30
 8005fba:	2b09      	cmp	r3, #9
 8005fbc:	d94d      	bls.n	800605a <_svfiprintf_r+0x16e>
 8005fbe:	b1b8      	cbz	r0, 8005ff0 <_svfiprintf_r+0x104>
 8005fc0:	e00f      	b.n	8005fe2 <_svfiprintf_r+0xf6>
 8005fc2:	462f      	mov	r7, r5
 8005fc4:	e7b8      	b.n	8005f38 <_svfiprintf_r+0x4c>
 8005fc6:	4a40      	ldr	r2, [pc, #256]	; (80060c8 <_svfiprintf_r+0x1dc>)
 8005fc8:	1a80      	subs	r0, r0, r2
 8005fca:	fa0b f000 	lsl.w	r0, fp, r0
 8005fce:	4318      	orrs	r0, r3
 8005fd0:	9004      	str	r0, [sp, #16]
 8005fd2:	463d      	mov	r5, r7
 8005fd4:	e7d3      	b.n	8005f7e <_svfiprintf_r+0x92>
 8005fd6:	9a03      	ldr	r2, [sp, #12]
 8005fd8:	1d11      	adds	r1, r2, #4
 8005fda:	6812      	ldr	r2, [r2, #0]
 8005fdc:	9103      	str	r1, [sp, #12]
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	db01      	blt.n	8005fe6 <_svfiprintf_r+0xfa>
 8005fe2:	9207      	str	r2, [sp, #28]
 8005fe4:	e004      	b.n	8005ff0 <_svfiprintf_r+0x104>
 8005fe6:	4252      	negs	r2, r2
 8005fe8:	f043 0302 	orr.w	r3, r3, #2
 8005fec:	9207      	str	r2, [sp, #28]
 8005fee:	9304      	str	r3, [sp, #16]
 8005ff0:	783b      	ldrb	r3, [r7, #0]
 8005ff2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ff4:	d10c      	bne.n	8006010 <_svfiprintf_r+0x124>
 8005ff6:	787b      	ldrb	r3, [r7, #1]
 8005ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8005ffa:	d133      	bne.n	8006064 <_svfiprintf_r+0x178>
 8005ffc:	9b03      	ldr	r3, [sp, #12]
 8005ffe:	1d1a      	adds	r2, r3, #4
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	9203      	str	r2, [sp, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	bfb8      	it	lt
 8006008:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800600c:	3702      	adds	r7, #2
 800600e:	9305      	str	r3, [sp, #20]
 8006010:	4d2e      	ldr	r5, [pc, #184]	; (80060cc <_svfiprintf_r+0x1e0>)
 8006012:	7839      	ldrb	r1, [r7, #0]
 8006014:	2203      	movs	r2, #3
 8006016:	4628      	mov	r0, r5
 8006018:	f7fa f8e2 	bl	80001e0 <memchr>
 800601c:	b138      	cbz	r0, 800602e <_svfiprintf_r+0x142>
 800601e:	2340      	movs	r3, #64	; 0x40
 8006020:	1b40      	subs	r0, r0, r5
 8006022:	fa03 f000 	lsl.w	r0, r3, r0
 8006026:	9b04      	ldr	r3, [sp, #16]
 8006028:	4303      	orrs	r3, r0
 800602a:	3701      	adds	r7, #1
 800602c:	9304      	str	r3, [sp, #16]
 800602e:	7839      	ldrb	r1, [r7, #0]
 8006030:	4827      	ldr	r0, [pc, #156]	; (80060d0 <_svfiprintf_r+0x1e4>)
 8006032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006036:	2206      	movs	r2, #6
 8006038:	1c7e      	adds	r6, r7, #1
 800603a:	f7fa f8d1 	bl	80001e0 <memchr>
 800603e:	2800      	cmp	r0, #0
 8006040:	d038      	beq.n	80060b4 <_svfiprintf_r+0x1c8>
 8006042:	4b24      	ldr	r3, [pc, #144]	; (80060d4 <_svfiprintf_r+0x1e8>)
 8006044:	bb13      	cbnz	r3, 800608c <_svfiprintf_r+0x1a0>
 8006046:	9b03      	ldr	r3, [sp, #12]
 8006048:	3307      	adds	r3, #7
 800604a:	f023 0307 	bic.w	r3, r3, #7
 800604e:	3308      	adds	r3, #8
 8006050:	9303      	str	r3, [sp, #12]
 8006052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006054:	444b      	add	r3, r9
 8006056:	9309      	str	r3, [sp, #36]	; 0x24
 8006058:	e76d      	b.n	8005f36 <_svfiprintf_r+0x4a>
 800605a:	fb05 3202 	mla	r2, r5, r2, r3
 800605e:	2001      	movs	r0, #1
 8006060:	460f      	mov	r7, r1
 8006062:	e7a6      	b.n	8005fb2 <_svfiprintf_r+0xc6>
 8006064:	2300      	movs	r3, #0
 8006066:	3701      	adds	r7, #1
 8006068:	9305      	str	r3, [sp, #20]
 800606a:	4619      	mov	r1, r3
 800606c:	250a      	movs	r5, #10
 800606e:	4638      	mov	r0, r7
 8006070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006074:	3a30      	subs	r2, #48	; 0x30
 8006076:	2a09      	cmp	r2, #9
 8006078:	d903      	bls.n	8006082 <_svfiprintf_r+0x196>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0c8      	beq.n	8006010 <_svfiprintf_r+0x124>
 800607e:	9105      	str	r1, [sp, #20]
 8006080:	e7c6      	b.n	8006010 <_svfiprintf_r+0x124>
 8006082:	fb05 2101 	mla	r1, r5, r1, r2
 8006086:	2301      	movs	r3, #1
 8006088:	4607      	mov	r7, r0
 800608a:	e7f0      	b.n	800606e <_svfiprintf_r+0x182>
 800608c:	ab03      	add	r3, sp, #12
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	4622      	mov	r2, r4
 8006092:	4b11      	ldr	r3, [pc, #68]	; (80060d8 <_svfiprintf_r+0x1ec>)
 8006094:	a904      	add	r1, sp, #16
 8006096:	4640      	mov	r0, r8
 8006098:	f3af 8000 	nop.w
 800609c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80060a0:	4681      	mov	r9, r0
 80060a2:	d1d6      	bne.n	8006052 <_svfiprintf_r+0x166>
 80060a4:	89a3      	ldrh	r3, [r4, #12]
 80060a6:	065b      	lsls	r3, r3, #25
 80060a8:	f53f af35 	bmi.w	8005f16 <_svfiprintf_r+0x2a>
 80060ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060ae:	b01d      	add	sp, #116	; 0x74
 80060b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b4:	ab03      	add	r3, sp, #12
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	4622      	mov	r2, r4
 80060ba:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <_svfiprintf_r+0x1ec>)
 80060bc:	a904      	add	r1, sp, #16
 80060be:	4640      	mov	r0, r8
 80060c0:	f000 f882 	bl	80061c8 <_printf_i>
 80060c4:	e7ea      	b.n	800609c <_svfiprintf_r+0x1b0>
 80060c6:	bf00      	nop
 80060c8:	08006684 	.word	0x08006684
 80060cc:	0800668a 	.word	0x0800668a
 80060d0:	0800668e 	.word	0x0800668e
 80060d4:	00000000 	.word	0x00000000
 80060d8:	08005e39 	.word	0x08005e39

080060dc <_printf_common>:
 80060dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e0:	4691      	mov	r9, r2
 80060e2:	461f      	mov	r7, r3
 80060e4:	688a      	ldr	r2, [r1, #8]
 80060e6:	690b      	ldr	r3, [r1, #16]
 80060e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060ec:	4293      	cmp	r3, r2
 80060ee:	bfb8      	it	lt
 80060f0:	4613      	movlt	r3, r2
 80060f2:	f8c9 3000 	str.w	r3, [r9]
 80060f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060fa:	4606      	mov	r6, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	b112      	cbz	r2, 8006106 <_printf_common+0x2a>
 8006100:	3301      	adds	r3, #1
 8006102:	f8c9 3000 	str.w	r3, [r9]
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	0699      	lsls	r1, r3, #26
 800610a:	bf42      	ittt	mi
 800610c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006110:	3302      	addmi	r3, #2
 8006112:	f8c9 3000 	strmi.w	r3, [r9]
 8006116:	6825      	ldr	r5, [r4, #0]
 8006118:	f015 0506 	ands.w	r5, r5, #6
 800611c:	d107      	bne.n	800612e <_printf_common+0x52>
 800611e:	f104 0a19 	add.w	sl, r4, #25
 8006122:	68e3      	ldr	r3, [r4, #12]
 8006124:	f8d9 2000 	ldr.w	r2, [r9]
 8006128:	1a9b      	subs	r3, r3, r2
 800612a:	42ab      	cmp	r3, r5
 800612c:	dc28      	bgt.n	8006180 <_printf_common+0xa4>
 800612e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006132:	6822      	ldr	r2, [r4, #0]
 8006134:	3300      	adds	r3, #0
 8006136:	bf18      	it	ne
 8006138:	2301      	movne	r3, #1
 800613a:	0692      	lsls	r2, r2, #26
 800613c:	d42d      	bmi.n	800619a <_printf_common+0xbe>
 800613e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006142:	4639      	mov	r1, r7
 8006144:	4630      	mov	r0, r6
 8006146:	47c0      	blx	r8
 8006148:	3001      	adds	r0, #1
 800614a:	d020      	beq.n	800618e <_printf_common+0xb2>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	68e5      	ldr	r5, [r4, #12]
 8006150:	f8d9 2000 	ldr.w	r2, [r9]
 8006154:	f003 0306 	and.w	r3, r3, #6
 8006158:	2b04      	cmp	r3, #4
 800615a:	bf08      	it	eq
 800615c:	1aad      	subeq	r5, r5, r2
 800615e:	68a3      	ldr	r3, [r4, #8]
 8006160:	6922      	ldr	r2, [r4, #16]
 8006162:	bf0c      	ite	eq
 8006164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006168:	2500      	movne	r5, #0
 800616a:	4293      	cmp	r3, r2
 800616c:	bfc4      	itt	gt
 800616e:	1a9b      	subgt	r3, r3, r2
 8006170:	18ed      	addgt	r5, r5, r3
 8006172:	f04f 0900 	mov.w	r9, #0
 8006176:	341a      	adds	r4, #26
 8006178:	454d      	cmp	r5, r9
 800617a:	d11a      	bne.n	80061b2 <_printf_common+0xd6>
 800617c:	2000      	movs	r0, #0
 800617e:	e008      	b.n	8006192 <_printf_common+0xb6>
 8006180:	2301      	movs	r3, #1
 8006182:	4652      	mov	r2, sl
 8006184:	4639      	mov	r1, r7
 8006186:	4630      	mov	r0, r6
 8006188:	47c0      	blx	r8
 800618a:	3001      	adds	r0, #1
 800618c:	d103      	bne.n	8006196 <_printf_common+0xba>
 800618e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006196:	3501      	adds	r5, #1
 8006198:	e7c3      	b.n	8006122 <_printf_common+0x46>
 800619a:	18e1      	adds	r1, r4, r3
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	2030      	movs	r0, #48	; 0x30
 80061a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061a4:	4422      	add	r2, r4
 80061a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061ae:	3302      	adds	r3, #2
 80061b0:	e7c5      	b.n	800613e <_printf_common+0x62>
 80061b2:	2301      	movs	r3, #1
 80061b4:	4622      	mov	r2, r4
 80061b6:	4639      	mov	r1, r7
 80061b8:	4630      	mov	r0, r6
 80061ba:	47c0      	blx	r8
 80061bc:	3001      	adds	r0, #1
 80061be:	d0e6      	beq.n	800618e <_printf_common+0xb2>
 80061c0:	f109 0901 	add.w	r9, r9, #1
 80061c4:	e7d8      	b.n	8006178 <_printf_common+0x9c>
	...

080061c8 <_printf_i>:
 80061c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80061d0:	460c      	mov	r4, r1
 80061d2:	7e09      	ldrb	r1, [r1, #24]
 80061d4:	b085      	sub	sp, #20
 80061d6:	296e      	cmp	r1, #110	; 0x6e
 80061d8:	4617      	mov	r7, r2
 80061da:	4606      	mov	r6, r0
 80061dc:	4698      	mov	r8, r3
 80061de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061e0:	f000 80b3 	beq.w	800634a <_printf_i+0x182>
 80061e4:	d822      	bhi.n	800622c <_printf_i+0x64>
 80061e6:	2963      	cmp	r1, #99	; 0x63
 80061e8:	d036      	beq.n	8006258 <_printf_i+0x90>
 80061ea:	d80a      	bhi.n	8006202 <_printf_i+0x3a>
 80061ec:	2900      	cmp	r1, #0
 80061ee:	f000 80b9 	beq.w	8006364 <_printf_i+0x19c>
 80061f2:	2958      	cmp	r1, #88	; 0x58
 80061f4:	f000 8083 	beq.w	80062fe <_printf_i+0x136>
 80061f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006200:	e032      	b.n	8006268 <_printf_i+0xa0>
 8006202:	2964      	cmp	r1, #100	; 0x64
 8006204:	d001      	beq.n	800620a <_printf_i+0x42>
 8006206:	2969      	cmp	r1, #105	; 0x69
 8006208:	d1f6      	bne.n	80061f8 <_printf_i+0x30>
 800620a:	6820      	ldr	r0, [r4, #0]
 800620c:	6813      	ldr	r3, [r2, #0]
 800620e:	0605      	lsls	r5, r0, #24
 8006210:	f103 0104 	add.w	r1, r3, #4
 8006214:	d52a      	bpl.n	800626c <_printf_i+0xa4>
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6011      	str	r1, [r2, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	da03      	bge.n	8006226 <_printf_i+0x5e>
 800621e:	222d      	movs	r2, #45	; 0x2d
 8006220:	425b      	negs	r3, r3
 8006222:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006226:	486f      	ldr	r0, [pc, #444]	; (80063e4 <_printf_i+0x21c>)
 8006228:	220a      	movs	r2, #10
 800622a:	e039      	b.n	80062a0 <_printf_i+0xd8>
 800622c:	2973      	cmp	r1, #115	; 0x73
 800622e:	f000 809d 	beq.w	800636c <_printf_i+0x1a4>
 8006232:	d808      	bhi.n	8006246 <_printf_i+0x7e>
 8006234:	296f      	cmp	r1, #111	; 0x6f
 8006236:	d020      	beq.n	800627a <_printf_i+0xb2>
 8006238:	2970      	cmp	r1, #112	; 0x70
 800623a:	d1dd      	bne.n	80061f8 <_printf_i+0x30>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	f043 0320 	orr.w	r3, r3, #32
 8006242:	6023      	str	r3, [r4, #0]
 8006244:	e003      	b.n	800624e <_printf_i+0x86>
 8006246:	2975      	cmp	r1, #117	; 0x75
 8006248:	d017      	beq.n	800627a <_printf_i+0xb2>
 800624a:	2978      	cmp	r1, #120	; 0x78
 800624c:	d1d4      	bne.n	80061f8 <_printf_i+0x30>
 800624e:	2378      	movs	r3, #120	; 0x78
 8006250:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006254:	4864      	ldr	r0, [pc, #400]	; (80063e8 <_printf_i+0x220>)
 8006256:	e055      	b.n	8006304 <_printf_i+0x13c>
 8006258:	6813      	ldr	r3, [r2, #0]
 800625a:	1d19      	adds	r1, r3, #4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6011      	str	r1, [r2, #0]
 8006260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006268:	2301      	movs	r3, #1
 800626a:	e08c      	b.n	8006386 <_printf_i+0x1be>
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6011      	str	r1, [r2, #0]
 8006270:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006274:	bf18      	it	ne
 8006276:	b21b      	sxthne	r3, r3
 8006278:	e7cf      	b.n	800621a <_printf_i+0x52>
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	6825      	ldr	r5, [r4, #0]
 800627e:	1d18      	adds	r0, r3, #4
 8006280:	6010      	str	r0, [r2, #0]
 8006282:	0628      	lsls	r0, r5, #24
 8006284:	d501      	bpl.n	800628a <_printf_i+0xc2>
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	e002      	b.n	8006290 <_printf_i+0xc8>
 800628a:	0668      	lsls	r0, r5, #25
 800628c:	d5fb      	bpl.n	8006286 <_printf_i+0xbe>
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	4854      	ldr	r0, [pc, #336]	; (80063e4 <_printf_i+0x21c>)
 8006292:	296f      	cmp	r1, #111	; 0x6f
 8006294:	bf14      	ite	ne
 8006296:	220a      	movne	r2, #10
 8006298:	2208      	moveq	r2, #8
 800629a:	2100      	movs	r1, #0
 800629c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062a0:	6865      	ldr	r5, [r4, #4]
 80062a2:	60a5      	str	r5, [r4, #8]
 80062a4:	2d00      	cmp	r5, #0
 80062a6:	f2c0 8095 	blt.w	80063d4 <_printf_i+0x20c>
 80062aa:	6821      	ldr	r1, [r4, #0]
 80062ac:	f021 0104 	bic.w	r1, r1, #4
 80062b0:	6021      	str	r1, [r4, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d13d      	bne.n	8006332 <_printf_i+0x16a>
 80062b6:	2d00      	cmp	r5, #0
 80062b8:	f040 808e 	bne.w	80063d8 <_printf_i+0x210>
 80062bc:	4665      	mov	r5, ip
 80062be:	2a08      	cmp	r2, #8
 80062c0:	d10b      	bne.n	80062da <_printf_i+0x112>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	07db      	lsls	r3, r3, #31
 80062c6:	d508      	bpl.n	80062da <_printf_i+0x112>
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	6862      	ldr	r2, [r4, #4]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	bfde      	ittt	le
 80062d0:	2330      	movle	r3, #48	; 0x30
 80062d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062d6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80062da:	ebac 0305 	sub.w	r3, ip, r5
 80062de:	6123      	str	r3, [r4, #16]
 80062e0:	f8cd 8000 	str.w	r8, [sp]
 80062e4:	463b      	mov	r3, r7
 80062e6:	aa03      	add	r2, sp, #12
 80062e8:	4621      	mov	r1, r4
 80062ea:	4630      	mov	r0, r6
 80062ec:	f7ff fef6 	bl	80060dc <_printf_common>
 80062f0:	3001      	adds	r0, #1
 80062f2:	d14d      	bne.n	8006390 <_printf_i+0x1c8>
 80062f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062f8:	b005      	add	sp, #20
 80062fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062fe:	4839      	ldr	r0, [pc, #228]	; (80063e4 <_printf_i+0x21c>)
 8006300:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006304:	6813      	ldr	r3, [r2, #0]
 8006306:	6821      	ldr	r1, [r4, #0]
 8006308:	1d1d      	adds	r5, r3, #4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6015      	str	r5, [r2, #0]
 800630e:	060a      	lsls	r2, r1, #24
 8006310:	d50b      	bpl.n	800632a <_printf_i+0x162>
 8006312:	07ca      	lsls	r2, r1, #31
 8006314:	bf44      	itt	mi
 8006316:	f041 0120 	orrmi.w	r1, r1, #32
 800631a:	6021      	strmi	r1, [r4, #0]
 800631c:	b91b      	cbnz	r3, 8006326 <_printf_i+0x15e>
 800631e:	6822      	ldr	r2, [r4, #0]
 8006320:	f022 0220 	bic.w	r2, r2, #32
 8006324:	6022      	str	r2, [r4, #0]
 8006326:	2210      	movs	r2, #16
 8006328:	e7b7      	b.n	800629a <_printf_i+0xd2>
 800632a:	064d      	lsls	r5, r1, #25
 800632c:	bf48      	it	mi
 800632e:	b29b      	uxthmi	r3, r3
 8006330:	e7ef      	b.n	8006312 <_printf_i+0x14a>
 8006332:	4665      	mov	r5, ip
 8006334:	fbb3 f1f2 	udiv	r1, r3, r2
 8006338:	fb02 3311 	mls	r3, r2, r1, r3
 800633c:	5cc3      	ldrb	r3, [r0, r3]
 800633e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006342:	460b      	mov	r3, r1
 8006344:	2900      	cmp	r1, #0
 8006346:	d1f5      	bne.n	8006334 <_printf_i+0x16c>
 8006348:	e7b9      	b.n	80062be <_printf_i+0xf6>
 800634a:	6813      	ldr	r3, [r2, #0]
 800634c:	6825      	ldr	r5, [r4, #0]
 800634e:	6961      	ldr	r1, [r4, #20]
 8006350:	1d18      	adds	r0, r3, #4
 8006352:	6010      	str	r0, [r2, #0]
 8006354:	0628      	lsls	r0, r5, #24
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	d501      	bpl.n	800635e <_printf_i+0x196>
 800635a:	6019      	str	r1, [r3, #0]
 800635c:	e002      	b.n	8006364 <_printf_i+0x19c>
 800635e:	066a      	lsls	r2, r5, #25
 8006360:	d5fb      	bpl.n	800635a <_printf_i+0x192>
 8006362:	8019      	strh	r1, [r3, #0]
 8006364:	2300      	movs	r3, #0
 8006366:	6123      	str	r3, [r4, #16]
 8006368:	4665      	mov	r5, ip
 800636a:	e7b9      	b.n	80062e0 <_printf_i+0x118>
 800636c:	6813      	ldr	r3, [r2, #0]
 800636e:	1d19      	adds	r1, r3, #4
 8006370:	6011      	str	r1, [r2, #0]
 8006372:	681d      	ldr	r5, [r3, #0]
 8006374:	6862      	ldr	r2, [r4, #4]
 8006376:	2100      	movs	r1, #0
 8006378:	4628      	mov	r0, r5
 800637a:	f7f9 ff31 	bl	80001e0 <memchr>
 800637e:	b108      	cbz	r0, 8006384 <_printf_i+0x1bc>
 8006380:	1b40      	subs	r0, r0, r5
 8006382:	6060      	str	r0, [r4, #4]
 8006384:	6863      	ldr	r3, [r4, #4]
 8006386:	6123      	str	r3, [r4, #16]
 8006388:	2300      	movs	r3, #0
 800638a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800638e:	e7a7      	b.n	80062e0 <_printf_i+0x118>
 8006390:	6923      	ldr	r3, [r4, #16]
 8006392:	462a      	mov	r2, r5
 8006394:	4639      	mov	r1, r7
 8006396:	4630      	mov	r0, r6
 8006398:	47c0      	blx	r8
 800639a:	3001      	adds	r0, #1
 800639c:	d0aa      	beq.n	80062f4 <_printf_i+0x12c>
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	079b      	lsls	r3, r3, #30
 80063a2:	d413      	bmi.n	80063cc <_printf_i+0x204>
 80063a4:	68e0      	ldr	r0, [r4, #12]
 80063a6:	9b03      	ldr	r3, [sp, #12]
 80063a8:	4298      	cmp	r0, r3
 80063aa:	bfb8      	it	lt
 80063ac:	4618      	movlt	r0, r3
 80063ae:	e7a3      	b.n	80062f8 <_printf_i+0x130>
 80063b0:	2301      	movs	r3, #1
 80063b2:	464a      	mov	r2, r9
 80063b4:	4639      	mov	r1, r7
 80063b6:	4630      	mov	r0, r6
 80063b8:	47c0      	blx	r8
 80063ba:	3001      	adds	r0, #1
 80063bc:	d09a      	beq.n	80062f4 <_printf_i+0x12c>
 80063be:	3501      	adds	r5, #1
 80063c0:	68e3      	ldr	r3, [r4, #12]
 80063c2:	9a03      	ldr	r2, [sp, #12]
 80063c4:	1a9b      	subs	r3, r3, r2
 80063c6:	42ab      	cmp	r3, r5
 80063c8:	dcf2      	bgt.n	80063b0 <_printf_i+0x1e8>
 80063ca:	e7eb      	b.n	80063a4 <_printf_i+0x1dc>
 80063cc:	2500      	movs	r5, #0
 80063ce:	f104 0919 	add.w	r9, r4, #25
 80063d2:	e7f5      	b.n	80063c0 <_printf_i+0x1f8>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1ac      	bne.n	8006332 <_printf_i+0x16a>
 80063d8:	7803      	ldrb	r3, [r0, #0]
 80063da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063e2:	e76c      	b.n	80062be <_printf_i+0xf6>
 80063e4:	08006695 	.word	0x08006695
 80063e8:	080066a6 	.word	0x080066a6

080063ec <memcpy>:
 80063ec:	b510      	push	{r4, lr}
 80063ee:	1e43      	subs	r3, r0, #1
 80063f0:	440a      	add	r2, r1
 80063f2:	4291      	cmp	r1, r2
 80063f4:	d100      	bne.n	80063f8 <memcpy+0xc>
 80063f6:	bd10      	pop	{r4, pc}
 80063f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006400:	e7f7      	b.n	80063f2 <memcpy+0x6>

08006402 <memmove>:
 8006402:	4288      	cmp	r0, r1
 8006404:	b510      	push	{r4, lr}
 8006406:	eb01 0302 	add.w	r3, r1, r2
 800640a:	d807      	bhi.n	800641c <memmove+0x1a>
 800640c:	1e42      	subs	r2, r0, #1
 800640e:	4299      	cmp	r1, r3
 8006410:	d00a      	beq.n	8006428 <memmove+0x26>
 8006412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006416:	f802 4f01 	strb.w	r4, [r2, #1]!
 800641a:	e7f8      	b.n	800640e <memmove+0xc>
 800641c:	4283      	cmp	r3, r0
 800641e:	d9f5      	bls.n	800640c <memmove+0xa>
 8006420:	1881      	adds	r1, r0, r2
 8006422:	1ad2      	subs	r2, r2, r3
 8006424:	42d3      	cmn	r3, r2
 8006426:	d100      	bne.n	800642a <memmove+0x28>
 8006428:	bd10      	pop	{r4, pc}
 800642a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800642e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006432:	e7f7      	b.n	8006424 <memmove+0x22>

08006434 <_free_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4605      	mov	r5, r0
 8006438:	2900      	cmp	r1, #0
 800643a:	d045      	beq.n	80064c8 <_free_r+0x94>
 800643c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006440:	1f0c      	subs	r4, r1, #4
 8006442:	2b00      	cmp	r3, #0
 8006444:	bfb8      	it	lt
 8006446:	18e4      	addlt	r4, r4, r3
 8006448:	f000 f8d2 	bl	80065f0 <__malloc_lock>
 800644c:	4a1f      	ldr	r2, [pc, #124]	; (80064cc <_free_r+0x98>)
 800644e:	6813      	ldr	r3, [r2, #0]
 8006450:	4610      	mov	r0, r2
 8006452:	b933      	cbnz	r3, 8006462 <_free_r+0x2e>
 8006454:	6063      	str	r3, [r4, #4]
 8006456:	6014      	str	r4, [r2, #0]
 8006458:	4628      	mov	r0, r5
 800645a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800645e:	f000 b8c8 	b.w	80065f2 <__malloc_unlock>
 8006462:	42a3      	cmp	r3, r4
 8006464:	d90c      	bls.n	8006480 <_free_r+0x4c>
 8006466:	6821      	ldr	r1, [r4, #0]
 8006468:	1862      	adds	r2, r4, r1
 800646a:	4293      	cmp	r3, r2
 800646c:	bf04      	itt	eq
 800646e:	681a      	ldreq	r2, [r3, #0]
 8006470:	685b      	ldreq	r3, [r3, #4]
 8006472:	6063      	str	r3, [r4, #4]
 8006474:	bf04      	itt	eq
 8006476:	1852      	addeq	r2, r2, r1
 8006478:	6022      	streq	r2, [r4, #0]
 800647a:	6004      	str	r4, [r0, #0]
 800647c:	e7ec      	b.n	8006458 <_free_r+0x24>
 800647e:	4613      	mov	r3, r2
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	b10a      	cbz	r2, 8006488 <_free_r+0x54>
 8006484:	42a2      	cmp	r2, r4
 8006486:	d9fa      	bls.n	800647e <_free_r+0x4a>
 8006488:	6819      	ldr	r1, [r3, #0]
 800648a:	1858      	adds	r0, r3, r1
 800648c:	42a0      	cmp	r0, r4
 800648e:	d10b      	bne.n	80064a8 <_free_r+0x74>
 8006490:	6820      	ldr	r0, [r4, #0]
 8006492:	4401      	add	r1, r0
 8006494:	1858      	adds	r0, r3, r1
 8006496:	4282      	cmp	r2, r0
 8006498:	6019      	str	r1, [r3, #0]
 800649a:	d1dd      	bne.n	8006458 <_free_r+0x24>
 800649c:	6810      	ldr	r0, [r2, #0]
 800649e:	6852      	ldr	r2, [r2, #4]
 80064a0:	605a      	str	r2, [r3, #4]
 80064a2:	4401      	add	r1, r0
 80064a4:	6019      	str	r1, [r3, #0]
 80064a6:	e7d7      	b.n	8006458 <_free_r+0x24>
 80064a8:	d902      	bls.n	80064b0 <_free_r+0x7c>
 80064aa:	230c      	movs	r3, #12
 80064ac:	602b      	str	r3, [r5, #0]
 80064ae:	e7d3      	b.n	8006458 <_free_r+0x24>
 80064b0:	6820      	ldr	r0, [r4, #0]
 80064b2:	1821      	adds	r1, r4, r0
 80064b4:	428a      	cmp	r2, r1
 80064b6:	bf04      	itt	eq
 80064b8:	6811      	ldreq	r1, [r2, #0]
 80064ba:	6852      	ldreq	r2, [r2, #4]
 80064bc:	6062      	str	r2, [r4, #4]
 80064be:	bf04      	itt	eq
 80064c0:	1809      	addeq	r1, r1, r0
 80064c2:	6021      	streq	r1, [r4, #0]
 80064c4:	605c      	str	r4, [r3, #4]
 80064c6:	e7c7      	b.n	8006458 <_free_r+0x24>
 80064c8:	bd38      	pop	{r3, r4, r5, pc}
 80064ca:	bf00      	nop
 80064cc:	20000094 	.word	0x20000094

080064d0 <_malloc_r>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	1ccd      	adds	r5, r1, #3
 80064d4:	f025 0503 	bic.w	r5, r5, #3
 80064d8:	3508      	adds	r5, #8
 80064da:	2d0c      	cmp	r5, #12
 80064dc:	bf38      	it	cc
 80064de:	250c      	movcc	r5, #12
 80064e0:	2d00      	cmp	r5, #0
 80064e2:	4606      	mov	r6, r0
 80064e4:	db01      	blt.n	80064ea <_malloc_r+0x1a>
 80064e6:	42a9      	cmp	r1, r5
 80064e8:	d903      	bls.n	80064f2 <_malloc_r+0x22>
 80064ea:	230c      	movs	r3, #12
 80064ec:	6033      	str	r3, [r6, #0]
 80064ee:	2000      	movs	r0, #0
 80064f0:	bd70      	pop	{r4, r5, r6, pc}
 80064f2:	f000 f87d 	bl	80065f0 <__malloc_lock>
 80064f6:	4a21      	ldr	r2, [pc, #132]	; (800657c <_malloc_r+0xac>)
 80064f8:	6814      	ldr	r4, [r2, #0]
 80064fa:	4621      	mov	r1, r4
 80064fc:	b991      	cbnz	r1, 8006524 <_malloc_r+0x54>
 80064fe:	4c20      	ldr	r4, [pc, #128]	; (8006580 <_malloc_r+0xb0>)
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	b91b      	cbnz	r3, 800650c <_malloc_r+0x3c>
 8006504:	4630      	mov	r0, r6
 8006506:	f000 f863 	bl	80065d0 <_sbrk_r>
 800650a:	6020      	str	r0, [r4, #0]
 800650c:	4629      	mov	r1, r5
 800650e:	4630      	mov	r0, r6
 8006510:	f000 f85e 	bl	80065d0 <_sbrk_r>
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	d124      	bne.n	8006562 <_malloc_r+0x92>
 8006518:	230c      	movs	r3, #12
 800651a:	6033      	str	r3, [r6, #0]
 800651c:	4630      	mov	r0, r6
 800651e:	f000 f868 	bl	80065f2 <__malloc_unlock>
 8006522:	e7e4      	b.n	80064ee <_malloc_r+0x1e>
 8006524:	680b      	ldr	r3, [r1, #0]
 8006526:	1b5b      	subs	r3, r3, r5
 8006528:	d418      	bmi.n	800655c <_malloc_r+0x8c>
 800652a:	2b0b      	cmp	r3, #11
 800652c:	d90f      	bls.n	800654e <_malloc_r+0x7e>
 800652e:	600b      	str	r3, [r1, #0]
 8006530:	50cd      	str	r5, [r1, r3]
 8006532:	18cc      	adds	r4, r1, r3
 8006534:	4630      	mov	r0, r6
 8006536:	f000 f85c 	bl	80065f2 <__malloc_unlock>
 800653a:	f104 000b 	add.w	r0, r4, #11
 800653e:	1d23      	adds	r3, r4, #4
 8006540:	f020 0007 	bic.w	r0, r0, #7
 8006544:	1ac3      	subs	r3, r0, r3
 8006546:	d0d3      	beq.n	80064f0 <_malloc_r+0x20>
 8006548:	425a      	negs	r2, r3
 800654a:	50e2      	str	r2, [r4, r3]
 800654c:	e7d0      	b.n	80064f0 <_malloc_r+0x20>
 800654e:	428c      	cmp	r4, r1
 8006550:	684b      	ldr	r3, [r1, #4]
 8006552:	bf16      	itet	ne
 8006554:	6063      	strne	r3, [r4, #4]
 8006556:	6013      	streq	r3, [r2, #0]
 8006558:	460c      	movne	r4, r1
 800655a:	e7eb      	b.n	8006534 <_malloc_r+0x64>
 800655c:	460c      	mov	r4, r1
 800655e:	6849      	ldr	r1, [r1, #4]
 8006560:	e7cc      	b.n	80064fc <_malloc_r+0x2c>
 8006562:	1cc4      	adds	r4, r0, #3
 8006564:	f024 0403 	bic.w	r4, r4, #3
 8006568:	42a0      	cmp	r0, r4
 800656a:	d005      	beq.n	8006578 <_malloc_r+0xa8>
 800656c:	1a21      	subs	r1, r4, r0
 800656e:	4630      	mov	r0, r6
 8006570:	f000 f82e 	bl	80065d0 <_sbrk_r>
 8006574:	3001      	adds	r0, #1
 8006576:	d0cf      	beq.n	8006518 <_malloc_r+0x48>
 8006578:	6025      	str	r5, [r4, #0]
 800657a:	e7db      	b.n	8006534 <_malloc_r+0x64>
 800657c:	20000094 	.word	0x20000094
 8006580:	20000098 	.word	0x20000098

08006584 <_realloc_r>:
 8006584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006586:	4607      	mov	r7, r0
 8006588:	4614      	mov	r4, r2
 800658a:	460e      	mov	r6, r1
 800658c:	b921      	cbnz	r1, 8006598 <_realloc_r+0x14>
 800658e:	4611      	mov	r1, r2
 8006590:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006594:	f7ff bf9c 	b.w	80064d0 <_malloc_r>
 8006598:	b922      	cbnz	r2, 80065a4 <_realloc_r+0x20>
 800659a:	f7ff ff4b 	bl	8006434 <_free_r>
 800659e:	4625      	mov	r5, r4
 80065a0:	4628      	mov	r0, r5
 80065a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065a4:	f000 f826 	bl	80065f4 <_malloc_usable_size_r>
 80065a8:	42a0      	cmp	r0, r4
 80065aa:	d20f      	bcs.n	80065cc <_realloc_r+0x48>
 80065ac:	4621      	mov	r1, r4
 80065ae:	4638      	mov	r0, r7
 80065b0:	f7ff ff8e 	bl	80064d0 <_malloc_r>
 80065b4:	4605      	mov	r5, r0
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d0f2      	beq.n	80065a0 <_realloc_r+0x1c>
 80065ba:	4631      	mov	r1, r6
 80065bc:	4622      	mov	r2, r4
 80065be:	f7ff ff15 	bl	80063ec <memcpy>
 80065c2:	4631      	mov	r1, r6
 80065c4:	4638      	mov	r0, r7
 80065c6:	f7ff ff35 	bl	8006434 <_free_r>
 80065ca:	e7e9      	b.n	80065a0 <_realloc_r+0x1c>
 80065cc:	4635      	mov	r5, r6
 80065ce:	e7e7      	b.n	80065a0 <_realloc_r+0x1c>

080065d0 <_sbrk_r>:
 80065d0:	b538      	push	{r3, r4, r5, lr}
 80065d2:	4c06      	ldr	r4, [pc, #24]	; (80065ec <_sbrk_r+0x1c>)
 80065d4:	2300      	movs	r3, #0
 80065d6:	4605      	mov	r5, r0
 80065d8:	4608      	mov	r0, r1
 80065da:	6023      	str	r3, [r4, #0]
 80065dc:	f7fa fb96 	bl	8000d0c <_sbrk>
 80065e0:	1c43      	adds	r3, r0, #1
 80065e2:	d102      	bne.n	80065ea <_sbrk_r+0x1a>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	b103      	cbz	r3, 80065ea <_sbrk_r+0x1a>
 80065e8:	602b      	str	r3, [r5, #0]
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	200005d8 	.word	0x200005d8

080065f0 <__malloc_lock>:
 80065f0:	4770      	bx	lr

080065f2 <__malloc_unlock>:
 80065f2:	4770      	bx	lr

080065f4 <_malloc_usable_size_r>:
 80065f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065f8:	1f18      	subs	r0, r3, #4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	bfbc      	itt	lt
 80065fe:	580b      	ldrlt	r3, [r1, r0]
 8006600:	18c0      	addlt	r0, r0, r3
 8006602:	4770      	bx	lr

08006604 <_init>:
 8006604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006606:	bf00      	nop
 8006608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660a:	bc08      	pop	{r3}
 800660c:	469e      	mov	lr, r3
 800660e:	4770      	bx	lr

08006610 <_fini>:
 8006610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006612:	bf00      	nop
 8006614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006616:	bc08      	pop	{r3}
 8006618:	469e      	mov	lr, r3
 800661a:	4770      	bx	lr
